<?php

/**
 * Base static class for performing query and update operations on the 'art' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 01:03:56 2009
 *
 * @package    lib.model.om
 */
abstract class BaseArtPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'art';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Art';

	/** The total number of columns. */
	const NUM_COLUMNS = 146;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the CO_ART field */
	const CO_ART = 'art.CO_ART';

	/** the column name for the ART_DES field */
	const ART_DES = 'art.ART_DES';

	/** the column name for the FECHA_REG field */
	const FECHA_REG = 'art.FECHA_REG';

	/** the column name for the MANJ_SER field */
	const MANJ_SER = 'art.MANJ_SER';

	/** the column name for the CO_LIN field */
	const CO_LIN = 'art.CO_LIN';

	/** the column name for the CO_CAT field */
	const CO_CAT = 'art.CO_CAT';

	/** the column name for the CO_SUBL field */
	const CO_SUBL = 'art.CO_SUBL';

	/** the column name for the CO_COLOR field */
	const CO_COLOR = 'art.CO_COLOR';

	/** the column name for the ITEM field */
	const ITEM = 'art.ITEM';

	/** the column name for the REF field */
	const REF = 'art.REF';

	/** the column name for the MODELO field */
	const MODELO = 'art.MODELO';

	/** the column name for the PROCEDENCI field */
	const PROCEDENCI = 'art.PROCEDENCI';

	/** the column name for the COMENTARIO field */
	const COMENTARIO = 'art.COMENTARIO';

	/** the column name for the CO_PROV field */
	const CO_PROV = 'art.CO_PROV';

	/** the column name for the UBICACION field */
	const UBICACION = 'art.UBICACION';

	/** the column name for the UNI_VENTA field */
	const UNI_VENTA = 'art.UNI_VENTA';

	/** the column name for the UNI_COMPRA field */
	const UNI_COMPRA = 'art.UNI_COMPRA';

	/** the column name for the UNI_RELAC field */
	const UNI_RELAC = 'art.UNI_RELAC';

	/** the column name for the RELAC_AUT field */
	const RELAC_AUT = 'art.RELAC_AUT';

	/** the column name for the STOCK_ACT field */
	const STOCK_ACT = 'art.STOCK_ACT';

	/** the column name for the STOCK_COM field */
	const STOCK_COM = 'art.STOCK_COM';

	/** the column name for the SSTOCK_COM field */
	const SSTOCK_COM = 'art.SSTOCK_COM';

	/** the column name for the STOCK_LLE field */
	const STOCK_LLE = 'art.STOCK_LLE';

	/** the column name for the SSTOCK_LLE field */
	const SSTOCK_LLE = 'art.SSTOCK_LLE';

	/** the column name for the STOCK_DES field */
	const STOCK_DES = 'art.STOCK_DES';

	/** the column name for the SSTOCK_DES field */
	const SSTOCK_DES = 'art.SSTOCK_DES';

	/** the column name for the SUNI_VENTA field */
	const SUNI_VENTA = 'art.SUNI_VENTA';

	/** the column name for the SUNI_COMPR field */
	const SUNI_COMPR = 'art.SUNI_COMPR';

	/** the column name for the SUNI_RELAC field */
	const SUNI_RELAC = 'art.SUNI_RELAC';

	/** the column name for the SSTOCK_ACT field */
	const SSTOCK_ACT = 'art.SSTOCK_ACT';

	/** the column name for the RELAC_COMP field */
	const RELAC_COMP = 'art.RELAC_COMP';

	/** the column name for the RELAC_VENT field */
	const RELAC_VENT = 'art.RELAC_VENT';

	/** the column name for the PTO_PEDIDO field */
	const PTO_PEDIDO = 'art.PTO_PEDIDO';

	/** the column name for the STOCK_MAX field */
	const STOCK_MAX = 'art.STOCK_MAX';

	/** the column name for the STOCK_MIN field */
	const STOCK_MIN = 'art.STOCK_MIN';

	/** the column name for the PREC_OM field */
	const PREC_OM = 'art.PREC_OM';

	/** the column name for the PREC_VTA1 field */
	const PREC_VTA1 = 'art.PREC_VTA1';

	/** the column name for the FEC_PREC_V field */
	const FEC_PREC_V = 'art.FEC_PREC_V';

	/** the column name for the FEC_PREC_2 field */
	const FEC_PREC_2 = 'art.FEC_PREC_2';

	/** the column name for the PREC_VTA2 field */
	const PREC_VTA2 = 'art.PREC_VTA2';

	/** the column name for the FEC_PREC_3 field */
	const FEC_PREC_3 = 'art.FEC_PREC_3';

	/** the column name for the PREC_VTA3 field */
	const PREC_VTA3 = 'art.PREC_VTA3';

	/** the column name for the FEC_PREC_4 field */
	const FEC_PREC_4 = 'art.FEC_PREC_4';

	/** the column name for the PREC_VTA4 field */
	const PREC_VTA4 = 'art.PREC_VTA4';

	/** the column name for the FEC_PREC_5 field */
	const FEC_PREC_5 = 'art.FEC_PREC_5';

	/** the column name for the PREC_VTA5 field */
	const PREC_VTA5 = 'art.PREC_VTA5';

	/** the column name for the PREC_AGR1 field */
	const PREC_AGR1 = 'art.PREC_AGR1';

	/** the column name for the PREC_AGR2 field */
	const PREC_AGR2 = 'art.PREC_AGR2';

	/** the column name for the PREC_AGR3 field */
	const PREC_AGR3 = 'art.PREC_AGR3';

	/** the column name for the PREC_AGR4 field */
	const PREC_AGR4 = 'art.PREC_AGR4';

	/** the column name for the PREC_AGR5 field */
	const PREC_AGR5 = 'art.PREC_AGR5';

	/** the column name for the CAN_AGR field */
	const CAN_AGR = 'art.CAN_AGR';

	/** the column name for the FEC_DES_P5 field */
	const FEC_DES_P5 = 'art.FEC_DES_P5';

	/** the column name for the FEC_HAS_P5 field */
	const FEC_HAS_P5 = 'art.FEC_HAS_P5';

	/** the column name for the CO_IMP field */
	const CO_IMP = 'art.CO_IMP';

	/** the column name for the MARGEN_MAX field */
	const MARGEN_MAX = 'art.MARGEN_MAX';

	/** the column name for the ULT_COS_UN field */
	const ULT_COS_UN = 'art.ULT_COS_UN';

	/** the column name for the FEC_ULT_CO field */
	const FEC_ULT_CO = 'art.FEC_ULT_CO';

	/** the column name for the COS_PRO_UN field */
	const COS_PRO_UN = 'art.COS_PRO_UN';

	/** the column name for the FEC_COS_PR field */
	const FEC_COS_PR = 'art.FEC_COS_PR';

	/** the column name for the COS_MERC field */
	const COS_MERC = 'art.COS_MERC';

	/** the column name for the FEC_COS_ME field */
	const FEC_COS_ME = 'art.FEC_COS_ME';

	/** the column name for the COS_PROV field */
	const COS_PROV = 'art.COS_PROV';

	/** the column name for the FEC_COS_P2 field */
	const FEC_COS_P2 = 'art.FEC_COS_P2';

	/** the column name for the ULT_COS_DO field */
	const ULT_COS_DO = 'art.ULT_COS_DO';

	/** the column name for the FEC_COS_DO field */
	const FEC_COS_DO = 'art.FEC_COS_DO';

	/** the column name for the COS_UN_AN field */
	const COS_UN_AN = 'art.COS_UN_AN';

	/** the column name for the FEC_COS_AN field */
	const FEC_COS_AN = 'art.FEC_COS_AN';

	/** the column name for the ULT_COS_OM field */
	const ULT_COS_OM = 'art.ULT_COS_OM';

	/** the column name for the FEC_ULT_OM field */
	const FEC_ULT_OM = 'art.FEC_ULT_OM';

	/** the column name for the COS_PRO_OM field */
	const COS_PRO_OM = 'art.COS_PRO_OM';

	/** the column name for the FEC_PRO_OM field */
	const FEC_PRO_OM = 'art.FEC_PRO_OM';

	/** the column name for the TIPO_COS field */
	const TIPO_COS = 'art.TIPO_COS';

	/** the column name for the MONT_COMI field */
	const MONT_COMI = 'art.MONT_COMI';

	/** the column name for the PORC_COS field */
	const PORC_COS = 'art.PORC_COS';

	/** the column name for the MONT_COS field */
	const MONT_COS = 'art.MONT_COS';

	/** the column name for the PORC_GAS field */
	const PORC_GAS = 'art.PORC_GAS';

	/** the column name for the MONT_GAS field */
	const MONT_GAS = 'art.MONT_GAS';

	/** the column name for the F_COST field */
	const F_COST = 'art.F_COST';

	/** the column name for the FISICO field */
	const FISICO = 'art.FISICO';

	/** the column name for the PUNT_CLI field */
	const PUNT_CLI = 'art.PUNT_CLI';

	/** the column name for the PUNT_PRO field */
	const PUNT_PRO = 'art.PUNT_PRO';

	/** the column name for the DIAS_REPOS field */
	const DIAS_REPOS = 'art.DIAS_REPOS';

	/** the column name for the TIPO field */
	const TIPO = 'art.TIPO';

	/** the column name for the ALM_PRIN field */
	const ALM_PRIN = 'art.ALM_PRIN';

	/** the column name for the ANULADO field */
	const ANULADO = 'art.ANULADO';

	/** the column name for the TIPO_IMP field */
	const TIPO_IMP = 'art.TIPO_IMP';

	/** the column name for the DIS_CEN field */
	const DIS_CEN = 'art.DIS_CEN';

	/** the column name for the MON_ILC field */
	const MON_ILC = 'art.MON_ILC';

	/** the column name for the CAPACIDAD field */
	const CAPACIDAD = 'art.CAPACIDAD';

	/** the column name for the GRADO_AL field */
	const GRADO_AL = 'art.GRADO_AL';

	/** the column name for the TIPO_LICOR field */
	const TIPO_LICOR = 'art.TIPO_LICOR';

	/** the column name for the COMPUESTO field */
	const COMPUESTO = 'art.COMPUESTO';

	/** the column name for the PICTURE field */
	const PICTURE = 'art.PICTURE';

	/** the column name for the CAMPO1 field */
	const CAMPO1 = 'art.CAMPO1';

	/** the column name for the CAMPO2 field */
	const CAMPO2 = 'art.CAMPO2';

	/** the column name for the CAMPO3 field */
	const CAMPO3 = 'art.CAMPO3';

	/** the column name for the CAMPO4 field */
	const CAMPO4 = 'art.CAMPO4';

	/** the column name for the CAMPO5 field */
	const CAMPO5 = 'art.CAMPO5';

	/** the column name for the CAMPO6 field */
	const CAMPO6 = 'art.CAMPO6';

	/** the column name for the CAMPO7 field */
	const CAMPO7 = 'art.CAMPO7';

	/** the column name for the CAMPO8 field */
	const CAMPO8 = 'art.CAMPO8';

	/** the column name for the CO_US_IN field */
	const CO_US_IN = 'art.CO_US_IN';

	/** the column name for the FE_US_IN field */
	const FE_US_IN = 'art.FE_US_IN';

	/** the column name for the CO_US_MO field */
	const CO_US_MO = 'art.CO_US_MO';

	/** the column name for the FE_US_MO field */
	const FE_US_MO = 'art.FE_US_MO';

	/** the column name for the CO_US_EL field */
	const CO_US_EL = 'art.CO_US_EL';

	/** the column name for the FE_US_EL field */
	const FE_US_EL = 'art.FE_US_EL';

	/** the column name for the REVISADO field */
	const REVISADO = 'art.REVISADO';

	/** the column name for the TRASNFE field */
	const TRASNFE = 'art.TRASNFE';

	/** the column name for the CO_SUCU field */
	const CO_SUCU = 'art.CO_SUCU';

	/** the column name for the ROWGUID field */
	const ROWGUID = 'art.ROWGUID';

	/** the column name for the TUNI_VENTA field */
	const TUNI_VENTA = 'art.TUNI_VENTA';

	/** the column name for the EQUI_UNI1 field */
	const EQUI_UNI1 = 'art.EQUI_UNI1';

	/** the column name for the EQUI_UNI2 field */
	const EQUI_UNI2 = 'art.EQUI_UNI2';

	/** the column name for the EQUI_UNI3 field */
	const EQUI_UNI3 = 'art.EQUI_UNI3';

	/** the column name for the LOTE field */
	const LOTE = 'art.LOTE';

	/** the column name for the SERIALP field */
	const SERIALP = 'art.SERIALP';

	/** the column name for the VALIDO field */
	const VALIDO = 'art.VALIDO';

	/** the column name for the ATRIBUTO1 field */
	const ATRIBUTO1 = 'art.ATRIBUTO1';

	/** the column name for the VATRIBUTO1 field */
	const VATRIBUTO1 = 'art.VATRIBUTO1';

	/** the column name for the ATRIBUTO2 field */
	const ATRIBUTO2 = 'art.ATRIBUTO2';

	/** the column name for the VATRIBUTO2 field */
	const VATRIBUTO2 = 'art.VATRIBUTO2';

	/** the column name for the ATRIBUTO3 field */
	const ATRIBUTO3 = 'art.ATRIBUTO3';

	/** the column name for the VATRIBUTO3 field */
	const VATRIBUTO3 = 'art.VATRIBUTO3';

	/** the column name for the ATRIBUTO4 field */
	const ATRIBUTO4 = 'art.ATRIBUTO4';

	/** the column name for the VATRIBUTO4 field */
	const VATRIBUTO4 = 'art.VATRIBUTO4';

	/** the column name for the ATRIBUTO5 field */
	const ATRIBUTO5 = 'art.ATRIBUTO5';

	/** the column name for the VATRIBUTO5 field */
	const VATRIBUTO5 = 'art.VATRIBUTO5';

	/** the column name for the ATRIBUTO6 field */
	const ATRIBUTO6 = 'art.ATRIBUTO6';

	/** the column name for the VATRIBUTO6 field */
	const VATRIBUTO6 = 'art.VATRIBUTO6';

	/** the column name for the GARANTIA field */
	const GARANTIA = 'art.GARANTIA';

	/** the column name for the PESO field */
	const PESO = 'art.PESO';

	/** the column name for the PIE field */
	const PIE = 'art.PIE';

	/** the column name for the MARGEN1 field */
	const MARGEN1 = 'art.MARGEN1';

	/** the column name for the MARGEN2 field */
	const MARGEN2 = 'art.MARGEN2';

	/** the column name for the MARGEN3 field */
	const MARGEN3 = 'art.MARGEN3';

	/** the column name for the MARGEN4 field */
	const MARGEN4 = 'art.MARGEN4';

	/** the column name for the MARGEN5 field */
	const MARGEN5 = 'art.MARGEN5';

	/** the column name for the ROW_ID field */
	const ROW_ID = 'art.ROW_ID';

	/** the column name for the IMAGEN1 field */
	const IMAGEN1 = 'art.IMAGEN1';

	/** the column name for the IMAGEN2 field */
	const IMAGEN2 = 'art.IMAGEN2';

	/** the column name for the I_ART_DES field */
	const I_ART_DES = 'art.I_ART_DES';

	/** the column name for the UNI_EMP field */
	const UNI_EMP = 'art.UNI_EMP';

	/** the column name for the REL_EMP field */
	const REL_EMP = 'art.REL_EMP';

	/** the column name for the MOVIL field */
	const MOVIL = 'art.MOVIL';

	/**
	 * An identiy map to hold any loaded instances of Art objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Art[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('CoArt', 'ArtDes', 'FechaReg', 'ManjSer', 'CoLin', 'CoCat', 'CoSubl', 'CoColor', 'Item', 'Ref', 'Modelo', 'Procedenci', 'Comentario', 'CoProv', 'Ubicacion', 'UniVenta', 'UniCompra', 'UniRelac', 'RelacAut', 'StockAct', 'StockCom', 'SstockCom', 'StockLle', 'SstockLle', 'StockDes', 'SstockDes', 'SuniVenta', 'SuniCompr', 'SuniRelac', 'SstockAct', 'RelacComp', 'RelacVent', 'PtoPedido', 'StockMax', 'StockMin', 'PrecOm', 'PrecVta1', 'FecPrecV', 'FecPrec2', 'PrecVta2', 'FecPrec3', 'PrecVta3', 'FecPrec4', 'PrecVta4', 'FecPrec5', 'PrecVta5', 'PrecAgr1', 'PrecAgr2', 'PrecAgr3', 'PrecAgr4', 'PrecAgr5', 'CanAgr', 'FecDesP5', 'FecHasP5', 'CoImp', 'MargenMax', 'UltCosUn', 'FecUltCo', 'CosProUn', 'FecCosPr', 'CosMerc', 'FecCosMe', 'CosProv', 'FecCosP2', 'UltCosDo', 'FecCosDo', 'CosUnAn', 'FecCosAn', 'UltCosOm', 'FecUltOm', 'CosProOm', 'FecProOm', 'TipoCos', 'MontComi', 'PorcCos', 'MontCos', 'PorcGas', 'MontGas', 'FCost', 'Fisico', 'PuntCli', 'PuntPro', 'DiasRepos', 'Tipo', 'AlmPrin', 'Anulado', 'TipoImp', 'DisCen', 'MonIlc', 'Capacidad', 'GradoAl', 'TipoLicor', 'Compuesto', 'Picture', 'Campo1', 'Campo2', 'Campo3', 'Campo4', 'Campo5', 'Campo6', 'Campo7', 'Campo8', 'CoUsIn', 'FeUsIn', 'CoUsMo', 'FeUsMo', 'CoUsEl', 'FeUsEl', 'Revisado', 'Trasnfe', 'CoSucu', 'Rowguid', 'TuniVenta', 'EquiUni1', 'EquiUni2', 'EquiUni3', 'Lote', 'Serialp', 'Valido', 'Atributo1', 'Vatributo1', 'Atributo2', 'Vatributo2', 'Atributo3', 'Vatributo3', 'Atributo4', 'Vatributo4', 'Atributo5', 'Vatributo5', 'Atributo6', 'Vatributo6', 'Garantia', 'Peso', 'Pie', 'Margen1', 'Margen2', 'Margen3', 'Margen4', 'Margen5', 'RowId', 'Imagen1', 'Imagen2', 'IArtDes', 'UniEmp', 'RelEmp', 'Movil', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coArt', 'artDes', 'fechaReg', 'manjSer', 'coLin', 'coCat', 'coSubl', 'coColor', 'item', 'ref', 'modelo', 'procedenci', 'comentario', 'coProv', 'ubicacion', 'uniVenta', 'uniCompra', 'uniRelac', 'relacAut', 'stockAct', 'stockCom', 'sstockCom', 'stockLle', 'sstockLle', 'stockDes', 'sstockDes', 'suniVenta', 'suniCompr', 'suniRelac', 'sstockAct', 'relacComp', 'relacVent', 'ptoPedido', 'stockMax', 'stockMin', 'precOm', 'precVta1', 'fecPrecV', 'fecPrec2', 'precVta2', 'fecPrec3', 'precVta3', 'fecPrec4', 'precVta4', 'fecPrec5', 'precVta5', 'precAgr1', 'precAgr2', 'precAgr3', 'precAgr4', 'precAgr5', 'canAgr', 'fecDesP5', 'fecHasP5', 'coImp', 'margenMax', 'ultCosUn', 'fecUltCo', 'cosProUn', 'fecCosPr', 'cosMerc', 'fecCosMe', 'cosProv', 'fecCosP2', 'ultCosDo', 'fecCosDo', 'cosUnAn', 'fecCosAn', 'ultCosOm', 'fecUltOm', 'cosProOm', 'fecProOm', 'tipoCos', 'montComi', 'porcCos', 'montCos', 'porcGas', 'montGas', 'fCost', 'fisico', 'puntCli', 'puntPro', 'diasRepos', 'tipo', 'almPrin', 'anulado', 'tipoImp', 'disCen', 'monIlc', 'capacidad', 'gradoAl', 'tipoLicor', 'compuesto', 'picture', 'campo1', 'campo2', 'campo3', 'campo4', 'campo5', 'campo6', 'campo7', 'campo8', 'coUsIn', 'feUsIn', 'coUsMo', 'feUsMo', 'coUsEl', 'feUsEl', 'revisado', 'trasnfe', 'coSucu', 'rowguid', 'tuniVenta', 'equiUni1', 'equiUni2', 'equiUni3', 'lote', 'serialp', 'valido', 'atributo1', 'vatributo1', 'atributo2', 'vatributo2', 'atributo3', 'vatributo3', 'atributo4', 'vatributo4', 'atributo5', 'vatributo5', 'atributo6', 'vatributo6', 'garantia', 'peso', 'pie', 'margen1', 'margen2', 'margen3', 'margen4', 'margen5', 'rowId', 'imagen1', 'imagen2', 'iArtDes', 'uniEmp', 'relEmp', 'movil', ),
		BasePeer::TYPE_COLNAME => array (self::CO_ART, self::ART_DES, self::FECHA_REG, self::MANJ_SER, self::CO_LIN, self::CO_CAT, self::CO_SUBL, self::CO_COLOR, self::ITEM, self::REF, self::MODELO, self::PROCEDENCI, self::COMENTARIO, self::CO_PROV, self::UBICACION, self::UNI_VENTA, self::UNI_COMPRA, self::UNI_RELAC, self::RELAC_AUT, self::STOCK_ACT, self::STOCK_COM, self::SSTOCK_COM, self::STOCK_LLE, self::SSTOCK_LLE, self::STOCK_DES, self::SSTOCK_DES, self::SUNI_VENTA, self::SUNI_COMPR, self::SUNI_RELAC, self::SSTOCK_ACT, self::RELAC_COMP, self::RELAC_VENT, self::PTO_PEDIDO, self::STOCK_MAX, self::STOCK_MIN, self::PREC_OM, self::PREC_VTA1, self::FEC_PREC_V, self::FEC_PREC_2, self::PREC_VTA2, self::FEC_PREC_3, self::PREC_VTA3, self::FEC_PREC_4, self::PREC_VTA4, self::FEC_PREC_5, self::PREC_VTA5, self::PREC_AGR1, self::PREC_AGR2, self::PREC_AGR3, self::PREC_AGR4, self::PREC_AGR5, self::CAN_AGR, self::FEC_DES_P5, self::FEC_HAS_P5, self::CO_IMP, self::MARGEN_MAX, self::ULT_COS_UN, self::FEC_ULT_CO, self::COS_PRO_UN, self::FEC_COS_PR, self::COS_MERC, self::FEC_COS_ME, self::COS_PROV, self::FEC_COS_P2, self::ULT_COS_DO, self::FEC_COS_DO, self::COS_UN_AN, self::FEC_COS_AN, self::ULT_COS_OM, self::FEC_ULT_OM, self::COS_PRO_OM, self::FEC_PRO_OM, self::TIPO_COS, self::MONT_COMI, self::PORC_COS, self::MONT_COS, self::PORC_GAS, self::MONT_GAS, self::F_COST, self::FISICO, self::PUNT_CLI, self::PUNT_PRO, self::DIAS_REPOS, self::TIPO, self::ALM_PRIN, self::ANULADO, self::TIPO_IMP, self::DIS_CEN, self::MON_ILC, self::CAPACIDAD, self::GRADO_AL, self::TIPO_LICOR, self::COMPUESTO, self::PICTURE, self::CAMPO1, self::CAMPO2, self::CAMPO3, self::CAMPO4, self::CAMPO5, self::CAMPO6, self::CAMPO7, self::CAMPO8, self::CO_US_IN, self::FE_US_IN, self::CO_US_MO, self::FE_US_MO, self::CO_US_EL, self::FE_US_EL, self::REVISADO, self::TRASNFE, self::CO_SUCU, self::ROWGUID, self::TUNI_VENTA, self::EQUI_UNI1, self::EQUI_UNI2, self::EQUI_UNI3, self::LOTE, self::SERIALP, self::VALIDO, self::ATRIBUTO1, self::VATRIBUTO1, self::ATRIBUTO2, self::VATRIBUTO2, self::ATRIBUTO3, self::VATRIBUTO3, self::ATRIBUTO4, self::VATRIBUTO4, self::ATRIBUTO5, self::VATRIBUTO5, self::ATRIBUTO6, self::VATRIBUTO6, self::GARANTIA, self::PESO, self::PIE, self::MARGEN1, self::MARGEN2, self::MARGEN3, self::MARGEN4, self::MARGEN5, self::ROW_ID, self::IMAGEN1, self::IMAGEN2, self::I_ART_DES, self::UNI_EMP, self::REL_EMP, self::MOVIL, ),
		BasePeer::TYPE_FIELDNAME => array ('co_art', 'art_des', 'fecha_reg', 'manj_ser', 'co_lin', 'co_cat', 'co_subl', 'co_color', 'item', 'ref', 'modelo', 'procedenci', 'comentario', 'co_prov', 'ubicacion', 'uni_venta', 'uni_compra', 'uni_relac', 'relac_aut', 'stock_act', 'stock_com', 'sstock_com', 'stock_lle', 'sstock_lle', 'stock_des', 'sstock_des', 'suni_venta', 'suni_compr', 'suni_relac', 'sstock_act', 'relac_comp', 'relac_vent', 'pto_pedido', 'stock_max', 'stock_min', 'prec_om', 'prec_vta1', 'fec_prec_v', 'fec_prec_2', 'prec_vta2', 'fec_prec_3', 'prec_vta3', 'fec_prec_4', 'prec_vta4', 'fec_prec_5', 'prec_vta5', 'prec_agr1', 'prec_agr2', 'prec_agr3', 'prec_agr4', 'prec_agr5', 'can_agr', 'fec_des_p5', 'fec_has_p5', 'co_imp', 'margen_max', 'ult_cos_un', 'fec_ult_co', 'cos_pro_un', 'fec_cos_pr', 'cos_merc', 'fec_cos_me', 'cos_prov', 'fec_cos_p2', 'ult_cos_do', 'fec_cos_do', 'cos_un_an', 'fec_cos_an', 'ult_cos_om', 'fec_ult_om', 'cos_pro_om', 'fec_pro_om', 'tipo_cos', 'mont_comi', 'porc_cos', 'mont_cos', 'porc_gas', 'mont_gas', 'f_cost', 'fisico', 'punt_cli', 'punt_pro', 'dias_repos', 'tipo', 'alm_prin', 'anulado', 'tipo_imp', 'dis_cen', 'mon_ilc', 'capacidad', 'grado_al', 'tipo_licor', 'compuesto', 'picture', 'campo1', 'campo2', 'campo3', 'campo4', 'campo5', 'campo6', 'campo7', 'campo8', 'co_us_in', 'fe_us_in', 'co_us_mo', 'fe_us_mo', 'co_us_el', 'fe_us_el', 'revisado', 'trasnfe', 'co_sucu', 'rowguid', 'tuni_venta', 'equi_uni1', 'equi_uni2', 'equi_uni3', 'lote', 'serialp', 'valido', 'atributo1', 'vatributo1', 'atributo2', 'vatributo2', 'atributo3', 'vatributo3', 'atributo4', 'vatributo4', 'atributo5', 'vatributo5', 'atributo6', 'vatributo6', 'garantia', 'peso', 'pie', 'margen1', 'margen2', 'margen3', 'margen4', 'margen5', 'row_id', 'imagen1', 'imagen2', 'i_art_des', 'uni_emp', 'rel_emp', 'movil', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('CoArt' => 0, 'ArtDes' => 1, 'FechaReg' => 2, 'ManjSer' => 3, 'CoLin' => 4, 'CoCat' => 5, 'CoSubl' => 6, 'CoColor' => 7, 'Item' => 8, 'Ref' => 9, 'Modelo' => 10, 'Procedenci' => 11, 'Comentario' => 12, 'CoProv' => 13, 'Ubicacion' => 14, 'UniVenta' => 15, 'UniCompra' => 16, 'UniRelac' => 17, 'RelacAut' => 18, 'StockAct' => 19, 'StockCom' => 20, 'SstockCom' => 21, 'StockLle' => 22, 'SstockLle' => 23, 'StockDes' => 24, 'SstockDes' => 25, 'SuniVenta' => 26, 'SuniCompr' => 27, 'SuniRelac' => 28, 'SstockAct' => 29, 'RelacComp' => 30, 'RelacVent' => 31, 'PtoPedido' => 32, 'StockMax' => 33, 'StockMin' => 34, 'PrecOm' => 35, 'PrecVta1' => 36, 'FecPrecV' => 37, 'FecPrec2' => 38, 'PrecVta2' => 39, 'FecPrec3' => 40, 'PrecVta3' => 41, 'FecPrec4' => 42, 'PrecVta4' => 43, 'FecPrec5' => 44, 'PrecVta5' => 45, 'PrecAgr1' => 46, 'PrecAgr2' => 47, 'PrecAgr3' => 48, 'PrecAgr4' => 49, 'PrecAgr5' => 50, 'CanAgr' => 51, 'FecDesP5' => 52, 'FecHasP5' => 53, 'CoImp' => 54, 'MargenMax' => 55, 'UltCosUn' => 56, 'FecUltCo' => 57, 'CosProUn' => 58, 'FecCosPr' => 59, 'CosMerc' => 60, 'FecCosMe' => 61, 'CosProv' => 62, 'FecCosP2' => 63, 'UltCosDo' => 64, 'FecCosDo' => 65, 'CosUnAn' => 66, 'FecCosAn' => 67, 'UltCosOm' => 68, 'FecUltOm' => 69, 'CosProOm' => 70, 'FecProOm' => 71, 'TipoCos' => 72, 'MontComi' => 73, 'PorcCos' => 74, 'MontCos' => 75, 'PorcGas' => 76, 'MontGas' => 77, 'FCost' => 78, 'Fisico' => 79, 'PuntCli' => 80, 'PuntPro' => 81, 'DiasRepos' => 82, 'Tipo' => 83, 'AlmPrin' => 84, 'Anulado' => 85, 'TipoImp' => 86, 'DisCen' => 87, 'MonIlc' => 88, 'Capacidad' => 89, 'GradoAl' => 90, 'TipoLicor' => 91, 'Compuesto' => 92, 'Picture' => 93, 'Campo1' => 94, 'Campo2' => 95, 'Campo3' => 96, 'Campo4' => 97, 'Campo5' => 98, 'Campo6' => 99, 'Campo7' => 100, 'Campo8' => 101, 'CoUsIn' => 102, 'FeUsIn' => 103, 'CoUsMo' => 104, 'FeUsMo' => 105, 'CoUsEl' => 106, 'FeUsEl' => 107, 'Revisado' => 108, 'Trasnfe' => 109, 'CoSucu' => 110, 'Rowguid' => 111, 'TuniVenta' => 112, 'EquiUni1' => 113, 'EquiUni2' => 114, 'EquiUni3' => 115, 'Lote' => 116, 'Serialp' => 117, 'Valido' => 118, 'Atributo1' => 119, 'Vatributo1' => 120, 'Atributo2' => 121, 'Vatributo2' => 122, 'Atributo3' => 123, 'Vatributo3' => 124, 'Atributo4' => 125, 'Vatributo4' => 126, 'Atributo5' => 127, 'Vatributo5' => 128, 'Atributo6' => 129, 'Vatributo6' => 130, 'Garantia' => 131, 'Peso' => 132, 'Pie' => 133, 'Margen1' => 134, 'Margen2' => 135, 'Margen3' => 136, 'Margen4' => 137, 'Margen5' => 138, 'RowId' => 139, 'Imagen1' => 140, 'Imagen2' => 141, 'IArtDes' => 142, 'UniEmp' => 143, 'RelEmp' => 144, 'Movil' => 145, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coArt' => 0, 'artDes' => 1, 'fechaReg' => 2, 'manjSer' => 3, 'coLin' => 4, 'coCat' => 5, 'coSubl' => 6, 'coColor' => 7, 'item' => 8, 'ref' => 9, 'modelo' => 10, 'procedenci' => 11, 'comentario' => 12, 'coProv' => 13, 'ubicacion' => 14, 'uniVenta' => 15, 'uniCompra' => 16, 'uniRelac' => 17, 'relacAut' => 18, 'stockAct' => 19, 'stockCom' => 20, 'sstockCom' => 21, 'stockLle' => 22, 'sstockLle' => 23, 'stockDes' => 24, 'sstockDes' => 25, 'suniVenta' => 26, 'suniCompr' => 27, 'suniRelac' => 28, 'sstockAct' => 29, 'relacComp' => 30, 'relacVent' => 31, 'ptoPedido' => 32, 'stockMax' => 33, 'stockMin' => 34, 'precOm' => 35, 'precVta1' => 36, 'fecPrecV' => 37, 'fecPrec2' => 38, 'precVta2' => 39, 'fecPrec3' => 40, 'precVta3' => 41, 'fecPrec4' => 42, 'precVta4' => 43, 'fecPrec5' => 44, 'precVta5' => 45, 'precAgr1' => 46, 'precAgr2' => 47, 'precAgr3' => 48, 'precAgr4' => 49, 'precAgr5' => 50, 'canAgr' => 51, 'fecDesP5' => 52, 'fecHasP5' => 53, 'coImp' => 54, 'margenMax' => 55, 'ultCosUn' => 56, 'fecUltCo' => 57, 'cosProUn' => 58, 'fecCosPr' => 59, 'cosMerc' => 60, 'fecCosMe' => 61, 'cosProv' => 62, 'fecCosP2' => 63, 'ultCosDo' => 64, 'fecCosDo' => 65, 'cosUnAn' => 66, 'fecCosAn' => 67, 'ultCosOm' => 68, 'fecUltOm' => 69, 'cosProOm' => 70, 'fecProOm' => 71, 'tipoCos' => 72, 'montComi' => 73, 'porcCos' => 74, 'montCos' => 75, 'porcGas' => 76, 'montGas' => 77, 'fCost' => 78, 'fisico' => 79, 'puntCli' => 80, 'puntPro' => 81, 'diasRepos' => 82, 'tipo' => 83, 'almPrin' => 84, 'anulado' => 85, 'tipoImp' => 86, 'disCen' => 87, 'monIlc' => 88, 'capacidad' => 89, 'gradoAl' => 90, 'tipoLicor' => 91, 'compuesto' => 92, 'picture' => 93, 'campo1' => 94, 'campo2' => 95, 'campo3' => 96, 'campo4' => 97, 'campo5' => 98, 'campo6' => 99, 'campo7' => 100, 'campo8' => 101, 'coUsIn' => 102, 'feUsIn' => 103, 'coUsMo' => 104, 'feUsMo' => 105, 'coUsEl' => 106, 'feUsEl' => 107, 'revisado' => 108, 'trasnfe' => 109, 'coSucu' => 110, 'rowguid' => 111, 'tuniVenta' => 112, 'equiUni1' => 113, 'equiUni2' => 114, 'equiUni3' => 115, 'lote' => 116, 'serialp' => 117, 'valido' => 118, 'atributo1' => 119, 'vatributo1' => 120, 'atributo2' => 121, 'vatributo2' => 122, 'atributo3' => 123, 'vatributo3' => 124, 'atributo4' => 125, 'vatributo4' => 126, 'atributo5' => 127, 'vatributo5' => 128, 'atributo6' => 129, 'vatributo6' => 130, 'garantia' => 131, 'peso' => 132, 'pie' => 133, 'margen1' => 134, 'margen2' => 135, 'margen3' => 136, 'margen4' => 137, 'margen5' => 138, 'rowId' => 139, 'imagen1' => 140, 'imagen2' => 141, 'iArtDes' => 142, 'uniEmp' => 143, 'relEmp' => 144, 'movil' => 145, ),
		BasePeer::TYPE_COLNAME => array (self::CO_ART => 0, self::ART_DES => 1, self::FECHA_REG => 2, self::MANJ_SER => 3, self::CO_LIN => 4, self::CO_CAT => 5, self::CO_SUBL => 6, self::CO_COLOR => 7, self::ITEM => 8, self::REF => 9, self::MODELO => 10, self::PROCEDENCI => 11, self::COMENTARIO => 12, self::CO_PROV => 13, self::UBICACION => 14, self::UNI_VENTA => 15, self::UNI_COMPRA => 16, self::UNI_RELAC => 17, self::RELAC_AUT => 18, self::STOCK_ACT => 19, self::STOCK_COM => 20, self::SSTOCK_COM => 21, self::STOCK_LLE => 22, self::SSTOCK_LLE => 23, self::STOCK_DES => 24, self::SSTOCK_DES => 25, self::SUNI_VENTA => 26, self::SUNI_COMPR => 27, self::SUNI_RELAC => 28, self::SSTOCK_ACT => 29, self::RELAC_COMP => 30, self::RELAC_VENT => 31, self::PTO_PEDIDO => 32, self::STOCK_MAX => 33, self::STOCK_MIN => 34, self::PREC_OM => 35, self::PREC_VTA1 => 36, self::FEC_PREC_V => 37, self::FEC_PREC_2 => 38, self::PREC_VTA2 => 39, self::FEC_PREC_3 => 40, self::PREC_VTA3 => 41, self::FEC_PREC_4 => 42, self::PREC_VTA4 => 43, self::FEC_PREC_5 => 44, self::PREC_VTA5 => 45, self::PREC_AGR1 => 46, self::PREC_AGR2 => 47, self::PREC_AGR3 => 48, self::PREC_AGR4 => 49, self::PREC_AGR5 => 50, self::CAN_AGR => 51, self::FEC_DES_P5 => 52, self::FEC_HAS_P5 => 53, self::CO_IMP => 54, self::MARGEN_MAX => 55, self::ULT_COS_UN => 56, self::FEC_ULT_CO => 57, self::COS_PRO_UN => 58, self::FEC_COS_PR => 59, self::COS_MERC => 60, self::FEC_COS_ME => 61, self::COS_PROV => 62, self::FEC_COS_P2 => 63, self::ULT_COS_DO => 64, self::FEC_COS_DO => 65, self::COS_UN_AN => 66, self::FEC_COS_AN => 67, self::ULT_COS_OM => 68, self::FEC_ULT_OM => 69, self::COS_PRO_OM => 70, self::FEC_PRO_OM => 71, self::TIPO_COS => 72, self::MONT_COMI => 73, self::PORC_COS => 74, self::MONT_COS => 75, self::PORC_GAS => 76, self::MONT_GAS => 77, self::F_COST => 78, self::FISICO => 79, self::PUNT_CLI => 80, self::PUNT_PRO => 81, self::DIAS_REPOS => 82, self::TIPO => 83, self::ALM_PRIN => 84, self::ANULADO => 85, self::TIPO_IMP => 86, self::DIS_CEN => 87, self::MON_ILC => 88, self::CAPACIDAD => 89, self::GRADO_AL => 90, self::TIPO_LICOR => 91, self::COMPUESTO => 92, self::PICTURE => 93, self::CAMPO1 => 94, self::CAMPO2 => 95, self::CAMPO3 => 96, self::CAMPO4 => 97, self::CAMPO5 => 98, self::CAMPO6 => 99, self::CAMPO7 => 100, self::CAMPO8 => 101, self::CO_US_IN => 102, self::FE_US_IN => 103, self::CO_US_MO => 104, self::FE_US_MO => 105, self::CO_US_EL => 106, self::FE_US_EL => 107, self::REVISADO => 108, self::TRASNFE => 109, self::CO_SUCU => 110, self::ROWGUID => 111, self::TUNI_VENTA => 112, self::EQUI_UNI1 => 113, self::EQUI_UNI2 => 114, self::EQUI_UNI3 => 115, self::LOTE => 116, self::SERIALP => 117, self::VALIDO => 118, self::ATRIBUTO1 => 119, self::VATRIBUTO1 => 120, self::ATRIBUTO2 => 121, self::VATRIBUTO2 => 122, self::ATRIBUTO3 => 123, self::VATRIBUTO3 => 124, self::ATRIBUTO4 => 125, self::VATRIBUTO4 => 126, self::ATRIBUTO5 => 127, self::VATRIBUTO5 => 128, self::ATRIBUTO6 => 129, self::VATRIBUTO6 => 130, self::GARANTIA => 131, self::PESO => 132, self::PIE => 133, self::MARGEN1 => 134, self::MARGEN2 => 135, self::MARGEN3 => 136, self::MARGEN4 => 137, self::MARGEN5 => 138, self::ROW_ID => 139, self::IMAGEN1 => 140, self::IMAGEN2 => 141, self::I_ART_DES => 142, self::UNI_EMP => 143, self::REL_EMP => 144, self::MOVIL => 145, ),
		BasePeer::TYPE_FIELDNAME => array ('co_art' => 0, 'art_des' => 1, 'fecha_reg' => 2, 'manj_ser' => 3, 'co_lin' => 4, 'co_cat' => 5, 'co_subl' => 6, 'co_color' => 7, 'item' => 8, 'ref' => 9, 'modelo' => 10, 'procedenci' => 11, 'comentario' => 12, 'co_prov' => 13, 'ubicacion' => 14, 'uni_venta' => 15, 'uni_compra' => 16, 'uni_relac' => 17, 'relac_aut' => 18, 'stock_act' => 19, 'stock_com' => 20, 'sstock_com' => 21, 'stock_lle' => 22, 'sstock_lle' => 23, 'stock_des' => 24, 'sstock_des' => 25, 'suni_venta' => 26, 'suni_compr' => 27, 'suni_relac' => 28, 'sstock_act' => 29, 'relac_comp' => 30, 'relac_vent' => 31, 'pto_pedido' => 32, 'stock_max' => 33, 'stock_min' => 34, 'prec_om' => 35, 'prec_vta1' => 36, 'fec_prec_v' => 37, 'fec_prec_2' => 38, 'prec_vta2' => 39, 'fec_prec_3' => 40, 'prec_vta3' => 41, 'fec_prec_4' => 42, 'prec_vta4' => 43, 'fec_prec_5' => 44, 'prec_vta5' => 45, 'prec_agr1' => 46, 'prec_agr2' => 47, 'prec_agr3' => 48, 'prec_agr4' => 49, 'prec_agr5' => 50, 'can_agr' => 51, 'fec_des_p5' => 52, 'fec_has_p5' => 53, 'co_imp' => 54, 'margen_max' => 55, 'ult_cos_un' => 56, 'fec_ult_co' => 57, 'cos_pro_un' => 58, 'fec_cos_pr' => 59, 'cos_merc' => 60, 'fec_cos_me' => 61, 'cos_prov' => 62, 'fec_cos_p2' => 63, 'ult_cos_do' => 64, 'fec_cos_do' => 65, 'cos_un_an' => 66, 'fec_cos_an' => 67, 'ult_cos_om' => 68, 'fec_ult_om' => 69, 'cos_pro_om' => 70, 'fec_pro_om' => 71, 'tipo_cos' => 72, 'mont_comi' => 73, 'porc_cos' => 74, 'mont_cos' => 75, 'porc_gas' => 76, 'mont_gas' => 77, 'f_cost' => 78, 'fisico' => 79, 'punt_cli' => 80, 'punt_pro' => 81, 'dias_repos' => 82, 'tipo' => 83, 'alm_prin' => 84, 'anulado' => 85, 'tipo_imp' => 86, 'dis_cen' => 87, 'mon_ilc' => 88, 'capacidad' => 89, 'grado_al' => 90, 'tipo_licor' => 91, 'compuesto' => 92, 'picture' => 93, 'campo1' => 94, 'campo2' => 95, 'campo3' => 96, 'campo4' => 97, 'campo5' => 98, 'campo6' => 99, 'campo7' => 100, 'campo8' => 101, 'co_us_in' => 102, 'fe_us_in' => 103, 'co_us_mo' => 104, 'fe_us_mo' => 105, 'co_us_el' => 106, 'fe_us_el' => 107, 'revisado' => 108, 'trasnfe' => 109, 'co_sucu' => 110, 'rowguid' => 111, 'tuni_venta' => 112, 'equi_uni1' => 113, 'equi_uni2' => 114, 'equi_uni3' => 115, 'lote' => 116, 'serialp' => 117, 'valido' => 118, 'atributo1' => 119, 'vatributo1' => 120, 'atributo2' => 121, 'vatributo2' => 122, 'atributo3' => 123, 'vatributo3' => 124, 'atributo4' => 125, 'vatributo4' => 126, 'atributo5' => 127, 'vatributo5' => 128, 'atributo6' => 129, 'vatributo6' => 130, 'garantia' => 131, 'peso' => 132, 'pie' => 133, 'margen1' => 134, 'margen2' => 135, 'margen3' => 136, 'margen4' => 137, 'margen5' => 138, 'row_id' => 139, 'imagen1' => 140, 'imagen2' => 141, 'i_art_des' => 142, 'uni_emp' => 143, 'rel_emp' => 144, 'movil' => 145, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new ArtMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. ArtPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(ArtPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(ArtPeer::CO_ART);

		$criteria->addSelectColumn(ArtPeer::ART_DES);

		$criteria->addSelectColumn(ArtPeer::FECHA_REG);

		$criteria->addSelectColumn(ArtPeer::MANJ_SER);

		$criteria->addSelectColumn(ArtPeer::CO_LIN);

		$criteria->addSelectColumn(ArtPeer::CO_CAT);

		$criteria->addSelectColumn(ArtPeer::CO_SUBL);

		$criteria->addSelectColumn(ArtPeer::CO_COLOR);

		$criteria->addSelectColumn(ArtPeer::ITEM);

		$criteria->addSelectColumn(ArtPeer::REF);

		$criteria->addSelectColumn(ArtPeer::MODELO);

		$criteria->addSelectColumn(ArtPeer::PROCEDENCI);

		$criteria->addSelectColumn(ArtPeer::COMENTARIO);

		$criteria->addSelectColumn(ArtPeer::CO_PROV);

		$criteria->addSelectColumn(ArtPeer::UBICACION);

		$criteria->addSelectColumn(ArtPeer::UNI_VENTA);

		$criteria->addSelectColumn(ArtPeer::UNI_COMPRA);

		$criteria->addSelectColumn(ArtPeer::UNI_RELAC);

		$criteria->addSelectColumn(ArtPeer::RELAC_AUT);

		$criteria->addSelectColumn(ArtPeer::STOCK_ACT);

		$criteria->addSelectColumn(ArtPeer::STOCK_COM);

		$criteria->addSelectColumn(ArtPeer::SSTOCK_COM);

		$criteria->addSelectColumn(ArtPeer::STOCK_LLE);

		$criteria->addSelectColumn(ArtPeer::SSTOCK_LLE);

		$criteria->addSelectColumn(ArtPeer::STOCK_DES);

		$criteria->addSelectColumn(ArtPeer::SSTOCK_DES);

		$criteria->addSelectColumn(ArtPeer::SUNI_VENTA);

		$criteria->addSelectColumn(ArtPeer::SUNI_COMPR);

		$criteria->addSelectColumn(ArtPeer::SUNI_RELAC);

		$criteria->addSelectColumn(ArtPeer::SSTOCK_ACT);

		$criteria->addSelectColumn(ArtPeer::RELAC_COMP);

		$criteria->addSelectColumn(ArtPeer::RELAC_VENT);

		$criteria->addSelectColumn(ArtPeer::PTO_PEDIDO);

		$criteria->addSelectColumn(ArtPeer::STOCK_MAX);

		$criteria->addSelectColumn(ArtPeer::STOCK_MIN);

		$criteria->addSelectColumn(ArtPeer::PREC_OM);

		$criteria->addSelectColumn(ArtPeer::PREC_VTA1);

		$criteria->addSelectColumn(ArtPeer::FEC_PREC_V);

		$criteria->addSelectColumn(ArtPeer::FEC_PREC_2);

		$criteria->addSelectColumn(ArtPeer::PREC_VTA2);

		$criteria->addSelectColumn(ArtPeer::FEC_PREC_3);

		$criteria->addSelectColumn(ArtPeer::PREC_VTA3);

		$criteria->addSelectColumn(ArtPeer::FEC_PREC_4);

		$criteria->addSelectColumn(ArtPeer::PREC_VTA4);

		$criteria->addSelectColumn(ArtPeer::FEC_PREC_5);

		$criteria->addSelectColumn(ArtPeer::PREC_VTA5);

		$criteria->addSelectColumn(ArtPeer::PREC_AGR1);

		$criteria->addSelectColumn(ArtPeer::PREC_AGR2);

		$criteria->addSelectColumn(ArtPeer::PREC_AGR3);

		$criteria->addSelectColumn(ArtPeer::PREC_AGR4);

		$criteria->addSelectColumn(ArtPeer::PREC_AGR5);

		$criteria->addSelectColumn(ArtPeer::CAN_AGR);

		$criteria->addSelectColumn(ArtPeer::FEC_DES_P5);

		$criteria->addSelectColumn(ArtPeer::FEC_HAS_P5);

		$criteria->addSelectColumn(ArtPeer::CO_IMP);

		$criteria->addSelectColumn(ArtPeer::MARGEN_MAX);

		$criteria->addSelectColumn(ArtPeer::ULT_COS_UN);

		$criteria->addSelectColumn(ArtPeer::FEC_ULT_CO);

		$criteria->addSelectColumn(ArtPeer::COS_PRO_UN);

		$criteria->addSelectColumn(ArtPeer::FEC_COS_PR);

		$criteria->addSelectColumn(ArtPeer::COS_MERC);

		$criteria->addSelectColumn(ArtPeer::FEC_COS_ME);

		$criteria->addSelectColumn(ArtPeer::COS_PROV);

		$criteria->addSelectColumn(ArtPeer::FEC_COS_P2);

		$criteria->addSelectColumn(ArtPeer::ULT_COS_DO);

		$criteria->addSelectColumn(ArtPeer::FEC_COS_DO);

		$criteria->addSelectColumn(ArtPeer::COS_UN_AN);

		$criteria->addSelectColumn(ArtPeer::FEC_COS_AN);

		$criteria->addSelectColumn(ArtPeer::ULT_COS_OM);

		$criteria->addSelectColumn(ArtPeer::FEC_ULT_OM);

		$criteria->addSelectColumn(ArtPeer::COS_PRO_OM);

		$criteria->addSelectColumn(ArtPeer::FEC_PRO_OM);

		$criteria->addSelectColumn(ArtPeer::TIPO_COS);

		$criteria->addSelectColumn(ArtPeer::MONT_COMI);

		$criteria->addSelectColumn(ArtPeer::PORC_COS);

		$criteria->addSelectColumn(ArtPeer::MONT_COS);

		$criteria->addSelectColumn(ArtPeer::PORC_GAS);

		$criteria->addSelectColumn(ArtPeer::MONT_GAS);

		$criteria->addSelectColumn(ArtPeer::F_COST);

		$criteria->addSelectColumn(ArtPeer::FISICO);

		$criteria->addSelectColumn(ArtPeer::PUNT_CLI);

		$criteria->addSelectColumn(ArtPeer::PUNT_PRO);

		$criteria->addSelectColumn(ArtPeer::DIAS_REPOS);

		$criteria->addSelectColumn(ArtPeer::TIPO);

		$criteria->addSelectColumn(ArtPeer::ALM_PRIN);

		$criteria->addSelectColumn(ArtPeer::ANULADO);

		$criteria->addSelectColumn(ArtPeer::TIPO_IMP);

		$criteria->addSelectColumn(ArtPeer::DIS_CEN);

		$criteria->addSelectColumn(ArtPeer::MON_ILC);

		$criteria->addSelectColumn(ArtPeer::CAPACIDAD);

		$criteria->addSelectColumn(ArtPeer::GRADO_AL);

		$criteria->addSelectColumn(ArtPeer::TIPO_LICOR);

		$criteria->addSelectColumn(ArtPeer::COMPUESTO);

		$criteria->addSelectColumn(ArtPeer::PICTURE);

		$criteria->addSelectColumn(ArtPeer::CAMPO1);

		$criteria->addSelectColumn(ArtPeer::CAMPO2);

		$criteria->addSelectColumn(ArtPeer::CAMPO3);

		$criteria->addSelectColumn(ArtPeer::CAMPO4);

		$criteria->addSelectColumn(ArtPeer::CAMPO5);

		$criteria->addSelectColumn(ArtPeer::CAMPO6);

		$criteria->addSelectColumn(ArtPeer::CAMPO7);

		$criteria->addSelectColumn(ArtPeer::CAMPO8);

		$criteria->addSelectColumn(ArtPeer::CO_US_IN);

		$criteria->addSelectColumn(ArtPeer::FE_US_IN);

		$criteria->addSelectColumn(ArtPeer::CO_US_MO);

		$criteria->addSelectColumn(ArtPeer::FE_US_MO);

		$criteria->addSelectColumn(ArtPeer::CO_US_EL);

		$criteria->addSelectColumn(ArtPeer::FE_US_EL);

		$criteria->addSelectColumn(ArtPeer::REVISADO);

		$criteria->addSelectColumn(ArtPeer::TRASNFE);

		$criteria->addSelectColumn(ArtPeer::CO_SUCU);

		$criteria->addSelectColumn(ArtPeer::ROWGUID);

		$criteria->addSelectColumn(ArtPeer::TUNI_VENTA);

		$criteria->addSelectColumn(ArtPeer::EQUI_UNI1);

		$criteria->addSelectColumn(ArtPeer::EQUI_UNI2);

		$criteria->addSelectColumn(ArtPeer::EQUI_UNI3);

		$criteria->addSelectColumn(ArtPeer::LOTE);

		$criteria->addSelectColumn(ArtPeer::SERIALP);

		$criteria->addSelectColumn(ArtPeer::VALIDO);

		$criteria->addSelectColumn(ArtPeer::ATRIBUTO1);

		$criteria->addSelectColumn(ArtPeer::VATRIBUTO1);

		$criteria->addSelectColumn(ArtPeer::ATRIBUTO2);

		$criteria->addSelectColumn(ArtPeer::VATRIBUTO2);

		$criteria->addSelectColumn(ArtPeer::ATRIBUTO3);

		$criteria->addSelectColumn(ArtPeer::VATRIBUTO3);

		$criteria->addSelectColumn(ArtPeer::ATRIBUTO4);

		$criteria->addSelectColumn(ArtPeer::VATRIBUTO4);

		$criteria->addSelectColumn(ArtPeer::ATRIBUTO5);

		$criteria->addSelectColumn(ArtPeer::VATRIBUTO5);

		$criteria->addSelectColumn(ArtPeer::ATRIBUTO6);

		$criteria->addSelectColumn(ArtPeer::VATRIBUTO6);

		$criteria->addSelectColumn(ArtPeer::GARANTIA);

		$criteria->addSelectColumn(ArtPeer::PESO);

		$criteria->addSelectColumn(ArtPeer::PIE);

		$criteria->addSelectColumn(ArtPeer::MARGEN1);

		$criteria->addSelectColumn(ArtPeer::MARGEN2);

		$criteria->addSelectColumn(ArtPeer::MARGEN3);

		$criteria->addSelectColumn(ArtPeer::MARGEN4);

		$criteria->addSelectColumn(ArtPeer::MARGEN5);

		$criteria->addSelectColumn(ArtPeer::ROW_ID);

		$criteria->addSelectColumn(ArtPeer::IMAGEN1);

		$criteria->addSelectColumn(ArtPeer::IMAGEN2);

		$criteria->addSelectColumn(ArtPeer::I_ART_DES);

		$criteria->addSelectColumn(ArtPeer::UNI_EMP);

		$criteria->addSelectColumn(ArtPeer::REL_EMP);

		$criteria->addSelectColumn(ArtPeer::MOVIL);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Art
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = ArtPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return ArtPeer::populateObjects(ArtPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseArtPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			ArtPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Art $value A Art object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Art $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getCoArt();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Art object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Art) {
				$key = (string) $value->getCoArt();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Art object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Art Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = ArtPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = ArtPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				ArtPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related LinArt table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinLinArt(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related CatArt table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinCatArt(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related SubLin table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinSubLin(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Colores table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinColores(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Proceden table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinProceden(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Prov table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinProv(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UnidadesRelatedByUniVenta table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUnidadesRelatedByUniVenta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UnidadesRelatedBySuniVenta table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUnidadesRelatedBySuniVenta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tabulado table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTabulado(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);


    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their LinArt objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinLinArt(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseArtPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		LinArtPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = LinArtPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = LinArtPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their CatArt objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinCatArt(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		CatArtPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = CatArtPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = CatArtPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					CatArtPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (CatArt)
				$obj2->addArt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their SubLin objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinSubLin(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		SubLinPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = SubLinPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = SubLinPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					SubLinPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (SubLin)
				$obj2->addArt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their Colores objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinColores(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		ColoresPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ColoresPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ColoresPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ColoresPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (Colores)
				$obj2->addArt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their Proceden objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinProceden(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		ProcedenPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ProcedenPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ProcedenPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ProcedenPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (Proceden)
				$obj2->addArt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their Prov objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinProv(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		ProvPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ProvPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ProvPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ProvPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (Prov)
				$obj2->addArt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their Unidades objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUnidadesRelatedByUniVenta(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		UnidadesPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UnidadesPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = UnidadesPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UnidadesPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (Unidades)
				$obj2->addArtRelatedByUniVenta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their Unidades objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUnidadesRelatedBySuniVenta(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		UnidadesPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UnidadesPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = UnidadesPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UnidadesPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (Unidades)
				$obj2->addArtRelatedBySuniVenta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with their Tabulado objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTabulado(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);
		TabuladoPeer::addSelectColumns($c);

		$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TabuladoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = TabuladoPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TabuladoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Art) to $obj2 (Tabulado)
				$obj2->addArt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ArtPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
		$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
		$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
		$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
		$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
		$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
		$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
		$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
		$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Art objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseArtPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
		$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
		$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
		$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
		$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
		$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
		$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
		$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
		$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined LinArt rows

			$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = LinArtPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);
			} // if joined row not null

			// Add objects for joined CatArt rows

			$key3 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = CatArtPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CatArtPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (Art) to the collection in $obj3 (CatArt)
				$obj3->addArt($obj1);
			} // if joined row not null

			// Add objects for joined SubLin rows

			$key4 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = SubLinPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SubLinPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (Art) to the collection in $obj4 (SubLin)
				$obj4->addArt($obj1);
			} // if joined row not null

			// Add objects for joined Colores rows

			$key5 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = ColoresPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ColoresPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Colores)
				$obj5->addArt($obj1);
			} // if joined row not null

			// Add objects for joined Proceden rows

			$key6 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = ProcedenPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProcedenPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Proceden)
				$obj6->addArt($obj1);
			} // if joined row not null

			// Add objects for joined Prov rows

			$key7 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = ProvPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ProvPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Prov)
				$obj7->addArt($obj1);
			} // if joined row not null

			// Add objects for joined Unidades rows

			$key8 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = UnidadesPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UnidadesPeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Unidades)
				$obj8->addArtRelatedByUniVenta($obj1);
			} // if joined row not null

			// Add objects for joined Unidades rows

			$key9 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = UnidadesPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UnidadesPeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (Art) to the collection in $obj9 (Unidades)
				$obj9->addArtRelatedBySuniVenta($obj1);
			} // if joined row not null

			// Add objects for joined Tabulado rows

			$key10 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol10);
			if ($key10 !== null) {
				$obj10 = TabuladoPeer::getInstanceFromPool($key10);
				if (!$obj10) {

					$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TabuladoPeer::addInstanceToPool($obj10, $key10);
				} // if obj10 loaded

				// Add the $obj1 (Art) to the collection in $obj10 (Tabulado)
				$obj10->addArt($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related LinArt table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptLinArt(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related CatArt table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptCatArt(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related SubLin table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptSubLin(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Colores table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptColores(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Proceden table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptProceden(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Prov table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptProv(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UnidadesRelatedByUniVenta table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUnidadesRelatedByUniVenta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UnidadesRelatedBySuniVenta table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUnidadesRelatedBySuniVenta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tabulado table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTabulado(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ArtPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$criteria->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);

    foreach (sfMixer::getCallables('BaseArtPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except LinArt.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptLinArt(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseArtPeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined CatArt rows

				$key2 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = CatArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					CatArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (CatArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined SubLin rows

				$key3 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = SubLinPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					SubLinPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (SubLin)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Colores rows

				$key4 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ColoresPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ColoresPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (Colores)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Proceden rows

				$key5 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProcedenPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProcedenPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Proceden)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Prov rows

				$key6 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProvPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProvPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Prov)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key7 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UnidadesPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UnidadesPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Unidades)
				$obj7->addArtRelatedByUniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key8 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UnidadesPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UnidadesPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Unidades)
				$obj8->addArtRelatedBySuniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key9 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TabuladoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TabuladoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Art) to the collection in $obj9 (Tabulado)
				$obj9->addArt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except CatArt.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptCatArt(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined LinArt rows

				$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LinArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined SubLin rows

				$key3 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = SubLinPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					SubLinPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (SubLin)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Colores rows

				$key4 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ColoresPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ColoresPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (Colores)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Proceden rows

				$key5 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProcedenPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProcedenPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Proceden)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Prov rows

				$key6 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProvPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProvPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Prov)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key7 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UnidadesPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UnidadesPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Unidades)
				$obj7->addArtRelatedByUniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key8 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UnidadesPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UnidadesPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Unidades)
				$obj8->addArtRelatedBySuniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key9 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TabuladoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TabuladoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Art) to the collection in $obj9 (Tabulado)
				$obj9->addArt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except SubLin.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptSubLin(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined LinArt rows

				$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LinArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined CatArt rows

				$key3 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CatArtPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CatArtPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (CatArt)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Colores rows

				$key4 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ColoresPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ColoresPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (Colores)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Proceden rows

				$key5 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProcedenPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProcedenPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Proceden)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Prov rows

				$key6 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProvPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProvPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Prov)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key7 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UnidadesPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UnidadesPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Unidades)
				$obj7->addArtRelatedByUniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key8 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UnidadesPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UnidadesPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Unidades)
				$obj8->addArtRelatedBySuniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key9 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TabuladoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TabuladoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Art) to the collection in $obj9 (Tabulado)
				$obj9->addArt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except Colores.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptColores(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined LinArt rows

				$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LinArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined CatArt rows

				$key3 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CatArtPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CatArtPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (CatArt)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined SubLin rows

				$key4 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = SubLinPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SubLinPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (SubLin)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Proceden rows

				$key5 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProcedenPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProcedenPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Proceden)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Prov rows

				$key6 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProvPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProvPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Prov)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key7 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UnidadesPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UnidadesPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Unidades)
				$obj7->addArtRelatedByUniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key8 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UnidadesPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UnidadesPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Unidades)
				$obj8->addArtRelatedBySuniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key9 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TabuladoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TabuladoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Art) to the collection in $obj9 (Tabulado)
				$obj9->addArt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except Proceden.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptProceden(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined LinArt rows

				$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LinArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined CatArt rows

				$key3 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CatArtPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CatArtPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (CatArt)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined SubLin rows

				$key4 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = SubLinPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SubLinPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (SubLin)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Colores rows

				$key5 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ColoresPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ColoresPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Colores)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Prov rows

				$key6 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProvPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProvPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Prov)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key7 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UnidadesPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UnidadesPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Unidades)
				$obj7->addArtRelatedByUniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key8 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UnidadesPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UnidadesPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Unidades)
				$obj8->addArtRelatedBySuniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key9 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TabuladoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TabuladoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Art) to the collection in $obj9 (Tabulado)
				$obj9->addArt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except Prov.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptProv(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined LinArt rows

				$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LinArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined CatArt rows

				$key3 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CatArtPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CatArtPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (CatArt)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined SubLin rows

				$key4 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = SubLinPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SubLinPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (SubLin)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Colores rows

				$key5 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ColoresPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ColoresPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Colores)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Proceden rows

				$key6 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProcedenPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProcedenPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Proceden)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key7 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UnidadesPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UnidadesPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Unidades)
				$obj7->addArtRelatedByUniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key8 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UnidadesPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UnidadesPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Unidades)
				$obj8->addArtRelatedBySuniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key9 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TabuladoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TabuladoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Art) to the collection in $obj9 (Tabulado)
				$obj9->addArt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except UnidadesRelatedByUniVenta.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUnidadesRelatedByUniVenta(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined LinArt rows

				$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LinArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined CatArt rows

				$key3 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CatArtPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CatArtPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (CatArt)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined SubLin rows

				$key4 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = SubLinPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SubLinPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (SubLin)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Colores rows

				$key5 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ColoresPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ColoresPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Colores)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Proceden rows

				$key6 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProcedenPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProcedenPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Proceden)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Prov rows

				$key7 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = ProvPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ProvPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Prov)
				$obj7->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key8 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TabuladoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TabuladoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Tabulado)
				$obj8->addArt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except UnidadesRelatedBySuniVenta.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUnidadesRelatedBySuniVenta(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$c->addJoin(array(ArtPeer::TIPO_IMP,), array(TabuladoPeer::TIPO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined LinArt rows

				$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LinArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined CatArt rows

				$key3 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CatArtPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CatArtPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (CatArt)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined SubLin rows

				$key4 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = SubLinPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SubLinPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (SubLin)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Colores rows

				$key5 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ColoresPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ColoresPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Colores)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Proceden rows

				$key6 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProcedenPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProcedenPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Proceden)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Prov rows

				$key7 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = ProvPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ProvPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Prov)
				$obj7->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key8 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TabuladoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TabuladoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Tabulado)
				$obj8->addArt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Art objects pre-filled with all related objects except Tabulado.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Art objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTabulado(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ArtPeer::addSelectColumns($c);
		$startcol2 = (ArtPeer::NUM_COLUMNS - ArtPeer::NUM_LAZY_LOAD_COLUMNS);

		LinArtPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (LinArtPeer::NUM_COLUMNS - LinArtPeer::NUM_LAZY_LOAD_COLUMNS);

		CatArtPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CatArtPeer::NUM_COLUMNS - CatArtPeer::NUM_LAZY_LOAD_COLUMNS);

		SubLinPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SubLinPeer::NUM_COLUMNS - SubLinPeer::NUM_LAZY_LOAD_COLUMNS);

		ColoresPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ColoresPeer::NUM_COLUMNS - ColoresPeer::NUM_LAZY_LOAD_COLUMNS);

		ProcedenPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProcedenPeer::NUM_COLUMNS - ProcedenPeer::NUM_LAZY_LOAD_COLUMNS);

		ProvPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (UnidadesPeer::NUM_COLUMNS - UnidadesPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ArtPeer::CO_LIN,), array(LinArtPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_CAT,), array(CatArtPeer::CO_CAT,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_SUBL,), array(SubLinPeer::CO_LIN,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_COLOR,), array(ColoresPeer::CO_COL,), $join_behavior);
				$c->addJoin(array(ArtPeer::PROCEDENCI,), array(ProcedenPeer::COD_PROC,), $join_behavior);
				$c->addJoin(array(ArtPeer::CO_PROV,), array(ProvPeer::CO_PROV,), $join_behavior);
				$c->addJoin(array(ArtPeer::UNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);
				$c->addJoin(array(ArtPeer::SUNI_VENTA,), array(UnidadesPeer::CO_UNI,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ArtPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ArtPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ArtPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ArtPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined LinArt rows

				$key2 = LinArtPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LinArtPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = LinArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LinArtPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Art) to the collection in $obj2 (LinArt)
				$obj2->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined CatArt rows

				$key3 = CatArtPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CatArtPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CatArtPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CatArtPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Art) to the collection in $obj3 (CatArt)
				$obj3->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined SubLin rows

				$key4 = SubLinPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = SubLinPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = SubLinPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SubLinPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Art) to the collection in $obj4 (SubLin)
				$obj4->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Colores rows

				$key5 = ColoresPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ColoresPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ColoresPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ColoresPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Art) to the collection in $obj5 (Colores)
				$obj5->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Proceden rows

				$key6 = ProcedenPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProcedenPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProcedenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProcedenPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Art) to the collection in $obj6 (Proceden)
				$obj6->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Prov rows

				$key7 = ProvPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = ProvPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = ProvPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ProvPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Art) to the collection in $obj7 (Prov)
				$obj7->addArt($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key8 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UnidadesPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UnidadesPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Art) to the collection in $obj8 (Unidades)
				$obj8->addArtRelatedByUniVenta($obj1);

			} // if joined row is not null

				// Add objects for joined Unidades rows

				$key9 = UnidadesPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UnidadesPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = UnidadesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UnidadesPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Art) to the collection in $obj9 (Unidades)
				$obj9->addArtRelatedBySuniVenta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return ArtPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a Art or Criteria object.
	 *
	 * @param      mixed $values Criteria or Art object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseArtPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseArtPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Art object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseArtPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Art or Criteria object.
	 *
	 * @param      mixed $values Criteria or Art object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseArtPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseArtPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(ArtPeer::CO_ART);
			$selectCriteria->add(ArtPeer::CO_ART, $criteria->remove(ArtPeer::CO_ART), $comparison);

		} else { // $values is Art object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseArtPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseArtPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the art table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(ArtPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Art or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Art object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			ArtPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Art) {
			// invalidate the cache for this single object
			ArtPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(ArtPeer::CO_ART, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				ArtPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Art object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Art $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Art $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(ArtPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(ArtPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(ArtPeer::DATABASE_NAME, ArtPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = ArtPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      string $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Art
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = ArtPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(ArtPeer::DATABASE_NAME);
		$criteria->add(ArtPeer::CO_ART, $pk);

		$v = ArtPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ArtPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(ArtPeer::DATABASE_NAME);
			$criteria->add(ArtPeer::CO_ART, $pks, Criteria::IN);
			$objs = ArtPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseArtPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the ArtPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the ArtPeer class:
//
// Propel::getDatabaseMap(ArtPeer::DATABASE_NAME)->addTableBuilder(ArtPeer::TABLE_NAME, ArtPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseArtPeer::DATABASE_NAME)->addTableBuilder(BaseArtPeer::TABLE_NAME, BaseArtPeer::getMapBuilder());

