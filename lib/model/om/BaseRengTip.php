<?php

/**
 * Base class that represents a row from the 'reng_tip' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 01:03:59 2009
 *
 * @package    lib.model.om
 */
abstract class BaseRengTip extends BaseObject  implements Persistent {


  const PEER = 'RengTipPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RengTipPeer
	 */
	protected static $peer;

	/**
	 * The value for the cob_num field.
	 * @var        int
	 */
	protected $cob_num;

	/**
	 * The value for the reng_num field.
	 * @var        int
	 */
	protected $reng_num;

	/**
	 * The value for the tip_cob field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tip_cob;

	/**
	 * The value for the movi field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $movi;

	/**
	 * The value for the num_doc field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $num_doc;

	/**
	 * The value for the mont_doc field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $mont_doc;

	/**
	 * The value for the mont_tmp field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $mont_tmp;

	/**
	 * The value for the moneda field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $moneda;

	/**
	 * The value for the banco field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $banco;

	/**
	 * The value for the cod_caja field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $cod_caja;

	/**
	 * The value for the des_caja field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $des_caja;

	/**
	 * The value for the fec_cheq field.
	 * @var        string
	 */
	protected $fec_cheq;

	/**
	 * The value for the nombre_ban field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $nombre_ban;

	/**
	 * The value for the numero field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $numero;

	/**
	 * The value for the devuelto field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $devuelto;

	/**
	 * The value for the rowguid field.
	 * Note: this column has a database default value of: '(newid())'
	 * @var        string
	 */
	protected $rowguid;

	/**
	 * The value for the operador field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $operador;

	/**
	 * The value for the clave field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $clave;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRengTip object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->tip_cob = ' ';
		$this->movi = 0;
		$this->num_doc = ' ';
		$this->mont_doc = '0';
		$this->mont_tmp = '0';
		$this->moneda = ' ';
		$this->banco = ' ';
		$this->cod_caja = ' ';
		$this->des_caja = ' ';
		$this->nombre_ban = ' ';
		$this->numero = ' ';
		$this->devuelto = false;
		$this->rowguid = '(newid())';
		$this->operador = ' ';
		$this->clave = ' ';
	}

	/**
	 * Get the [cob_num] column value.
	 * 
	 * @return     int
	 */
	public function getCobNum()
	{
		return $this->cob_num;
	}

	/**
	 * Get the [reng_num] column value.
	 * 
	 * @return     int
	 */
	public function getRengNum()
	{
		return $this->reng_num;
	}

	/**
	 * Get the [tip_cob] column value.
	 * 
	 * @return     string
	 */
	public function getTipCob()
	{
		return $this->tip_cob;
	}

	/**
	 * Get the [movi] column value.
	 * 
	 * @return     int
	 */
	public function getMovi()
	{
		return $this->movi;
	}

	/**
	 * Get the [num_doc] column value.
	 * 
	 * @return     string
	 */
	public function getNumDoc()
	{
		return $this->num_doc;
	}

	/**
	 * Get the [mont_doc] column value.
	 * 
	 * @return     string
	 */
	public function getMontDoc()
	{
		return $this->mont_doc;
	}

	/**
	 * Get the [mont_tmp] column value.
	 * 
	 * @return     string
	 */
	public function getMontTmp()
	{
		return $this->mont_tmp;
	}

	/**
	 * Get the [moneda] column value.
	 * 
	 * @return     string
	 */
	public function getMoneda()
	{
		return $this->moneda;
	}

	/**
	 * Get the [banco] column value.
	 * 
	 * @return     string
	 */
	public function getBanco()
	{
		return $this->banco;
	}

	/**
	 * Get the [cod_caja] column value.
	 * 
	 * @return     string
	 */
	public function getCodCaja()
	{
		return $this->cod_caja;
	}

	/**
	 * Get the [des_caja] column value.
	 * 
	 * @return     string
	 */
	public function getDesCaja()
	{
		return $this->des_caja;
	}

	/**
	 * Get the [fec_cheq] column value.
	 * 
	 * @return     string
	 */
	public function getFecCheq()
	{
		return $this->fec_cheq;
	}

	/**
	 * Get the [nombre_ban] column value.
	 * 
	 * @return     string
	 */
	public function getNombreBan()
	{
		return $this->nombre_ban;
	}

	/**
	 * Get the [numero] column value.
	 * 
	 * @return     string
	 */
	public function getNumero()
	{
		return $this->numero;
	}

	/**
	 * Get the [devuelto] column value.
	 * 
	 * @return     boolean
	 */
	public function getDevuelto()
	{
		return $this->devuelto;
	}

	/**
	 * Get the [rowguid] column value.
	 * 
	 * @return     string
	 */
	public function getRowguid()
	{
		return $this->rowguid;
	}

	/**
	 * Get the [operador] column value.
	 * 
	 * @return     string
	 */
	public function getOperador()
	{
		return $this->operador;
	}

	/**
	 * Get the [clave] column value.
	 * 
	 * @return     string
	 */
	public function getClave()
	{
		return $this->clave;
	}

	/**
	 * Set the value of [cob_num] column.
	 * 
	 * @param      int $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setCobNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cob_num !== $v) {
			$this->cob_num = $v;
			$this->modifiedColumns[] = RengTipPeer::COB_NUM;
		}

		return $this;
	} // setCobNum()

	/**
	 * Set the value of [reng_num] column.
	 * 
	 * @param      int $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setRengNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reng_num !== $v) {
			$this->reng_num = $v;
			$this->modifiedColumns[] = RengTipPeer::RENG_NUM;
		}

		return $this;
	} // setRengNum()

	/**
	 * Set the value of [tip_cob] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setTipCob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tip_cob !== $v || $v === ' ') {
			$this->tip_cob = $v;
			$this->modifiedColumns[] = RengTipPeer::TIP_COB;
		}

		return $this;
	} // setTipCob()

	/**
	 * Set the value of [movi] column.
	 * 
	 * @param      int $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setMovi($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->movi !== $v || $v === 0) {
			$this->movi = $v;
			$this->modifiedColumns[] = RengTipPeer::MOVI;
		}

		return $this;
	} // setMovi()

	/**
	 * Set the value of [num_doc] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setNumDoc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->num_doc !== $v || $v === ' ') {
			$this->num_doc = $v;
			$this->modifiedColumns[] = RengTipPeer::NUM_DOC;
		}

		return $this;
	} // setNumDoc()

	/**
	 * Set the value of [mont_doc] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setMontDoc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mont_doc !== $v || $v === '0') {
			$this->mont_doc = $v;
			$this->modifiedColumns[] = RengTipPeer::MONT_DOC;
		}

		return $this;
	} // setMontDoc()

	/**
	 * Set the value of [mont_tmp] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setMontTmp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mont_tmp !== $v || $v === '0') {
			$this->mont_tmp = $v;
			$this->modifiedColumns[] = RengTipPeer::MONT_TMP;
		}

		return $this;
	} // setMontTmp()

	/**
	 * Set the value of [moneda] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setMoneda($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->moneda !== $v || $v === ' ') {
			$this->moneda = $v;
			$this->modifiedColumns[] = RengTipPeer::MONEDA;
		}

		return $this;
	} // setMoneda()

	/**
	 * Set the value of [banco] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setBanco($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->banco !== $v || $v === ' ') {
			$this->banco = $v;
			$this->modifiedColumns[] = RengTipPeer::BANCO;
		}

		return $this;
	} // setBanco()

	/**
	 * Set the value of [cod_caja] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setCodCaja($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cod_caja !== $v || $v === ' ') {
			$this->cod_caja = $v;
			$this->modifiedColumns[] = RengTipPeer::COD_CAJA;
		}

		return $this;
	} // setCodCaja()

	/**
	 * Set the value of [des_caja] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setDesCaja($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->des_caja !== $v || $v === ' ') {
			$this->des_caja = $v;
			$this->modifiedColumns[] = RengTipPeer::DES_CAJA;
		}

		return $this;
	} // setDesCaja()

	/**
	 * Set the value of [fec_cheq] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setFecCheq($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_cheq !== $v) {
			$this->fec_cheq = $v;
			$this->modifiedColumns[] = RengTipPeer::FEC_CHEQ;
		}

		return $this;
	} // setFecCheq()

	/**
	 * Set the value of [nombre_ban] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setNombreBan($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre_ban !== $v || $v === ' ') {
			$this->nombre_ban = $v;
			$this->modifiedColumns[] = RengTipPeer::NOMBRE_BAN;
		}

		return $this;
	} // setNombreBan()

	/**
	 * Set the value of [numero] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setNumero($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numero !== $v || $v === ' ') {
			$this->numero = $v;
			$this->modifiedColumns[] = RengTipPeer::NUMERO;
		}

		return $this;
	} // setNumero()

	/**
	 * Set the value of [devuelto] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setDevuelto($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->devuelto !== $v || $v === false) {
			$this->devuelto = $v;
			$this->modifiedColumns[] = RengTipPeer::DEVUELTO;
		}

		return $this;
	} // setDevuelto()

	/**
	 * Set the value of [rowguid] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setRowguid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowguid !== $v || $v === '(newid())') {
			$this->rowguid = $v;
			$this->modifiedColumns[] = RengTipPeer::ROWGUID;
		}

		return $this;
	} // setRowguid()

	/**
	 * Set the value of [operador] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setOperador($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->operador !== $v || $v === ' ') {
			$this->operador = $v;
			$this->modifiedColumns[] = RengTipPeer::OPERADOR;
		}

		return $this;
	} // setOperador()

	/**
	 * Set the value of [clave] column.
	 * 
	 * @param      string $v new value
	 * @return     RengTip The current object (for fluent API support)
	 */
	public function setClave($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->clave !== $v || $v === ' ') {
			$this->clave = $v;
			$this->modifiedColumns[] = RengTipPeer::CLAVE;
		}

		return $this;
	} // setClave()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RengTipPeer::TIP_COB,RengTipPeer::MOVI,RengTipPeer::NUM_DOC,RengTipPeer::MONT_DOC,RengTipPeer::MONT_TMP,RengTipPeer::MONEDA,RengTipPeer::BANCO,RengTipPeer::COD_CAJA,RengTipPeer::DES_CAJA,RengTipPeer::NOMBRE_BAN,RengTipPeer::NUMERO,RengTipPeer::DEVUELTO,RengTipPeer::ROWGUID,RengTipPeer::OPERADOR,RengTipPeer::CLAVE))) {
				return false;
			}

			if ($this->tip_cob !== ' ') {
				return false;
			}

			if ($this->movi !== 0) {
				return false;
			}

			if ($this->num_doc !== ' ') {
				return false;
			}

			if ($this->mont_doc !== '0') {
				return false;
			}

			if ($this->mont_tmp !== '0') {
				return false;
			}

			if ($this->moneda !== ' ') {
				return false;
			}

			if ($this->banco !== ' ') {
				return false;
			}

			if ($this->cod_caja !== ' ') {
				return false;
			}

			if ($this->des_caja !== ' ') {
				return false;
			}

			if ($this->nombre_ban !== ' ') {
				return false;
			}

			if ($this->numero !== ' ') {
				return false;
			}

			if ($this->devuelto !== false) {
				return false;
			}

			if ($this->rowguid !== '(newid())') {
				return false;
			}

			if ($this->operador !== ' ') {
				return false;
			}

			if ($this->clave !== ' ') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cob_num = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->reng_num = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->tip_cob = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->movi = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->num_doc = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->mont_doc = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->mont_tmp = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->moneda = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->banco = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->cod_caja = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->des_caja = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->fec_cheq = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->nombre_ban = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->numero = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->devuelto = ($row[$startcol + 14] !== null) ? (boolean) $row[$startcol + 14] : null;
			$this->rowguid = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->operador = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->clave = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 18; // 18 = RengTipPeer::NUM_COLUMNS - RengTipPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RengTip object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RengTipPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengTip:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RengTipPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRengTip:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengTip:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRengTip:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RengTipPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RengTipPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += RengTipPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RengTipPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RengTipPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCobNum();
				break;
			case 1:
				return $this->getRengNum();
				break;
			case 2:
				return $this->getTipCob();
				break;
			case 3:
				return $this->getMovi();
				break;
			case 4:
				return $this->getNumDoc();
				break;
			case 5:
				return $this->getMontDoc();
				break;
			case 6:
				return $this->getMontTmp();
				break;
			case 7:
				return $this->getMoneda();
				break;
			case 8:
				return $this->getBanco();
				break;
			case 9:
				return $this->getCodCaja();
				break;
			case 10:
				return $this->getDesCaja();
				break;
			case 11:
				return $this->getFecCheq();
				break;
			case 12:
				return $this->getNombreBan();
				break;
			case 13:
				return $this->getNumero();
				break;
			case 14:
				return $this->getDevuelto();
				break;
			case 15:
				return $this->getRowguid();
				break;
			case 16:
				return $this->getOperador();
				break;
			case 17:
				return $this->getClave();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RengTipPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCobNum(),
			$keys[1] => $this->getRengNum(),
			$keys[2] => $this->getTipCob(),
			$keys[3] => $this->getMovi(),
			$keys[4] => $this->getNumDoc(),
			$keys[5] => $this->getMontDoc(),
			$keys[6] => $this->getMontTmp(),
			$keys[7] => $this->getMoneda(),
			$keys[8] => $this->getBanco(),
			$keys[9] => $this->getCodCaja(),
			$keys[10] => $this->getDesCaja(),
			$keys[11] => $this->getFecCheq(),
			$keys[12] => $this->getNombreBan(),
			$keys[13] => $this->getNumero(),
			$keys[14] => $this->getDevuelto(),
			$keys[15] => $this->getRowguid(),
			$keys[16] => $this->getOperador(),
			$keys[17] => $this->getClave(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RengTipPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCobNum($value);
				break;
			case 1:
				$this->setRengNum($value);
				break;
			case 2:
				$this->setTipCob($value);
				break;
			case 3:
				$this->setMovi($value);
				break;
			case 4:
				$this->setNumDoc($value);
				break;
			case 5:
				$this->setMontDoc($value);
				break;
			case 6:
				$this->setMontTmp($value);
				break;
			case 7:
				$this->setMoneda($value);
				break;
			case 8:
				$this->setBanco($value);
				break;
			case 9:
				$this->setCodCaja($value);
				break;
			case 10:
				$this->setDesCaja($value);
				break;
			case 11:
				$this->setFecCheq($value);
				break;
			case 12:
				$this->setNombreBan($value);
				break;
			case 13:
				$this->setNumero($value);
				break;
			case 14:
				$this->setDevuelto($value);
				break;
			case 15:
				$this->setRowguid($value);
				break;
			case 16:
				$this->setOperador($value);
				break;
			case 17:
				$this->setClave($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RengTipPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCobNum($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setRengNum($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTipCob($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setMovi($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNumDoc($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setMontDoc($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMontTmp($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setMoneda($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setBanco($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCodCaja($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDesCaja($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFecCheq($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setNombreBan($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setNumero($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDevuelto($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setRowguid($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setOperador($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setClave($arr[$keys[17]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RengTipPeer::DATABASE_NAME);

		if ($this->isColumnModified(RengTipPeer::COB_NUM)) $criteria->add(RengTipPeer::COB_NUM, $this->cob_num);
		if ($this->isColumnModified(RengTipPeer::RENG_NUM)) $criteria->add(RengTipPeer::RENG_NUM, $this->reng_num);
		if ($this->isColumnModified(RengTipPeer::TIP_COB)) $criteria->add(RengTipPeer::TIP_COB, $this->tip_cob);
		if ($this->isColumnModified(RengTipPeer::MOVI)) $criteria->add(RengTipPeer::MOVI, $this->movi);
		if ($this->isColumnModified(RengTipPeer::NUM_DOC)) $criteria->add(RengTipPeer::NUM_DOC, $this->num_doc);
		if ($this->isColumnModified(RengTipPeer::MONT_DOC)) $criteria->add(RengTipPeer::MONT_DOC, $this->mont_doc);
		if ($this->isColumnModified(RengTipPeer::MONT_TMP)) $criteria->add(RengTipPeer::MONT_TMP, $this->mont_tmp);
		if ($this->isColumnModified(RengTipPeer::MONEDA)) $criteria->add(RengTipPeer::MONEDA, $this->moneda);
		if ($this->isColumnModified(RengTipPeer::BANCO)) $criteria->add(RengTipPeer::BANCO, $this->banco);
		if ($this->isColumnModified(RengTipPeer::COD_CAJA)) $criteria->add(RengTipPeer::COD_CAJA, $this->cod_caja);
		if ($this->isColumnModified(RengTipPeer::DES_CAJA)) $criteria->add(RengTipPeer::DES_CAJA, $this->des_caja);
		if ($this->isColumnModified(RengTipPeer::FEC_CHEQ)) $criteria->add(RengTipPeer::FEC_CHEQ, $this->fec_cheq);
		if ($this->isColumnModified(RengTipPeer::NOMBRE_BAN)) $criteria->add(RengTipPeer::NOMBRE_BAN, $this->nombre_ban);
		if ($this->isColumnModified(RengTipPeer::NUMERO)) $criteria->add(RengTipPeer::NUMERO, $this->numero);
		if ($this->isColumnModified(RengTipPeer::DEVUELTO)) $criteria->add(RengTipPeer::DEVUELTO, $this->devuelto);
		if ($this->isColumnModified(RengTipPeer::ROWGUID)) $criteria->add(RengTipPeer::ROWGUID, $this->rowguid);
		if ($this->isColumnModified(RengTipPeer::OPERADOR)) $criteria->add(RengTipPeer::OPERADOR, $this->operador);
		if ($this->isColumnModified(RengTipPeer::CLAVE)) $criteria->add(RengTipPeer::CLAVE, $this->clave);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RengTipPeer::DATABASE_NAME);

		$criteria->add(RengTipPeer::COB_NUM, $this->cob_num);
		$criteria->add(RengTipPeer::RENG_NUM, $this->reng_num);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getCobNum();

		$pks[1] = $this->getRengNum();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setCobNum($keys[0]);

		$this->setRengNum($keys[1]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RengTip (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCobNum($this->cob_num);

		$copyObj->setRengNum($this->reng_num);

		$copyObj->setTipCob($this->tip_cob);

		$copyObj->setMovi($this->movi);

		$copyObj->setNumDoc($this->num_doc);

		$copyObj->setMontDoc($this->mont_doc);

		$copyObj->setMontTmp($this->mont_tmp);

		$copyObj->setMoneda($this->moneda);

		$copyObj->setBanco($this->banco);

		$copyObj->setCodCaja($this->cod_caja);

		$copyObj->setDesCaja($this->des_caja);

		$copyObj->setFecCheq($this->fec_cheq);

		$copyObj->setNombreBan($this->nombre_ban);

		$copyObj->setNumero($this->numero);

		$copyObj->setDevuelto($this->devuelto);

		$copyObj->setRowguid($this->rowguid);

		$copyObj->setOperador($this->operador);

		$copyObj->setClave($this->clave);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RengTip Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RengTipPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RengTipPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRengTip:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRengTip::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRengTip
