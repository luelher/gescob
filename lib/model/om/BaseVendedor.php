<?php

/**
 * Base class that represents a row from the 'vendedor' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 01:03:59 2009
 *
 * @package    lib.model.om
 */
abstract class BaseVendedor extends BaseObject  implements Persistent {


  const PEER = 'VendedorPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        VendedorPeer
	 */
	protected static $peer;

	/**
	 * The value for the co_ven field.
	 * @var        string
	 */
	protected $co_ven;

	/**
	 * The value for the tipo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tipo;

	/**
	 * The value for the ven_des field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $ven_des;

	/**
	 * The value for the dis_cen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $dis_cen;

	/**
	 * The value for the cedula field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $cedula;

	/**
	 * The value for the direc1 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $direc1;

	/**
	 * The value for the direc2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $direc2;

	/**
	 * The value for the telefonos field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $telefonos;

	/**
	 * The value for the fecha_reg field.
	 * @var        string
	 */
	protected $fecha_reg;

	/**
	 * The value for the condic field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $condic;

	/**
	 * The value for the comision field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comision;

	/**
	 * The value for the comen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $comen;

	/**
	 * The value for the fun_cob field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $fun_cob;

	/**
	 * The value for the fun_ven field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $fun_ven;

	/**
	 * The value for the comisionv field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comisionv;

	/**
	 * The value for the fac_ult_ve field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $fac_ult_ve;

	/**
	 * The value for the fec_ult_ve field.
	 * @var        string
	 */
	protected $fec_ult_ve;

	/**
	 * The value for the net_ult_ve field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $net_ult_ve;

	/**
	 * The value for the cli_ult_ve field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $cli_ult_ve;

	/**
	 * The value for the cta_contab field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $cta_contab;

	/**
	 * The value for the campo1 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo1;

	/**
	 * The value for the campo2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo2;

	/**
	 * The value for the campo3 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo3;

	/**
	 * The value for the campo4 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo4;

	/**
	 * The value for the campo5 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo5;

	/**
	 * The value for the campo6 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo6;

	/**
	 * The value for the campo7 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo7;

	/**
	 * The value for the campo8 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo8;

	/**
	 * The value for the co_us_in field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_in;

	/**
	 * The value for the fe_us_in field.
	 * @var        string
	 */
	protected $fe_us_in;

	/**
	 * The value for the co_us_mo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_mo;

	/**
	 * The value for the fe_us_mo field.
	 * @var        string
	 */
	protected $fe_us_mo;

	/**
	 * The value for the co_us_el field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_el;

	/**
	 * The value for the fe_us_el field.
	 * @var        string
	 */
	protected $fe_us_el;

	/**
	 * The value for the revisado field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $revisado;

	/**
	 * The value for the trasnfe field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $trasnfe;

	/**
	 * The value for the co_sucu field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_sucu;

	/**
	 * The value for the rowguid field.
	 * Note: this column has a database default value of: '(newid())'
	 * @var        string
	 */
	protected $rowguid;

	/**
	 * The value for the login field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $login;

	/**
	 * The value for the password field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the email field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the psw_m field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $psw_m;

	/**
	 * @var        array Clientes[] Collection to store aggregation of Clientes objects.
	 */
	protected $collClientess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collClientess.
	 */
	private $lastClientesCriteria = null;

	/**
	 * @var        array Factura[] Collection to store aggregation of Factura objects.
	 */
	protected $collFacturas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFacturas.
	 */
	private $lastFacturaCriteria = null;

	/**
	 * @var        array DocumCc[] Collection to store aggregation of DocumCc objects.
	 */
	protected $collDocumCcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDocumCcs.
	 */
	private $lastDocumCcCriteria = null;

	/**
	 * @var        array Cobros[] Collection to store aggregation of Cobros objects.
	 */
	protected $collCobross;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCobross.
	 */
	private $lastCobrosCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseVendedor object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->tipo = ' ';
		$this->ven_des = ' ';
		$this->dis_cen = ' ';
		$this->cedula = ' ';
		$this->direc1 = ' ';
		$this->direc2 = ' ';
		$this->telefonos = ' ';
		$this->condic = false;
		$this->comision = '0';
		$this->comen = ' ';
		$this->fun_cob = false;
		$this->fun_ven = false;
		$this->comisionv = '0';
		$this->fac_ult_ve = 0;
		$this->net_ult_ve = '0';
		$this->cli_ult_ve = ' ';
		$this->cta_contab = ' ';
		$this->campo1 = ' ';
		$this->campo2 = ' ';
		$this->campo3 = ' ';
		$this->campo4 = ' ';
		$this->campo5 = ' ';
		$this->campo6 = ' ';
		$this->campo7 = ' ';
		$this->campo8 = ' ';
		$this->co_us_in = ' ';
		$this->co_us_mo = ' ';
		$this->co_us_el = ' ';
		$this->revisado = ' ';
		$this->trasnfe = ' ';
		$this->co_sucu = ' ';
		$this->rowguid = '(newid())';
		$this->login = ' ';
		$this->password = ' ';
		$this->email = ' ';
		$this->psw_m = ' ';
	}

	/**
	 * Get the [co_ven] column value.
	 * 
	 * @return     string
	 */
	public function getCoVen()
	{
		return $this->co_ven;
	}

	/**
	 * Get the [tipo] column value.
	 * 
	 * @return     string
	 */
	public function getTipo()
	{
		return $this->tipo;
	}

	/**
	 * Get the [ven_des] column value.
	 * 
	 * @return     string
	 */
	public function getVenDes()
	{
		return $this->ven_des;
	}

	/**
	 * Get the [dis_cen] column value.
	 * 
	 * @return     string
	 */
	public function getDisCen()
	{
		return $this->dis_cen;
	}

	/**
	 * Get the [cedula] column value.
	 * 
	 * @return     string
	 */
	public function getCedula()
	{
		return $this->cedula;
	}

	/**
	 * Get the [direc1] column value.
	 * 
	 * @return     string
	 */
	public function getDirec1()
	{
		return $this->direc1;
	}

	/**
	 * Get the [direc2] column value.
	 * 
	 * @return     string
	 */
	public function getDirec2()
	{
		return $this->direc2;
	}

	/**
	 * Get the [telefonos] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonos()
	{
		return $this->telefonos;
	}

	/**
	 * Get the [fecha_reg] column value.
	 * 
	 * @return     string
	 */
	public function getFechaReg()
	{
		return $this->fecha_reg;
	}

	/**
	 * Get the [condic] column value.
	 * 
	 * @return     boolean
	 */
	public function getCondic()
	{
		return $this->condic;
	}

	/**
	 * Get the [comision] column value.
	 * 
	 * @return     string
	 */
	public function getComision()
	{
		return $this->comision;
	}

	/**
	 * Get the [comen] column value.
	 * 
	 * @return     string
	 */
	public function getComen()
	{
		return $this->comen;
	}

	/**
	 * Get the [fun_cob] column value.
	 * 
	 * @return     boolean
	 */
	public function getFunCob()
	{
		return $this->fun_cob;
	}

	/**
	 * Get the [fun_ven] column value.
	 * 
	 * @return     boolean
	 */
	public function getFunVen()
	{
		return $this->fun_ven;
	}

	/**
	 * Get the [comisionv] column value.
	 * 
	 * @return     string
	 */
	public function getComisionv()
	{
		return $this->comisionv;
	}

	/**
	 * Get the [fac_ult_ve] column value.
	 * 
	 * @return     int
	 */
	public function getFacUltVe()
	{
		return $this->fac_ult_ve;
	}

	/**
	 * Get the [fec_ult_ve] column value.
	 * 
	 * @return     string
	 */
	public function getFecUltVe()
	{
		return $this->fec_ult_ve;
	}

	/**
	 * Get the [net_ult_ve] column value.
	 * 
	 * @return     string
	 */
	public function getNetUltVe()
	{
		return $this->net_ult_ve;
	}

	/**
	 * Get the [cli_ult_ve] column value.
	 * 
	 * @return     string
	 */
	public function getCliUltVe()
	{
		return $this->cli_ult_ve;
	}

	/**
	 * Get the [cta_contab] column value.
	 * 
	 * @return     string
	 */
	public function getCtaContab()
	{
		return $this->cta_contab;
	}

	/**
	 * Get the [campo1] column value.
	 * 
	 * @return     string
	 */
	public function getCampo1()
	{
		return $this->campo1;
	}

	/**
	 * Get the [campo2] column value.
	 * 
	 * @return     string
	 */
	public function getCampo2()
	{
		return $this->campo2;
	}

	/**
	 * Get the [campo3] column value.
	 * 
	 * @return     string
	 */
	public function getCampo3()
	{
		return $this->campo3;
	}

	/**
	 * Get the [campo4] column value.
	 * 
	 * @return     string
	 */
	public function getCampo4()
	{
		return $this->campo4;
	}

	/**
	 * Get the [campo5] column value.
	 * 
	 * @return     string
	 */
	public function getCampo5()
	{
		return $this->campo5;
	}

	/**
	 * Get the [campo6] column value.
	 * 
	 * @return     string
	 */
	public function getCampo6()
	{
		return $this->campo6;
	}

	/**
	 * Get the [campo7] column value.
	 * 
	 * @return     string
	 */
	public function getCampo7()
	{
		return $this->campo7;
	}

	/**
	 * Get the [campo8] column value.
	 * 
	 * @return     string
	 */
	public function getCampo8()
	{
		return $this->campo8;
	}

	/**
	 * Get the [co_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsIn()
	{
		return $this->co_us_in;
	}

	/**
	 * Get the [fe_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsIn()
	{
		return $this->fe_us_in;
	}

	/**
	 * Get the [co_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsMo()
	{
		return $this->co_us_mo;
	}

	/**
	 * Get the [fe_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsMo()
	{
		return $this->fe_us_mo;
	}

	/**
	 * Get the [co_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsEl()
	{
		return $this->co_us_el;
	}

	/**
	 * Get the [fe_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsEl()
	{
		return $this->fe_us_el;
	}

	/**
	 * Get the [revisado] column value.
	 * 
	 * @return     string
	 */
	public function getRevisado()
	{
		return $this->revisado;
	}

	/**
	 * Get the [trasnfe] column value.
	 * 
	 * @return     string
	 */
	public function getTrasnfe()
	{
		return $this->trasnfe;
	}

	/**
	 * Get the [co_sucu] column value.
	 * 
	 * @return     string
	 */
	public function getCoSucu()
	{
		return $this->co_sucu;
	}

	/**
	 * Get the [rowguid] column value.
	 * 
	 * @return     string
	 */
	public function getRowguid()
	{
		return $this->rowguid;
	}

	/**
	 * Get the [login] column value.
	 * 
	 * @return     string
	 */
	public function getLogin()
	{
		return $this->login;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [psw_m] column value.
	 * 
	 * @return     string
	 */
	public function getPswM()
	{
		return $this->psw_m;
	}

	/**
	 * Set the value of [co_ven] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCoVen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_ven !== $v) {
			$this->co_ven = $v;
			$this->modifiedColumns[] = VendedorPeer::CO_VEN;
		}

		return $this;
	} // setCoVen()

	/**
	 * Set the value of [tipo] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setTipo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo !== $v || $v === ' ') {
			$this->tipo = $v;
			$this->modifiedColumns[] = VendedorPeer::TIPO;
		}

		return $this;
	} // setTipo()

	/**
	 * Set the value of [ven_des] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setVenDes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ven_des !== $v || $v === ' ') {
			$this->ven_des = $v;
			$this->modifiedColumns[] = VendedorPeer::VEN_DES;
		}

		return $this;
	} // setVenDes()

	/**
	 * Set the value of [dis_cen] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setDisCen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dis_cen !== $v || $v === ' ') {
			$this->dis_cen = $v;
			$this->modifiedColumns[] = VendedorPeer::DIS_CEN;
		}

		return $this;
	} // setDisCen()

	/**
	 * Set the value of [cedula] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCedula($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cedula !== $v || $v === ' ') {
			$this->cedula = $v;
			$this->modifiedColumns[] = VendedorPeer::CEDULA;
		}

		return $this;
	} // setCedula()

	/**
	 * Set the value of [direc1] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setDirec1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direc1 !== $v || $v === ' ') {
			$this->direc1 = $v;
			$this->modifiedColumns[] = VendedorPeer::DIREC1;
		}

		return $this;
	} // setDirec1()

	/**
	 * Set the value of [direc2] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setDirec2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direc2 !== $v || $v === ' ') {
			$this->direc2 = $v;
			$this->modifiedColumns[] = VendedorPeer::DIREC2;
		}

		return $this;
	} // setDirec2()

	/**
	 * Set the value of [telefonos] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setTelefonos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefonos !== $v || $v === ' ') {
			$this->telefonos = $v;
			$this->modifiedColumns[] = VendedorPeer::TELEFONOS;
		}

		return $this;
	} // setTelefonos()

	/**
	 * Set the value of [fecha_reg] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setFechaReg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fecha_reg !== $v) {
			$this->fecha_reg = $v;
			$this->modifiedColumns[] = VendedorPeer::FECHA_REG;
		}

		return $this;
	} // setFechaReg()

	/**
	 * Set the value of [condic] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCondic($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->condic !== $v || $v === false) {
			$this->condic = $v;
			$this->modifiedColumns[] = VendedorPeer::CONDIC;
		}

		return $this;
	} // setCondic()

	/**
	 * Set the value of [comision] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setComision($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comision !== $v || $v === '0') {
			$this->comision = $v;
			$this->modifiedColumns[] = VendedorPeer::COMISION;
		}

		return $this;
	} // setComision()

	/**
	 * Set the value of [comen] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setComen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comen !== $v || $v === ' ') {
			$this->comen = $v;
			$this->modifiedColumns[] = VendedorPeer::COMEN;
		}

		return $this;
	} // setComen()

	/**
	 * Set the value of [fun_cob] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setFunCob($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->fun_cob !== $v || $v === false) {
			$this->fun_cob = $v;
			$this->modifiedColumns[] = VendedorPeer::FUN_COB;
		}

		return $this;
	} // setFunCob()

	/**
	 * Set the value of [fun_ven] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setFunVen($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->fun_ven !== $v || $v === false) {
			$this->fun_ven = $v;
			$this->modifiedColumns[] = VendedorPeer::FUN_VEN;
		}

		return $this;
	} // setFunVen()

	/**
	 * Set the value of [comisionv] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setComisionv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comisionv !== $v || $v === '0') {
			$this->comisionv = $v;
			$this->modifiedColumns[] = VendedorPeer::COMISIONV;
		}

		return $this;
	} // setComisionv()

	/**
	 * Set the value of [fac_ult_ve] column.
	 * 
	 * @param      int $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setFacUltVe($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fac_ult_ve !== $v || $v === 0) {
			$this->fac_ult_ve = $v;
			$this->modifiedColumns[] = VendedorPeer::FAC_ULT_VE;
		}

		return $this;
	} // setFacUltVe()

	/**
	 * Set the value of [fec_ult_ve] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setFecUltVe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_ult_ve !== $v) {
			$this->fec_ult_ve = $v;
			$this->modifiedColumns[] = VendedorPeer::FEC_ULT_VE;
		}

		return $this;
	} // setFecUltVe()

	/**
	 * Set the value of [net_ult_ve] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setNetUltVe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->net_ult_ve !== $v || $v === '0') {
			$this->net_ult_ve = $v;
			$this->modifiedColumns[] = VendedorPeer::NET_ULT_VE;
		}

		return $this;
	} // setNetUltVe()

	/**
	 * Set the value of [cli_ult_ve] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCliUltVe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cli_ult_ve !== $v || $v === ' ') {
			$this->cli_ult_ve = $v;
			$this->modifiedColumns[] = VendedorPeer::CLI_ULT_VE;
		}

		return $this;
	} // setCliUltVe()

	/**
	 * Set the value of [cta_contab] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCtaContab($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cta_contab !== $v || $v === ' ') {
			$this->cta_contab = $v;
			$this->modifiedColumns[] = VendedorPeer::CTA_CONTAB;
		}

		return $this;
	} // setCtaContab()

	/**
	 * Set the value of [campo1] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCampo1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo1 !== $v || $v === ' ') {
			$this->campo1 = $v;
			$this->modifiedColumns[] = VendedorPeer::CAMPO1;
		}

		return $this;
	} // setCampo1()

	/**
	 * Set the value of [campo2] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCampo2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo2 !== $v || $v === ' ') {
			$this->campo2 = $v;
			$this->modifiedColumns[] = VendedorPeer::CAMPO2;
		}

		return $this;
	} // setCampo2()

	/**
	 * Set the value of [campo3] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCampo3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo3 !== $v || $v === ' ') {
			$this->campo3 = $v;
			$this->modifiedColumns[] = VendedorPeer::CAMPO3;
		}

		return $this;
	} // setCampo3()

	/**
	 * Set the value of [campo4] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCampo4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo4 !== $v || $v === ' ') {
			$this->campo4 = $v;
			$this->modifiedColumns[] = VendedorPeer::CAMPO4;
		}

		return $this;
	} // setCampo4()

	/**
	 * Set the value of [campo5] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCampo5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo5 !== $v || $v === ' ') {
			$this->campo5 = $v;
			$this->modifiedColumns[] = VendedorPeer::CAMPO5;
		}

		return $this;
	} // setCampo5()

	/**
	 * Set the value of [campo6] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCampo6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo6 !== $v || $v === ' ') {
			$this->campo6 = $v;
			$this->modifiedColumns[] = VendedorPeer::CAMPO6;
		}

		return $this;
	} // setCampo6()

	/**
	 * Set the value of [campo7] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCampo7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo7 !== $v || $v === ' ') {
			$this->campo7 = $v;
			$this->modifiedColumns[] = VendedorPeer::CAMPO7;
		}

		return $this;
	} // setCampo7()

	/**
	 * Set the value of [campo8] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCampo8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo8 !== $v || $v === ' ') {
			$this->campo8 = $v;
			$this->modifiedColumns[] = VendedorPeer::CAMPO8;
		}

		return $this;
	} // setCampo8()

	/**
	 * Set the value of [co_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCoUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_in !== $v || $v === ' ') {
			$this->co_us_in = $v;
			$this->modifiedColumns[] = VendedorPeer::CO_US_IN;
		}

		return $this;
	} // setCoUsIn()

	/**
	 * Set the value of [fe_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setFeUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_in !== $v) {
			$this->fe_us_in = $v;
			$this->modifiedColumns[] = VendedorPeer::FE_US_IN;
		}

		return $this;
	} // setFeUsIn()

	/**
	 * Set the value of [co_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCoUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_mo !== $v || $v === ' ') {
			$this->co_us_mo = $v;
			$this->modifiedColumns[] = VendedorPeer::CO_US_MO;
		}

		return $this;
	} // setCoUsMo()

	/**
	 * Set the value of [fe_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setFeUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_mo !== $v) {
			$this->fe_us_mo = $v;
			$this->modifiedColumns[] = VendedorPeer::FE_US_MO;
		}

		return $this;
	} // setFeUsMo()

	/**
	 * Set the value of [co_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCoUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_el !== $v || $v === ' ') {
			$this->co_us_el = $v;
			$this->modifiedColumns[] = VendedorPeer::CO_US_EL;
		}

		return $this;
	} // setCoUsEl()

	/**
	 * Set the value of [fe_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setFeUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_el !== $v) {
			$this->fe_us_el = $v;
			$this->modifiedColumns[] = VendedorPeer::FE_US_EL;
		}

		return $this;
	} // setFeUsEl()

	/**
	 * Set the value of [revisado] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setRevisado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->revisado !== $v || $v === ' ') {
			$this->revisado = $v;
			$this->modifiedColumns[] = VendedorPeer::REVISADO;
		}

		return $this;
	} // setRevisado()

	/**
	 * Set the value of [trasnfe] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setTrasnfe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->trasnfe !== $v || $v === ' ') {
			$this->trasnfe = $v;
			$this->modifiedColumns[] = VendedorPeer::TRASNFE;
		}

		return $this;
	} // setTrasnfe()

	/**
	 * Set the value of [co_sucu] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setCoSucu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_sucu !== $v || $v === ' ') {
			$this->co_sucu = $v;
			$this->modifiedColumns[] = VendedorPeer::CO_SUCU;
		}

		return $this;
	} // setCoSucu()

	/**
	 * Set the value of [rowguid] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setRowguid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowguid !== $v || $v === '(newid())') {
			$this->rowguid = $v;
			$this->modifiedColumns[] = VendedorPeer::ROWGUID;
		}

		return $this;
	} // setRowguid()

	/**
	 * Set the value of [login] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setLogin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->login !== $v || $v === ' ') {
			$this->login = $v;
			$this->modifiedColumns[] = VendedorPeer::LOGIN;
		}

		return $this;
	} // setLogin()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v || $v === ' ') {
			$this->password = $v;
			$this->modifiedColumns[] = VendedorPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v || $v === ' ') {
			$this->email = $v;
			$this->modifiedColumns[] = VendedorPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [psw_m] column.
	 * 
	 * @param      string $v new value
	 * @return     Vendedor The current object (for fluent API support)
	 */
	public function setPswM($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->psw_m !== $v || $v === ' ') {
			$this->psw_m = $v;
			$this->modifiedColumns[] = VendedorPeer::PSW_M;
		}

		return $this;
	} // setPswM()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(VendedorPeer::TIPO,VendedorPeer::VEN_DES,VendedorPeer::DIS_CEN,VendedorPeer::CEDULA,VendedorPeer::DIREC1,VendedorPeer::DIREC2,VendedorPeer::TELEFONOS,VendedorPeer::CONDIC,VendedorPeer::COMISION,VendedorPeer::COMEN,VendedorPeer::FUN_COB,VendedorPeer::FUN_VEN,VendedorPeer::COMISIONV,VendedorPeer::FAC_ULT_VE,VendedorPeer::NET_ULT_VE,VendedorPeer::CLI_ULT_VE,VendedorPeer::CTA_CONTAB,VendedorPeer::CAMPO1,VendedorPeer::CAMPO2,VendedorPeer::CAMPO3,VendedorPeer::CAMPO4,VendedorPeer::CAMPO5,VendedorPeer::CAMPO6,VendedorPeer::CAMPO7,VendedorPeer::CAMPO8,VendedorPeer::CO_US_IN,VendedorPeer::CO_US_MO,VendedorPeer::CO_US_EL,VendedorPeer::REVISADO,VendedorPeer::TRASNFE,VendedorPeer::CO_SUCU,VendedorPeer::ROWGUID,VendedorPeer::LOGIN,VendedorPeer::PASSWORD,VendedorPeer::EMAIL,VendedorPeer::PSW_M))) {
				return false;
			}

			if ($this->tipo !== ' ') {
				return false;
			}

			if ($this->ven_des !== ' ') {
				return false;
			}

			if ($this->dis_cen !== ' ') {
				return false;
			}

			if ($this->cedula !== ' ') {
				return false;
			}

			if ($this->direc1 !== ' ') {
				return false;
			}

			if ($this->direc2 !== ' ') {
				return false;
			}

			if ($this->telefonos !== ' ') {
				return false;
			}

			if ($this->condic !== false) {
				return false;
			}

			if ($this->comision !== '0') {
				return false;
			}

			if ($this->comen !== ' ') {
				return false;
			}

			if ($this->fun_cob !== false) {
				return false;
			}

			if ($this->fun_ven !== false) {
				return false;
			}

			if ($this->comisionv !== '0') {
				return false;
			}

			if ($this->fac_ult_ve !== 0) {
				return false;
			}

			if ($this->net_ult_ve !== '0') {
				return false;
			}

			if ($this->cli_ult_ve !== ' ') {
				return false;
			}

			if ($this->cta_contab !== ' ') {
				return false;
			}

			if ($this->campo1 !== ' ') {
				return false;
			}

			if ($this->campo2 !== ' ') {
				return false;
			}

			if ($this->campo3 !== ' ') {
				return false;
			}

			if ($this->campo4 !== ' ') {
				return false;
			}

			if ($this->campo5 !== ' ') {
				return false;
			}

			if ($this->campo6 !== ' ') {
				return false;
			}

			if ($this->campo7 !== ' ') {
				return false;
			}

			if ($this->campo8 !== ' ') {
				return false;
			}

			if ($this->co_us_in !== ' ') {
				return false;
			}

			if ($this->co_us_mo !== ' ') {
				return false;
			}

			if ($this->co_us_el !== ' ') {
				return false;
			}

			if ($this->revisado !== ' ') {
				return false;
			}

			if ($this->trasnfe !== ' ') {
				return false;
			}

			if ($this->co_sucu !== ' ') {
				return false;
			}

			if ($this->rowguid !== '(newid())') {
				return false;
			}

			if ($this->login !== ' ') {
				return false;
			}

			if ($this->password !== ' ') {
				return false;
			}

			if ($this->email !== ' ') {
				return false;
			}

			if ($this->psw_m !== ' ') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_ven = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->tipo = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->ven_des = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->dis_cen = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->cedula = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->direc1 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->direc2 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->telefonos = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->fecha_reg = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->condic = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->comision = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->comen = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->fun_cob = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
			$this->fun_ven = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->comisionv = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->fac_ult_ve = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->fec_ult_ve = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->net_ult_ve = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->cli_ult_ve = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->cta_contab = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->campo1 = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->campo2 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->campo3 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->campo4 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->campo5 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->campo6 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->campo7 = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->campo8 = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->co_us_in = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->fe_us_in = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->co_us_mo = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->fe_us_mo = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->co_us_el = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->fe_us_el = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->revisado = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->trasnfe = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->co_sucu = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->rowguid = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->login = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->password = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->email = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->psw_m = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 42; // 42 = VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Vendedor object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VendedorPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = VendedorPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collClientess = null;
			$this->lastClientesCriteria = null;

			$this->collFacturas = null;
			$this->lastFacturaCriteria = null;

			$this->collDocumCcs = null;
			$this->lastDocumCcCriteria = null;

			$this->collCobross = null;
			$this->lastCobrosCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVendedor:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VendedorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			VendedorPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseVendedor:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVendedor:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VendedorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseVendedor:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			VendedorPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = VendedorPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += VendedorPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collClientess !== null) {
				foreach ($this->collClientess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFacturas !== null) {
				foreach ($this->collFacturas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDocumCcs !== null) {
				foreach ($this->collDocumCcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCobross !== null) {
				foreach ($this->collCobross as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = VendedorPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collClientess !== null) {
					foreach ($this->collClientess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFacturas !== null) {
					foreach ($this->collFacturas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDocumCcs !== null) {
					foreach ($this->collDocumCcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCobross !== null) {
					foreach ($this->collCobross as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = VendedorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoVen();
				break;
			case 1:
				return $this->getTipo();
				break;
			case 2:
				return $this->getVenDes();
				break;
			case 3:
				return $this->getDisCen();
				break;
			case 4:
				return $this->getCedula();
				break;
			case 5:
				return $this->getDirec1();
				break;
			case 6:
				return $this->getDirec2();
				break;
			case 7:
				return $this->getTelefonos();
				break;
			case 8:
				return $this->getFechaReg();
				break;
			case 9:
				return $this->getCondic();
				break;
			case 10:
				return $this->getComision();
				break;
			case 11:
				return $this->getComen();
				break;
			case 12:
				return $this->getFunCob();
				break;
			case 13:
				return $this->getFunVen();
				break;
			case 14:
				return $this->getComisionv();
				break;
			case 15:
				return $this->getFacUltVe();
				break;
			case 16:
				return $this->getFecUltVe();
				break;
			case 17:
				return $this->getNetUltVe();
				break;
			case 18:
				return $this->getCliUltVe();
				break;
			case 19:
				return $this->getCtaContab();
				break;
			case 20:
				return $this->getCampo1();
				break;
			case 21:
				return $this->getCampo2();
				break;
			case 22:
				return $this->getCampo3();
				break;
			case 23:
				return $this->getCampo4();
				break;
			case 24:
				return $this->getCampo5();
				break;
			case 25:
				return $this->getCampo6();
				break;
			case 26:
				return $this->getCampo7();
				break;
			case 27:
				return $this->getCampo8();
				break;
			case 28:
				return $this->getCoUsIn();
				break;
			case 29:
				return $this->getFeUsIn();
				break;
			case 30:
				return $this->getCoUsMo();
				break;
			case 31:
				return $this->getFeUsMo();
				break;
			case 32:
				return $this->getCoUsEl();
				break;
			case 33:
				return $this->getFeUsEl();
				break;
			case 34:
				return $this->getRevisado();
				break;
			case 35:
				return $this->getTrasnfe();
				break;
			case 36:
				return $this->getCoSucu();
				break;
			case 37:
				return $this->getRowguid();
				break;
			case 38:
				return $this->getLogin();
				break;
			case 39:
				return $this->getPassword();
				break;
			case 40:
				return $this->getEmail();
				break;
			case 41:
				return $this->getPswM();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = VendedorPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoVen(),
			$keys[1] => $this->getTipo(),
			$keys[2] => $this->getVenDes(),
			$keys[3] => $this->getDisCen(),
			$keys[4] => $this->getCedula(),
			$keys[5] => $this->getDirec1(),
			$keys[6] => $this->getDirec2(),
			$keys[7] => $this->getTelefonos(),
			$keys[8] => $this->getFechaReg(),
			$keys[9] => $this->getCondic(),
			$keys[10] => $this->getComision(),
			$keys[11] => $this->getComen(),
			$keys[12] => $this->getFunCob(),
			$keys[13] => $this->getFunVen(),
			$keys[14] => $this->getComisionv(),
			$keys[15] => $this->getFacUltVe(),
			$keys[16] => $this->getFecUltVe(),
			$keys[17] => $this->getNetUltVe(),
			$keys[18] => $this->getCliUltVe(),
			$keys[19] => $this->getCtaContab(),
			$keys[20] => $this->getCampo1(),
			$keys[21] => $this->getCampo2(),
			$keys[22] => $this->getCampo3(),
			$keys[23] => $this->getCampo4(),
			$keys[24] => $this->getCampo5(),
			$keys[25] => $this->getCampo6(),
			$keys[26] => $this->getCampo7(),
			$keys[27] => $this->getCampo8(),
			$keys[28] => $this->getCoUsIn(),
			$keys[29] => $this->getFeUsIn(),
			$keys[30] => $this->getCoUsMo(),
			$keys[31] => $this->getFeUsMo(),
			$keys[32] => $this->getCoUsEl(),
			$keys[33] => $this->getFeUsEl(),
			$keys[34] => $this->getRevisado(),
			$keys[35] => $this->getTrasnfe(),
			$keys[36] => $this->getCoSucu(),
			$keys[37] => $this->getRowguid(),
			$keys[38] => $this->getLogin(),
			$keys[39] => $this->getPassword(),
			$keys[40] => $this->getEmail(),
			$keys[41] => $this->getPswM(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = VendedorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoVen($value);
				break;
			case 1:
				$this->setTipo($value);
				break;
			case 2:
				$this->setVenDes($value);
				break;
			case 3:
				$this->setDisCen($value);
				break;
			case 4:
				$this->setCedula($value);
				break;
			case 5:
				$this->setDirec1($value);
				break;
			case 6:
				$this->setDirec2($value);
				break;
			case 7:
				$this->setTelefonos($value);
				break;
			case 8:
				$this->setFechaReg($value);
				break;
			case 9:
				$this->setCondic($value);
				break;
			case 10:
				$this->setComision($value);
				break;
			case 11:
				$this->setComen($value);
				break;
			case 12:
				$this->setFunCob($value);
				break;
			case 13:
				$this->setFunVen($value);
				break;
			case 14:
				$this->setComisionv($value);
				break;
			case 15:
				$this->setFacUltVe($value);
				break;
			case 16:
				$this->setFecUltVe($value);
				break;
			case 17:
				$this->setNetUltVe($value);
				break;
			case 18:
				$this->setCliUltVe($value);
				break;
			case 19:
				$this->setCtaContab($value);
				break;
			case 20:
				$this->setCampo1($value);
				break;
			case 21:
				$this->setCampo2($value);
				break;
			case 22:
				$this->setCampo3($value);
				break;
			case 23:
				$this->setCampo4($value);
				break;
			case 24:
				$this->setCampo5($value);
				break;
			case 25:
				$this->setCampo6($value);
				break;
			case 26:
				$this->setCampo7($value);
				break;
			case 27:
				$this->setCampo8($value);
				break;
			case 28:
				$this->setCoUsIn($value);
				break;
			case 29:
				$this->setFeUsIn($value);
				break;
			case 30:
				$this->setCoUsMo($value);
				break;
			case 31:
				$this->setFeUsMo($value);
				break;
			case 32:
				$this->setCoUsEl($value);
				break;
			case 33:
				$this->setFeUsEl($value);
				break;
			case 34:
				$this->setRevisado($value);
				break;
			case 35:
				$this->setTrasnfe($value);
				break;
			case 36:
				$this->setCoSucu($value);
				break;
			case 37:
				$this->setRowguid($value);
				break;
			case 38:
				$this->setLogin($value);
				break;
			case 39:
				$this->setPassword($value);
				break;
			case 40:
				$this->setEmail($value);
				break;
			case 41:
				$this->setPswM($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = VendedorPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoVen($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTipo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setVenDes($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDisCen($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCedula($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDirec1($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDirec2($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setTelefonos($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setFechaReg($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCondic($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setComision($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setComen($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setFunCob($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setFunVen($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setComisionv($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFacUltVe($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFecUltVe($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setNetUltVe($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCliUltVe($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCtaContab($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCampo1($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCampo2($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCampo3($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCampo4($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setCampo5($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setCampo6($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setCampo7($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCampo8($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCoUsIn($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setFeUsIn($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setCoUsMo($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setFeUsMo($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCoUsEl($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setFeUsEl($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setRevisado($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setTrasnfe($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setCoSucu($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setRowguid($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setLogin($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setPassword($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setEmail($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setPswM($arr[$keys[41]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(VendedorPeer::DATABASE_NAME);

		if ($this->isColumnModified(VendedorPeer::CO_VEN)) $criteria->add(VendedorPeer::CO_VEN, $this->co_ven);
		if ($this->isColumnModified(VendedorPeer::TIPO)) $criteria->add(VendedorPeer::TIPO, $this->tipo);
		if ($this->isColumnModified(VendedorPeer::VEN_DES)) $criteria->add(VendedorPeer::VEN_DES, $this->ven_des);
		if ($this->isColumnModified(VendedorPeer::DIS_CEN)) $criteria->add(VendedorPeer::DIS_CEN, $this->dis_cen);
		if ($this->isColumnModified(VendedorPeer::CEDULA)) $criteria->add(VendedorPeer::CEDULA, $this->cedula);
		if ($this->isColumnModified(VendedorPeer::DIREC1)) $criteria->add(VendedorPeer::DIREC1, $this->direc1);
		if ($this->isColumnModified(VendedorPeer::DIREC2)) $criteria->add(VendedorPeer::DIREC2, $this->direc2);
		if ($this->isColumnModified(VendedorPeer::TELEFONOS)) $criteria->add(VendedorPeer::TELEFONOS, $this->telefonos);
		if ($this->isColumnModified(VendedorPeer::FECHA_REG)) $criteria->add(VendedorPeer::FECHA_REG, $this->fecha_reg);
		if ($this->isColumnModified(VendedorPeer::CONDIC)) $criteria->add(VendedorPeer::CONDIC, $this->condic);
		if ($this->isColumnModified(VendedorPeer::COMISION)) $criteria->add(VendedorPeer::COMISION, $this->comision);
		if ($this->isColumnModified(VendedorPeer::COMEN)) $criteria->add(VendedorPeer::COMEN, $this->comen);
		if ($this->isColumnModified(VendedorPeer::FUN_COB)) $criteria->add(VendedorPeer::FUN_COB, $this->fun_cob);
		if ($this->isColumnModified(VendedorPeer::FUN_VEN)) $criteria->add(VendedorPeer::FUN_VEN, $this->fun_ven);
		if ($this->isColumnModified(VendedorPeer::COMISIONV)) $criteria->add(VendedorPeer::COMISIONV, $this->comisionv);
		if ($this->isColumnModified(VendedorPeer::FAC_ULT_VE)) $criteria->add(VendedorPeer::FAC_ULT_VE, $this->fac_ult_ve);
		if ($this->isColumnModified(VendedorPeer::FEC_ULT_VE)) $criteria->add(VendedorPeer::FEC_ULT_VE, $this->fec_ult_ve);
		if ($this->isColumnModified(VendedorPeer::NET_ULT_VE)) $criteria->add(VendedorPeer::NET_ULT_VE, $this->net_ult_ve);
		if ($this->isColumnModified(VendedorPeer::CLI_ULT_VE)) $criteria->add(VendedorPeer::CLI_ULT_VE, $this->cli_ult_ve);
		if ($this->isColumnModified(VendedorPeer::CTA_CONTAB)) $criteria->add(VendedorPeer::CTA_CONTAB, $this->cta_contab);
		if ($this->isColumnModified(VendedorPeer::CAMPO1)) $criteria->add(VendedorPeer::CAMPO1, $this->campo1);
		if ($this->isColumnModified(VendedorPeer::CAMPO2)) $criteria->add(VendedorPeer::CAMPO2, $this->campo2);
		if ($this->isColumnModified(VendedorPeer::CAMPO3)) $criteria->add(VendedorPeer::CAMPO3, $this->campo3);
		if ($this->isColumnModified(VendedorPeer::CAMPO4)) $criteria->add(VendedorPeer::CAMPO4, $this->campo4);
		if ($this->isColumnModified(VendedorPeer::CAMPO5)) $criteria->add(VendedorPeer::CAMPO5, $this->campo5);
		if ($this->isColumnModified(VendedorPeer::CAMPO6)) $criteria->add(VendedorPeer::CAMPO6, $this->campo6);
		if ($this->isColumnModified(VendedorPeer::CAMPO7)) $criteria->add(VendedorPeer::CAMPO7, $this->campo7);
		if ($this->isColumnModified(VendedorPeer::CAMPO8)) $criteria->add(VendedorPeer::CAMPO8, $this->campo8);
		if ($this->isColumnModified(VendedorPeer::CO_US_IN)) $criteria->add(VendedorPeer::CO_US_IN, $this->co_us_in);
		if ($this->isColumnModified(VendedorPeer::FE_US_IN)) $criteria->add(VendedorPeer::FE_US_IN, $this->fe_us_in);
		if ($this->isColumnModified(VendedorPeer::CO_US_MO)) $criteria->add(VendedorPeer::CO_US_MO, $this->co_us_mo);
		if ($this->isColumnModified(VendedorPeer::FE_US_MO)) $criteria->add(VendedorPeer::FE_US_MO, $this->fe_us_mo);
		if ($this->isColumnModified(VendedorPeer::CO_US_EL)) $criteria->add(VendedorPeer::CO_US_EL, $this->co_us_el);
		if ($this->isColumnModified(VendedorPeer::FE_US_EL)) $criteria->add(VendedorPeer::FE_US_EL, $this->fe_us_el);
		if ($this->isColumnModified(VendedorPeer::REVISADO)) $criteria->add(VendedorPeer::REVISADO, $this->revisado);
		if ($this->isColumnModified(VendedorPeer::TRASNFE)) $criteria->add(VendedorPeer::TRASNFE, $this->trasnfe);
		if ($this->isColumnModified(VendedorPeer::CO_SUCU)) $criteria->add(VendedorPeer::CO_SUCU, $this->co_sucu);
		if ($this->isColumnModified(VendedorPeer::ROWGUID)) $criteria->add(VendedorPeer::ROWGUID, $this->rowguid);
		if ($this->isColumnModified(VendedorPeer::LOGIN)) $criteria->add(VendedorPeer::LOGIN, $this->login);
		if ($this->isColumnModified(VendedorPeer::PASSWORD)) $criteria->add(VendedorPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(VendedorPeer::EMAIL)) $criteria->add(VendedorPeer::EMAIL, $this->email);
		if ($this->isColumnModified(VendedorPeer::PSW_M)) $criteria->add(VendedorPeer::PSW_M, $this->psw_m);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(VendedorPeer::DATABASE_NAME);

		$criteria->add(VendedorPeer::CO_VEN, $this->co_ven);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCoVen();
	}

	/**
	 * Generic method to set the primary key (co_ven column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCoVen($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Vendedor (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCoVen($this->co_ven);

		$copyObj->setTipo($this->tipo);

		$copyObj->setVenDes($this->ven_des);

		$copyObj->setDisCen($this->dis_cen);

		$copyObj->setCedula($this->cedula);

		$copyObj->setDirec1($this->direc1);

		$copyObj->setDirec2($this->direc2);

		$copyObj->setTelefonos($this->telefonos);

		$copyObj->setFechaReg($this->fecha_reg);

		$copyObj->setCondic($this->condic);

		$copyObj->setComision($this->comision);

		$copyObj->setComen($this->comen);

		$copyObj->setFunCob($this->fun_cob);

		$copyObj->setFunVen($this->fun_ven);

		$copyObj->setComisionv($this->comisionv);

		$copyObj->setFacUltVe($this->fac_ult_ve);

		$copyObj->setFecUltVe($this->fec_ult_ve);

		$copyObj->setNetUltVe($this->net_ult_ve);

		$copyObj->setCliUltVe($this->cli_ult_ve);

		$copyObj->setCtaContab($this->cta_contab);

		$copyObj->setCampo1($this->campo1);

		$copyObj->setCampo2($this->campo2);

		$copyObj->setCampo3($this->campo3);

		$copyObj->setCampo4($this->campo4);

		$copyObj->setCampo5($this->campo5);

		$copyObj->setCampo6($this->campo6);

		$copyObj->setCampo7($this->campo7);

		$copyObj->setCampo8($this->campo8);

		$copyObj->setCoUsIn($this->co_us_in);

		$copyObj->setFeUsIn($this->fe_us_in);

		$copyObj->setCoUsMo($this->co_us_mo);

		$copyObj->setFeUsMo($this->fe_us_mo);

		$copyObj->setCoUsEl($this->co_us_el);

		$copyObj->setFeUsEl($this->fe_us_el);

		$copyObj->setRevisado($this->revisado);

		$copyObj->setTrasnfe($this->trasnfe);

		$copyObj->setCoSucu($this->co_sucu);

		$copyObj->setRowguid($this->rowguid);

		$copyObj->setLogin($this->login);

		$copyObj->setPassword($this->password);

		$copyObj->setEmail($this->email);

		$copyObj->setPswM($this->psw_m);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getClientess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addClientes($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFacturas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFactura($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDocumCcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDocumCc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCobross() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCobros($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Vendedor Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     VendedorPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new VendedorPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collClientess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addClientess()
	 */
	public function clearClientess()
	{
		$this->collClientess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collClientess collection (array).
	 *
	 * By default this just sets the collClientess collection to an empty array (like clearcollClientess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initClientess()
	{
		$this->collClientess = array();
	}

	/**
	 * Gets an array of Clientes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Vendedor has previously been saved, it will retrieve
	 * related Clientess from storage. If this Vendedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Clientes[]
	 * @throws     PropelException
	 */
	public function getClientess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientess === null) {
			if ($this->isNew()) {
			   $this->collClientess = array();
			} else {

				$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

				ClientesPeer::addSelectColumns($criteria);
				$this->collClientess = ClientesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

				ClientesPeer::addSelectColumns($criteria);
				if (!isset($this->lastClientesCriteria) || !$this->lastClientesCriteria->equals($criteria)) {
					$this->collClientess = ClientesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastClientesCriteria = $criteria;
		return $this->collClientess;
	}

	/**
	 * Returns the number of related Clientes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Clientes objects.
	 * @throws     PropelException
	 */
	public function countClientess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collClientess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

				$count = ClientesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

				if (!isset($this->lastClientesCriteria) || !$this->lastClientesCriteria->equals($criteria)) {
					$count = ClientesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collClientess);
				}
			} else {
				$count = count($this->collClientess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Clientes object to this object
	 * through the Clientes foreign key attribute.
	 *
	 * @param      Clientes $l Clientes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addClientes(Clientes $l)
	{
		if ($this->collClientess === null) {
			$this->initClientess();
		}
		if (!in_array($l, $this->collClientess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collClientess, $l);
			$l->setVendedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Clientess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getClientessJoinTipoCli($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientess === null) {
			if ($this->isNew()) {
				$this->collClientess = array();
			} else {

				$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

				$this->collClientess = ClientesPeer::doSelectJoinTipoCli($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastClientesCriteria) || !$this->lastClientesCriteria->equals($criteria)) {
				$this->collClientess = ClientesPeer::doSelectJoinTipoCli($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientesCriteria = $criteria;

		return $this->collClientess;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Clientess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getClientessJoinZona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientess === null) {
			if ($this->isNew()) {
				$this->collClientess = array();
			} else {

				$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

				$this->collClientess = ClientesPeer::doSelectJoinZona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastClientesCriteria) || !$this->lastClientesCriteria->equals($criteria)) {
				$this->collClientess = ClientesPeer::doSelectJoinZona($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientesCriteria = $criteria;

		return $this->collClientess;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Clientess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getClientessJoinSegmento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientess === null) {
			if ($this->isNew()) {
				$this->collClientess = array();
			} else {

				$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

				$this->collClientess = ClientesPeer::doSelectJoinSegmento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastClientesCriteria) || !$this->lastClientesCriteria->equals($criteria)) {
				$this->collClientess = ClientesPeer::doSelectJoinSegmento($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientesCriteria = $criteria;

		return $this->collClientess;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Clientess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getClientessJoinCtaIngr($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientess === null) {
			if ($this->isNew()) {
				$this->collClientess = array();
			} else {

				$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

				$this->collClientess = ClientesPeer::doSelectJoinCtaIngr($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientesPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastClientesCriteria) || !$this->lastClientesCriteria->equals($criteria)) {
				$this->collClientess = ClientesPeer::doSelectJoinCtaIngr($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientesCriteria = $criteria;

		return $this->collClientess;
	}

	/**
	 * Clears out the collFacturas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFacturas()
	 */
	public function clearFacturas()
	{
		$this->collFacturas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFacturas collection (array).
	 *
	 * By default this just sets the collFacturas collection to an empty array (like clearcollFacturas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFacturas()
	{
		$this->collFacturas = array();
	}

	/**
	 * Gets an array of Factura objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Vendedor has previously been saved, it will retrieve
	 * related Facturas from storage. If this Vendedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Factura[]
	 * @throws     PropelException
	 */
	public function getFacturas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
			   $this->collFacturas = array();
			} else {

				$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

				FacturaPeer::addSelectColumns($criteria);
				$this->collFacturas = FacturaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

				FacturaPeer::addSelectColumns($criteria);
				if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
					$this->collFacturas = FacturaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFacturaCriteria = $criteria;
		return $this->collFacturas;
	}

	/**
	 * Returns the number of related Factura objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Factura objects.
	 * @throws     PropelException
	 */
	public function countFacturas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

				$count = FacturaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

				if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
					$count = FacturaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collFacturas);
				}
			} else {
				$count = count($this->collFacturas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Factura object to this object
	 * through the Factura foreign key attribute.
	 *
	 * @param      Factura $l Factura
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFactura(Factura $l)
	{
		if ($this->collFacturas === null) {
			$this->initFacturas();
		}
		if (!in_array($l, $this->collFacturas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFacturas, $l);
			$l->setVendedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Facturas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getFacturasJoinClientes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
				$this->collFacturas = array();
			} else {

				$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

				$this->collFacturas = FacturaPeer::doSelectJoinClientes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
				$this->collFacturas = FacturaPeer::doSelectJoinClientes($criteria, $con, $join_behavior);
			}
		}
		$this->lastFacturaCriteria = $criteria;

		return $this->collFacturas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Facturas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getFacturasJoinTranspor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
				$this->collFacturas = array();
			} else {

				$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

				$this->collFacturas = FacturaPeer::doSelectJoinTranspor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
				$this->collFacturas = FacturaPeer::doSelectJoinTranspor($criteria, $con, $join_behavior);
			}
		}
		$this->lastFacturaCriteria = $criteria;

		return $this->collFacturas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Facturas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getFacturasJoinCondicio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
				$this->collFacturas = array();
			} else {

				$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

				$this->collFacturas = FacturaPeer::doSelectJoinCondicio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FacturaPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
				$this->collFacturas = FacturaPeer::doSelectJoinCondicio($criteria, $con, $join_behavior);
			}
		}
		$this->lastFacturaCriteria = $criteria;

		return $this->collFacturas;
	}

	/**
	 * Clears out the collDocumCcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDocumCcs()
	 */
	public function clearDocumCcs()
	{
		$this->collDocumCcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDocumCcs collection (array).
	 *
	 * By default this just sets the collDocumCcs collection to an empty array (like clearcollDocumCcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDocumCcs()
	{
		$this->collDocumCcs = array();
	}

	/**
	 * Gets an array of DocumCc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Vendedor has previously been saved, it will retrieve
	 * related DocumCcs from storage. If this Vendedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DocumCc[]
	 * @throws     PropelException
	 */
	public function getDocumCcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocumCcs === null) {
			if ($this->isNew()) {
			   $this->collDocumCcs = array();
			} else {

				$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

				DocumCcPeer::addSelectColumns($criteria);
				$this->collDocumCcs = DocumCcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

				DocumCcPeer::addSelectColumns($criteria);
				if (!isset($this->lastDocumCcCriteria) || !$this->lastDocumCcCriteria->equals($criteria)) {
					$this->collDocumCcs = DocumCcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDocumCcCriteria = $criteria;
		return $this->collDocumCcs;
	}

	/**
	 * Returns the number of related DocumCc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DocumCc objects.
	 * @throws     PropelException
	 */
	public function countDocumCcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDocumCcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

				$count = DocumCcPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

				if (!isset($this->lastDocumCcCriteria) || !$this->lastDocumCcCriteria->equals($criteria)) {
					$count = DocumCcPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collDocumCcs);
				}
			} else {
				$count = count($this->collDocumCcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DocumCc object to this object
	 * through the DocumCc foreign key attribute.
	 *
	 * @param      DocumCc $l DocumCc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDocumCc(DocumCc $l)
	{
		if ($this->collDocumCcs === null) {
			$this->initDocumCcs();
		}
		if (!in_array($l, $this->collDocumCcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDocumCcs, $l);
			$l->setVendedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related DocumCcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getDocumCcsJoinClientes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocumCcs === null) {
			if ($this->isNew()) {
				$this->collDocumCcs = array();
			} else {

				$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

				$this->collDocumCcs = DocumCcPeer::doSelectJoinClientes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastDocumCcCriteria) || !$this->lastDocumCcCriteria->equals($criteria)) {
				$this->collDocumCcs = DocumCcPeer::doSelectJoinClientes($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocumCcCriteria = $criteria;

		return $this->collDocumCcs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related DocumCcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getDocumCcsJoinTabulado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocumCcs === null) {
			if ($this->isNew()) {
				$this->collDocumCcs = array();
			} else {

				$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

				$this->collDocumCcs = DocumCcPeer::doSelectJoinTabulado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastDocumCcCriteria) || !$this->lastDocumCcCriteria->equals($criteria)) {
				$this->collDocumCcs = DocumCcPeer::doSelectJoinTabulado($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocumCcCriteria = $criteria;

		return $this->collDocumCcs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related DocumCcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getDocumCcsJoinMonedaRelatedByMoneda($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocumCcs === null) {
			if ($this->isNew()) {
				$this->collDocumCcs = array();
			} else {

				$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

				$this->collDocumCcs = DocumCcPeer::doSelectJoinMonedaRelatedByMoneda($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastDocumCcCriteria) || !$this->lastDocumCcCriteria->equals($criteria)) {
				$this->collDocumCcs = DocumCcPeer::doSelectJoinMonedaRelatedByMoneda($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocumCcCriteria = $criteria;

		return $this->collDocumCcs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related DocumCcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getDocumCcsJoinAlmacen($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocumCcs === null) {
			if ($this->isNew()) {
				$this->collDocumCcs = array();
			} else {

				$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

				$this->collDocumCcs = DocumCcPeer::doSelectJoinAlmacen($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastDocumCcCriteria) || !$this->lastDocumCcCriteria->equals($criteria)) {
				$this->collDocumCcs = DocumCcPeer::doSelectJoinAlmacen($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocumCcCriteria = $criteria;

		return $this->collDocumCcs;
	}

	/**
	 * Clears out the collCobross collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCobross()
	 */
	public function clearCobross()
	{
		$this->collCobross = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCobross collection (array).
	 *
	 * By default this just sets the collCobross collection to an empty array (like clearcollCobross());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCobross()
	{
		$this->collCobross = array();
	}

	/**
	 * Gets an array of Cobros objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Vendedor has previously been saved, it will retrieve
	 * related Cobross from storage. If this Vendedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Cobros[]
	 * @throws     PropelException
	 */
	public function getCobross($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCobross === null) {
			if ($this->isNew()) {
			   $this->collCobross = array();
			} else {

				$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

				CobrosPeer::addSelectColumns($criteria);
				$this->collCobross = CobrosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

				CobrosPeer::addSelectColumns($criteria);
				if (!isset($this->lastCobrosCriteria) || !$this->lastCobrosCriteria->equals($criteria)) {
					$this->collCobross = CobrosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCobrosCriteria = $criteria;
		return $this->collCobross;
	}

	/**
	 * Returns the number of related Cobros objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Cobros objects.
	 * @throws     PropelException
	 */
	public function countCobross(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCobross === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

				$count = CobrosPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

				if (!isset($this->lastCobrosCriteria) || !$this->lastCobrosCriteria->equals($criteria)) {
					$count = CobrosPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCobross);
				}
			} else {
				$count = count($this->collCobross);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Cobros object to this object
	 * through the Cobros foreign key attribute.
	 *
	 * @param      Cobros $l Cobros
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCobros(Cobros $l)
	{
		if ($this->collCobross === null) {
			$this->initCobross();
		}
		if (!in_array($l, $this->collCobross, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCobross, $l);
			$l->setVendedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Cobross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getCobrossJoinClientes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCobross === null) {
			if ($this->isNew()) {
				$this->collCobross = array();
			} else {

				$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

				$this->collCobross = CobrosPeer::doSelectJoinClientes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastCobrosCriteria) || !$this->lastCobrosCriteria->equals($criteria)) {
				$this->collCobross = CobrosPeer::doSelectJoinClientes($criteria, $con, $join_behavior);
			}
		}
		$this->lastCobrosCriteria = $criteria;

		return $this->collCobross;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Cobross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getCobrossJoinMonedaRelatedByMoneda($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCobross === null) {
			if ($this->isNew()) {
				$this->collCobross = array();
			} else {

				$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

				$this->collCobross = CobrosPeer::doSelectJoinMonedaRelatedByMoneda($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastCobrosCriteria) || !$this->lastCobrosCriteria->equals($criteria)) {
				$this->collCobross = CobrosPeer::doSelectJoinMonedaRelatedByMoneda($criteria, $con, $join_behavior);
			}
		}
		$this->lastCobrosCriteria = $criteria;

		return $this->collCobross;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Vendedor is new, it will return
	 * an empty collection; or if this Vendedor has previously
	 * been saved, it will retrieve related Cobross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Vendedor.
	 */
	public function getCobrossJoinAlmacen($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VendedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCobross === null) {
			if ($this->isNew()) {
				$this->collCobross = array();
			} else {

				$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

				$this->collCobross = CobrosPeer::doSelectJoinAlmacen($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CobrosPeer::CO_VEN, $this->co_ven);

			if (!isset($this->lastCobrosCriteria) || !$this->lastCobrosCriteria->equals($criteria)) {
				$this->collCobross = CobrosPeer::doSelectJoinAlmacen($criteria, $con, $join_behavior);
			}
		}
		$this->lastCobrosCriteria = $criteria;

		return $this->collCobross;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collClientess) {
				foreach ((array) $this->collClientess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFacturas) {
				foreach ((array) $this->collFacturas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDocumCcs) {
				foreach ((array) $this->collDocumCcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCobross) {
				foreach ((array) $this->collCobross as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collClientess = null;
		$this->collFacturas = null;
		$this->collDocumCcs = null;
		$this->collCobross = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseVendedor:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseVendedor::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseVendedor
