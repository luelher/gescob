<?php

/**
 * Base class that represents a row from the 'reng_cob' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 01:03:58 2009
 *
 * @package    lib.model.om
 */
abstract class BaseRengCob extends BaseObject  implements Persistent {


  const PEER = 'RengCobPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RengCobPeer
	 */
	protected static $peer;

	/**
	 * The value for the cob_num field.
	 * @var        int
	 */
	protected $cob_num;

	/**
	 * The value for the reng_num field.
	 * @var        int
	 */
	protected $reng_num;

	/**
	 * The value for the tp_doc_cob field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tp_doc_cob;

	/**
	 * The value for the doc_num field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $doc_num;

	/**
	 * The value for the neto field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $neto;

	/**
	 * The value for the neto_tmp field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $neto_tmp;

	/**
	 * The value for the dppago field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $dppago;

	/**
	 * The value for the dppago_tmp field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $dppago_tmp;

	/**
	 * The value for the reng_ncr field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $reng_ncr;

	/**
	 * The value for the co_ven field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_ven;

	/**
	 * The value for the comis1 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis1;

	/**
	 * The value for the comis2 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis2;

	/**
	 * The value for the comis3 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis3;

	/**
	 * The value for the comis4 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis4;

	/**
	 * The value for the sign_aju_c field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $sign_aju_c;

	/**
	 * The value for the porc_aju_c field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $porc_aju_c;

	/**
	 * The value for the por_cob field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $por_cob;

	/**
	 * The value for the comi_cob field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comi_cob;

	/**
	 * The value for the mont_cob field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $mont_cob;

	/**
	 * The value for the sino_pago field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $sino_pago;

	/**
	 * The value for the sino_reten field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $sino_reten;

	/**
	 * The value for the monto_dppago field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_dppago;

	/**
	 * The value for the monto_reten field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_reten;

	/**
	 * The value for the imp_pago field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $imp_pago;

	/**
	 * The value for the monto_obj field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_obj;

	/**
	 * The value for the isv field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $isv;

	/**
	 * The value for the nro_fact field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $nro_fact;

	/**
	 * The value for the moneda field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $moneda;

	/**
	 * The value for the tasa field.
	 * Note: this column has a database default value of: '1'
	 * @var        string
	 */
	protected $tasa;

	/**
	 * The value for the numcon field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $numcon;

	/**
	 * The value for the sustraen field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $sustraen;

	/**
	 * The value for the rowguid field.
	 * Note: this column has a database default value of: '(newid())'
	 * @var        string
	 */
	protected $rowguid;

	/**
	 * The value for the co_islr field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_islr;

	/**
	 * The value for the fec_emis field.
	 * @var        string
	 */
	protected $fec_emis;

	/**
	 * The value for the fec_venc field.
	 * @var        string
	 */
	protected $fec_venc;

	/**
	 * The value for the comis5 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis5;

	/**
	 * The value for the comis6 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis6;

	/**
	 * The value for the fact_iva field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $fact_iva;

	/**
	 * The value for the ret_iva field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $ret_iva;

	/**
	 * The value for the porc_retn field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $porc_retn;

	/**
	 * The value for the porc_desc field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $porc_desc;

	/**
	 * The value for the aux01 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $aux01;

	/**
	 * The value for the aux02 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $aux02;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRengCob object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->tp_doc_cob = ' ';
		$this->doc_num = 0;
		$this->neto = '0';
		$this->neto_tmp = '0';
		$this->dppago = '0';
		$this->dppago_tmp = 0;
		$this->reng_ncr = 0;
		$this->co_ven = ' ';
		$this->comis1 = '0';
		$this->comis2 = '0';
		$this->comis3 = '0';
		$this->comis4 = '0';
		$this->sign_aju_c = ' ';
		$this->porc_aju_c = '0';
		$this->por_cob = '0';
		$this->comi_cob = '0';
		$this->mont_cob = '0';
		$this->sino_pago = false;
		$this->sino_reten = false;
		$this->monto_dppago = '0';
		$this->monto_reten = '0';
		$this->imp_pago = '0';
		$this->monto_obj = '0';
		$this->isv = '0';
		$this->nro_fact = ' ';
		$this->moneda = ' ';
		$this->tasa = '1';
		$this->numcon = ' ';
		$this->sustraen = '0';
		$this->rowguid = '(newid())';
		$this->co_islr = ' ';
		$this->comis5 = '0';
		$this->comis6 = '0';
		$this->fact_iva = 0;
		$this->ret_iva = '0';
		$this->porc_retn = '0';
		$this->porc_desc = '0';
		$this->aux01 = '0';
		$this->aux02 = ' ';
	}

	/**
	 * Get the [cob_num] column value.
	 * 
	 * @return     int
	 */
	public function getCobNum()
	{
		return $this->cob_num;
	}

	/**
	 * Get the [reng_num] column value.
	 * 
	 * @return     int
	 */
	public function getRengNum()
	{
		return $this->reng_num;
	}

	/**
	 * Get the [tp_doc_cob] column value.
	 * 
	 * @return     string
	 */
	public function getTpDocCob()
	{
		return $this->tp_doc_cob;
	}

	/**
	 * Get the [doc_num] column value.
	 * 
	 * @return     int
	 */
	public function getDocNum()
	{
		return $this->doc_num;
	}

	/**
	 * Get the [neto] column value.
	 * 
	 * @return     string
	 */
	public function getNeto()
	{
		return $this->neto;
	}

	/**
	 * Get the [neto_tmp] column value.
	 * 
	 * @return     string
	 */
	public function getNetoTmp()
	{
		return $this->neto_tmp;
	}

	/**
	 * Get the [dppago] column value.
	 * 
	 * @return     string
	 */
	public function getDppago()
	{
		return $this->dppago;
	}

	/**
	 * Get the [dppago_tmp] column value.
	 * 
	 * @return     int
	 */
	public function getDppagoTmp()
	{
		return $this->dppago_tmp;
	}

	/**
	 * Get the [reng_ncr] column value.
	 * 
	 * @return     int
	 */
	public function getRengNcr()
	{
		return $this->reng_ncr;
	}

	/**
	 * Get the [co_ven] column value.
	 * 
	 * @return     string
	 */
	public function getCoVen()
	{
		return $this->co_ven;
	}

	/**
	 * Get the [comis1] column value.
	 * 
	 * @return     string
	 */
	public function getComis1()
	{
		return $this->comis1;
	}

	/**
	 * Get the [comis2] column value.
	 * 
	 * @return     string
	 */
	public function getComis2()
	{
		return $this->comis2;
	}

	/**
	 * Get the [comis3] column value.
	 * 
	 * @return     string
	 */
	public function getComis3()
	{
		return $this->comis3;
	}

	/**
	 * Get the [comis4] column value.
	 * 
	 * @return     string
	 */
	public function getComis4()
	{
		return $this->comis4;
	}

	/**
	 * Get the [sign_aju_c] column value.
	 * 
	 * @return     string
	 */
	public function getSignAjuC()
	{
		return $this->sign_aju_c;
	}

	/**
	 * Get the [porc_aju_c] column value.
	 * 
	 * @return     string
	 */
	public function getPorcAjuC()
	{
		return $this->porc_aju_c;
	}

	/**
	 * Get the [por_cob] column value.
	 * 
	 * @return     string
	 */
	public function getPorCob()
	{
		return $this->por_cob;
	}

	/**
	 * Get the [comi_cob] column value.
	 * 
	 * @return     string
	 */
	public function getComiCob()
	{
		return $this->comi_cob;
	}

	/**
	 * Get the [mont_cob] column value.
	 * 
	 * @return     string
	 */
	public function getMontCob()
	{
		return $this->mont_cob;
	}

	/**
	 * Get the [sino_pago] column value.
	 * 
	 * @return     boolean
	 */
	public function getSinoPago()
	{
		return $this->sino_pago;
	}

	/**
	 * Get the [sino_reten] column value.
	 * 
	 * @return     boolean
	 */
	public function getSinoReten()
	{
		return $this->sino_reten;
	}

	/**
	 * Get the [monto_dppago] column value.
	 * 
	 * @return     string
	 */
	public function getMontoDppago()
	{
		return $this->monto_dppago;
	}

	/**
	 * Get the [monto_reten] column value.
	 * 
	 * @return     string
	 */
	public function getMontoReten()
	{
		return $this->monto_reten;
	}

	/**
	 * Get the [imp_pago] column value.
	 * 
	 * @return     string
	 */
	public function getImpPago()
	{
		return $this->imp_pago;
	}

	/**
	 * Get the [monto_obj] column value.
	 * 
	 * @return     string
	 */
	public function getMontoObj()
	{
		return $this->monto_obj;
	}

	/**
	 * Get the [isv] column value.
	 * 
	 * @return     string
	 */
	public function getIsv()
	{
		return $this->isv;
	}

	/**
	 * Get the [nro_fact] column value.
	 * 
	 * @return     string
	 */
	public function getNroFact()
	{
		return $this->nro_fact;
	}

	/**
	 * Get the [moneda] column value.
	 * 
	 * @return     string
	 */
	public function getMoneda()
	{
		return $this->moneda;
	}

	/**
	 * Get the [tasa] column value.
	 * 
	 * @return     string
	 */
	public function getTasa()
	{
		return $this->tasa;
	}

	/**
	 * Get the [numcon] column value.
	 * 
	 * @return     string
	 */
	public function getNumcon()
	{
		return $this->numcon;
	}

	/**
	 * Get the [sustraen] column value.
	 * 
	 * @return     string
	 */
	public function getSustraen()
	{
		return $this->sustraen;
	}

	/**
	 * Get the [rowguid] column value.
	 * 
	 * @return     string
	 */
	public function getRowguid()
	{
		return $this->rowguid;
	}

	/**
	 * Get the [co_islr] column value.
	 * 
	 * @return     string
	 */
	public function getCoIslr()
	{
		return $this->co_islr;
	}

	/**
	 * Get the [fec_emis] column value.
	 * 
	 * @return     string
	 */
	public function getFecEmis()
	{
		return $this->fec_emis;
	}

	/**
	 * Get the [fec_venc] column value.
	 * 
	 * @return     string
	 */
	public function getFecVenc()
	{
		return $this->fec_venc;
	}

	/**
	 * Get the [comis5] column value.
	 * 
	 * @return     string
	 */
	public function getComis5()
	{
		return $this->comis5;
	}

	/**
	 * Get the [comis6] column value.
	 * 
	 * @return     string
	 */
	public function getComis6()
	{
		return $this->comis6;
	}

	/**
	 * Get the [fact_iva] column value.
	 * 
	 * @return     int
	 */
	public function getFactIva()
	{
		return $this->fact_iva;
	}

	/**
	 * Get the [ret_iva] column value.
	 * 
	 * @return     string
	 */
	public function getRetIva()
	{
		return $this->ret_iva;
	}

	/**
	 * Get the [porc_retn] column value.
	 * 
	 * @return     string
	 */
	public function getPorcRetn()
	{
		return $this->porc_retn;
	}

	/**
	 * Get the [porc_desc] column value.
	 * 
	 * @return     string
	 */
	public function getPorcDesc()
	{
		return $this->porc_desc;
	}

	/**
	 * Get the [aux01] column value.
	 * 
	 * @return     string
	 */
	public function getAux01()
	{
		return $this->aux01;
	}

	/**
	 * Get the [aux02] column value.
	 * 
	 * @return     string
	 */
	public function getAux02()
	{
		return $this->aux02;
	}

	/**
	 * Set the value of [cob_num] column.
	 * 
	 * @param      int $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setCobNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cob_num !== $v) {
			$this->cob_num = $v;
			$this->modifiedColumns[] = RengCobPeer::COB_NUM;
		}

		return $this;
	} // setCobNum()

	/**
	 * Set the value of [reng_num] column.
	 * 
	 * @param      int $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setRengNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reng_num !== $v) {
			$this->reng_num = $v;
			$this->modifiedColumns[] = RengCobPeer::RENG_NUM;
		}

		return $this;
	} // setRengNum()

	/**
	 * Set the value of [tp_doc_cob] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setTpDocCob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tp_doc_cob !== $v || $v === ' ') {
			$this->tp_doc_cob = $v;
			$this->modifiedColumns[] = RengCobPeer::TP_DOC_COB;
		}

		return $this;
	} // setTpDocCob()

	/**
	 * Set the value of [doc_num] column.
	 * 
	 * @param      int $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setDocNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->doc_num !== $v || $v === 0) {
			$this->doc_num = $v;
			$this->modifiedColumns[] = RengCobPeer::DOC_NUM;
		}

		return $this;
	} // setDocNum()

	/**
	 * Set the value of [neto] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setNeto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->neto !== $v || $v === '0') {
			$this->neto = $v;
			$this->modifiedColumns[] = RengCobPeer::NETO;
		}

		return $this;
	} // setNeto()

	/**
	 * Set the value of [neto_tmp] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setNetoTmp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->neto_tmp !== $v || $v === '0') {
			$this->neto_tmp = $v;
			$this->modifiedColumns[] = RengCobPeer::NETO_TMP;
		}

		return $this;
	} // setNetoTmp()

	/**
	 * Set the value of [dppago] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setDppago($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dppago !== $v || $v === '0') {
			$this->dppago = $v;
			$this->modifiedColumns[] = RengCobPeer::DPPAGO;
		}

		return $this;
	} // setDppago()

	/**
	 * Set the value of [dppago_tmp] column.
	 * 
	 * @param      int $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setDppagoTmp($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dppago_tmp !== $v || $v === 0) {
			$this->dppago_tmp = $v;
			$this->modifiedColumns[] = RengCobPeer::DPPAGO_TMP;
		}

		return $this;
	} // setDppagoTmp()

	/**
	 * Set the value of [reng_ncr] column.
	 * 
	 * @param      int $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setRengNcr($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reng_ncr !== $v || $v === 0) {
			$this->reng_ncr = $v;
			$this->modifiedColumns[] = RengCobPeer::RENG_NCR;
		}

		return $this;
	} // setRengNcr()

	/**
	 * Set the value of [co_ven] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setCoVen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_ven !== $v || $v === ' ') {
			$this->co_ven = $v;
			$this->modifiedColumns[] = RengCobPeer::CO_VEN;
		}

		return $this;
	} // setCoVen()

	/**
	 * Set the value of [comis1] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setComis1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis1 !== $v || $v === '0') {
			$this->comis1 = $v;
			$this->modifiedColumns[] = RengCobPeer::COMIS1;
		}

		return $this;
	} // setComis1()

	/**
	 * Set the value of [comis2] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setComis2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis2 !== $v || $v === '0') {
			$this->comis2 = $v;
			$this->modifiedColumns[] = RengCobPeer::COMIS2;
		}

		return $this;
	} // setComis2()

	/**
	 * Set the value of [comis3] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setComis3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis3 !== $v || $v === '0') {
			$this->comis3 = $v;
			$this->modifiedColumns[] = RengCobPeer::COMIS3;
		}

		return $this;
	} // setComis3()

	/**
	 * Set the value of [comis4] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setComis4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis4 !== $v || $v === '0') {
			$this->comis4 = $v;
			$this->modifiedColumns[] = RengCobPeer::COMIS4;
		}

		return $this;
	} // setComis4()

	/**
	 * Set the value of [sign_aju_c] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setSignAjuC($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sign_aju_c !== $v || $v === ' ') {
			$this->sign_aju_c = $v;
			$this->modifiedColumns[] = RengCobPeer::SIGN_AJU_C;
		}

		return $this;
	} // setSignAjuC()

	/**
	 * Set the value of [porc_aju_c] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setPorcAjuC($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->porc_aju_c !== $v || $v === '0') {
			$this->porc_aju_c = $v;
			$this->modifiedColumns[] = RengCobPeer::PORC_AJU_C;
		}

		return $this;
	} // setPorcAjuC()

	/**
	 * Set the value of [por_cob] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setPorCob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->por_cob !== $v || $v === '0') {
			$this->por_cob = $v;
			$this->modifiedColumns[] = RengCobPeer::POR_COB;
		}

		return $this;
	} // setPorCob()

	/**
	 * Set the value of [comi_cob] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setComiCob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comi_cob !== $v || $v === '0') {
			$this->comi_cob = $v;
			$this->modifiedColumns[] = RengCobPeer::COMI_COB;
		}

		return $this;
	} // setComiCob()

	/**
	 * Set the value of [mont_cob] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setMontCob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mont_cob !== $v || $v === '0') {
			$this->mont_cob = $v;
			$this->modifiedColumns[] = RengCobPeer::MONT_COB;
		}

		return $this;
	} // setMontCob()

	/**
	 * Set the value of [sino_pago] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setSinoPago($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->sino_pago !== $v || $v === false) {
			$this->sino_pago = $v;
			$this->modifiedColumns[] = RengCobPeer::SINO_PAGO;
		}

		return $this;
	} // setSinoPago()

	/**
	 * Set the value of [sino_reten] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setSinoReten($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->sino_reten !== $v || $v === false) {
			$this->sino_reten = $v;
			$this->modifiedColumns[] = RengCobPeer::SINO_RETEN;
		}

		return $this;
	} // setSinoReten()

	/**
	 * Set the value of [monto_dppago] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setMontoDppago($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_dppago !== $v || $v === '0') {
			$this->monto_dppago = $v;
			$this->modifiedColumns[] = RengCobPeer::MONTO_DPPAGO;
		}

		return $this;
	} // setMontoDppago()

	/**
	 * Set the value of [monto_reten] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setMontoReten($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_reten !== $v || $v === '0') {
			$this->monto_reten = $v;
			$this->modifiedColumns[] = RengCobPeer::MONTO_RETEN;
		}

		return $this;
	} // setMontoReten()

	/**
	 * Set the value of [imp_pago] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setImpPago($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->imp_pago !== $v || $v === '0') {
			$this->imp_pago = $v;
			$this->modifiedColumns[] = RengCobPeer::IMP_PAGO;
		}

		return $this;
	} // setImpPago()

	/**
	 * Set the value of [monto_obj] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setMontoObj($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_obj !== $v || $v === '0') {
			$this->monto_obj = $v;
			$this->modifiedColumns[] = RengCobPeer::MONTO_OBJ;
		}

		return $this;
	} // setMontoObj()

	/**
	 * Set the value of [isv] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setIsv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->isv !== $v || $v === '0') {
			$this->isv = $v;
			$this->modifiedColumns[] = RengCobPeer::ISV;
		}

		return $this;
	} // setIsv()

	/**
	 * Set the value of [nro_fact] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setNroFact($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nro_fact !== $v || $v === ' ') {
			$this->nro_fact = $v;
			$this->modifiedColumns[] = RengCobPeer::NRO_FACT;
		}

		return $this;
	} // setNroFact()

	/**
	 * Set the value of [moneda] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setMoneda($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->moneda !== $v || $v === ' ') {
			$this->moneda = $v;
			$this->modifiedColumns[] = RengCobPeer::MONEDA;
		}

		return $this;
	} // setMoneda()

	/**
	 * Set the value of [tasa] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setTasa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tasa !== $v || $v === '1') {
			$this->tasa = $v;
			$this->modifiedColumns[] = RengCobPeer::TASA;
		}

		return $this;
	} // setTasa()

	/**
	 * Set the value of [numcon] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setNumcon($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numcon !== $v || $v === ' ') {
			$this->numcon = $v;
			$this->modifiedColumns[] = RengCobPeer::NUMCON;
		}

		return $this;
	} // setNumcon()

	/**
	 * Set the value of [sustraen] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setSustraen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sustraen !== $v || $v === '0') {
			$this->sustraen = $v;
			$this->modifiedColumns[] = RengCobPeer::SUSTRAEN;
		}

		return $this;
	} // setSustraen()

	/**
	 * Set the value of [rowguid] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setRowguid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowguid !== $v || $v === '(newid())') {
			$this->rowguid = $v;
			$this->modifiedColumns[] = RengCobPeer::ROWGUID;
		}

		return $this;
	} // setRowguid()

	/**
	 * Set the value of [co_islr] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setCoIslr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_islr !== $v || $v === ' ') {
			$this->co_islr = $v;
			$this->modifiedColumns[] = RengCobPeer::CO_ISLR;
		}

		return $this;
	} // setCoIslr()

	/**
	 * Set the value of [fec_emis] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setFecEmis($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_emis !== $v) {
			$this->fec_emis = $v;
			$this->modifiedColumns[] = RengCobPeer::FEC_EMIS;
		}

		return $this;
	} // setFecEmis()

	/**
	 * Set the value of [fec_venc] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setFecVenc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_venc !== $v) {
			$this->fec_venc = $v;
			$this->modifiedColumns[] = RengCobPeer::FEC_VENC;
		}

		return $this;
	} // setFecVenc()

	/**
	 * Set the value of [comis5] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setComis5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis5 !== $v || $v === '0') {
			$this->comis5 = $v;
			$this->modifiedColumns[] = RengCobPeer::COMIS5;
		}

		return $this;
	} // setComis5()

	/**
	 * Set the value of [comis6] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setComis6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis6 !== $v || $v === '0') {
			$this->comis6 = $v;
			$this->modifiedColumns[] = RengCobPeer::COMIS6;
		}

		return $this;
	} // setComis6()

	/**
	 * Set the value of [fact_iva] column.
	 * 
	 * @param      int $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setFactIva($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fact_iva !== $v || $v === 0) {
			$this->fact_iva = $v;
			$this->modifiedColumns[] = RengCobPeer::FACT_IVA;
		}

		return $this;
	} // setFactIva()

	/**
	 * Set the value of [ret_iva] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setRetIva($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ret_iva !== $v || $v === '0') {
			$this->ret_iva = $v;
			$this->modifiedColumns[] = RengCobPeer::RET_IVA;
		}

		return $this;
	} // setRetIva()

	/**
	 * Set the value of [porc_retn] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setPorcRetn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->porc_retn !== $v || $v === '0') {
			$this->porc_retn = $v;
			$this->modifiedColumns[] = RengCobPeer::PORC_RETN;
		}

		return $this;
	} // setPorcRetn()

	/**
	 * Set the value of [porc_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setPorcDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->porc_desc !== $v || $v === '0') {
			$this->porc_desc = $v;
			$this->modifiedColumns[] = RengCobPeer::PORC_DESC;
		}

		return $this;
	} // setPorcDesc()

	/**
	 * Set the value of [aux01] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setAux01($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aux01 !== $v || $v === '0') {
			$this->aux01 = $v;
			$this->modifiedColumns[] = RengCobPeer::AUX01;
		}

		return $this;
	} // setAux01()

	/**
	 * Set the value of [aux02] column.
	 * 
	 * @param      string $v new value
	 * @return     RengCob The current object (for fluent API support)
	 */
	public function setAux02($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aux02 !== $v || $v === ' ') {
			$this->aux02 = $v;
			$this->modifiedColumns[] = RengCobPeer::AUX02;
		}

		return $this;
	} // setAux02()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RengCobPeer::TP_DOC_COB,RengCobPeer::DOC_NUM,RengCobPeer::NETO,RengCobPeer::NETO_TMP,RengCobPeer::DPPAGO,RengCobPeer::DPPAGO_TMP,RengCobPeer::RENG_NCR,RengCobPeer::CO_VEN,RengCobPeer::COMIS1,RengCobPeer::COMIS2,RengCobPeer::COMIS3,RengCobPeer::COMIS4,RengCobPeer::SIGN_AJU_C,RengCobPeer::PORC_AJU_C,RengCobPeer::POR_COB,RengCobPeer::COMI_COB,RengCobPeer::MONT_COB,RengCobPeer::SINO_PAGO,RengCobPeer::SINO_RETEN,RengCobPeer::MONTO_DPPAGO,RengCobPeer::MONTO_RETEN,RengCobPeer::IMP_PAGO,RengCobPeer::MONTO_OBJ,RengCobPeer::ISV,RengCobPeer::NRO_FACT,RengCobPeer::MONEDA,RengCobPeer::TASA,RengCobPeer::NUMCON,RengCobPeer::SUSTRAEN,RengCobPeer::ROWGUID,RengCobPeer::CO_ISLR,RengCobPeer::COMIS5,RengCobPeer::COMIS6,RengCobPeer::FACT_IVA,RengCobPeer::RET_IVA,RengCobPeer::PORC_RETN,RengCobPeer::PORC_DESC,RengCobPeer::AUX01,RengCobPeer::AUX02))) {
				return false;
			}

			if ($this->tp_doc_cob !== ' ') {
				return false;
			}

			if ($this->doc_num !== 0) {
				return false;
			}

			if ($this->neto !== '0') {
				return false;
			}

			if ($this->neto_tmp !== '0') {
				return false;
			}

			if ($this->dppago !== '0') {
				return false;
			}

			if ($this->dppago_tmp !== 0) {
				return false;
			}

			if ($this->reng_ncr !== 0) {
				return false;
			}

			if ($this->co_ven !== ' ') {
				return false;
			}

			if ($this->comis1 !== '0') {
				return false;
			}

			if ($this->comis2 !== '0') {
				return false;
			}

			if ($this->comis3 !== '0') {
				return false;
			}

			if ($this->comis4 !== '0') {
				return false;
			}

			if ($this->sign_aju_c !== ' ') {
				return false;
			}

			if ($this->porc_aju_c !== '0') {
				return false;
			}

			if ($this->por_cob !== '0') {
				return false;
			}

			if ($this->comi_cob !== '0') {
				return false;
			}

			if ($this->mont_cob !== '0') {
				return false;
			}

			if ($this->sino_pago !== false) {
				return false;
			}

			if ($this->sino_reten !== false) {
				return false;
			}

			if ($this->monto_dppago !== '0') {
				return false;
			}

			if ($this->monto_reten !== '0') {
				return false;
			}

			if ($this->imp_pago !== '0') {
				return false;
			}

			if ($this->monto_obj !== '0') {
				return false;
			}

			if ($this->isv !== '0') {
				return false;
			}

			if ($this->nro_fact !== ' ') {
				return false;
			}

			if ($this->moneda !== ' ') {
				return false;
			}

			if ($this->tasa !== '1') {
				return false;
			}

			if ($this->numcon !== ' ') {
				return false;
			}

			if ($this->sustraen !== '0') {
				return false;
			}

			if ($this->rowguid !== '(newid())') {
				return false;
			}

			if ($this->co_islr !== ' ') {
				return false;
			}

			if ($this->comis5 !== '0') {
				return false;
			}

			if ($this->comis6 !== '0') {
				return false;
			}

			if ($this->fact_iva !== 0) {
				return false;
			}

			if ($this->ret_iva !== '0') {
				return false;
			}

			if ($this->porc_retn !== '0') {
				return false;
			}

			if ($this->porc_desc !== '0') {
				return false;
			}

			if ($this->aux01 !== '0') {
				return false;
			}

			if ($this->aux02 !== ' ') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cob_num = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->reng_num = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->tp_doc_cob = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->doc_num = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->neto = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->neto_tmp = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->dppago = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->dppago_tmp = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->reng_ncr = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->co_ven = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->comis1 = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->comis2 = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->comis3 = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->comis4 = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->sign_aju_c = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->porc_aju_c = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->por_cob = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->comi_cob = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->mont_cob = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->sino_pago = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
			$this->sino_reten = ($row[$startcol + 20] !== null) ? (boolean) $row[$startcol + 20] : null;
			$this->monto_dppago = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->monto_reten = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->imp_pago = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->monto_obj = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->isv = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->nro_fact = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->moneda = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->tasa = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->numcon = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->sustraen = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->rowguid = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->co_islr = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->fec_emis = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->fec_venc = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->comis5 = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->comis6 = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->fact_iva = ($row[$startcol + 37] !== null) ? (int) $row[$startcol + 37] : null;
			$this->ret_iva = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->porc_retn = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->porc_desc = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->aux01 = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->aux02 = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 43; // 43 = RengCobPeer::NUM_COLUMNS - RengCobPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RengCob object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengCobPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RengCobPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengCob:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengCobPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RengCobPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRengCob:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengCob:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengCobPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRengCob:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RengCobPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RengCobPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += RengCobPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RengCobPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RengCobPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCobNum();
				break;
			case 1:
				return $this->getRengNum();
				break;
			case 2:
				return $this->getTpDocCob();
				break;
			case 3:
				return $this->getDocNum();
				break;
			case 4:
				return $this->getNeto();
				break;
			case 5:
				return $this->getNetoTmp();
				break;
			case 6:
				return $this->getDppago();
				break;
			case 7:
				return $this->getDppagoTmp();
				break;
			case 8:
				return $this->getRengNcr();
				break;
			case 9:
				return $this->getCoVen();
				break;
			case 10:
				return $this->getComis1();
				break;
			case 11:
				return $this->getComis2();
				break;
			case 12:
				return $this->getComis3();
				break;
			case 13:
				return $this->getComis4();
				break;
			case 14:
				return $this->getSignAjuC();
				break;
			case 15:
				return $this->getPorcAjuC();
				break;
			case 16:
				return $this->getPorCob();
				break;
			case 17:
				return $this->getComiCob();
				break;
			case 18:
				return $this->getMontCob();
				break;
			case 19:
				return $this->getSinoPago();
				break;
			case 20:
				return $this->getSinoReten();
				break;
			case 21:
				return $this->getMontoDppago();
				break;
			case 22:
				return $this->getMontoReten();
				break;
			case 23:
				return $this->getImpPago();
				break;
			case 24:
				return $this->getMontoObj();
				break;
			case 25:
				return $this->getIsv();
				break;
			case 26:
				return $this->getNroFact();
				break;
			case 27:
				return $this->getMoneda();
				break;
			case 28:
				return $this->getTasa();
				break;
			case 29:
				return $this->getNumcon();
				break;
			case 30:
				return $this->getSustraen();
				break;
			case 31:
				return $this->getRowguid();
				break;
			case 32:
				return $this->getCoIslr();
				break;
			case 33:
				return $this->getFecEmis();
				break;
			case 34:
				return $this->getFecVenc();
				break;
			case 35:
				return $this->getComis5();
				break;
			case 36:
				return $this->getComis6();
				break;
			case 37:
				return $this->getFactIva();
				break;
			case 38:
				return $this->getRetIva();
				break;
			case 39:
				return $this->getPorcRetn();
				break;
			case 40:
				return $this->getPorcDesc();
				break;
			case 41:
				return $this->getAux01();
				break;
			case 42:
				return $this->getAux02();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RengCobPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCobNum(),
			$keys[1] => $this->getRengNum(),
			$keys[2] => $this->getTpDocCob(),
			$keys[3] => $this->getDocNum(),
			$keys[4] => $this->getNeto(),
			$keys[5] => $this->getNetoTmp(),
			$keys[6] => $this->getDppago(),
			$keys[7] => $this->getDppagoTmp(),
			$keys[8] => $this->getRengNcr(),
			$keys[9] => $this->getCoVen(),
			$keys[10] => $this->getComis1(),
			$keys[11] => $this->getComis2(),
			$keys[12] => $this->getComis3(),
			$keys[13] => $this->getComis4(),
			$keys[14] => $this->getSignAjuC(),
			$keys[15] => $this->getPorcAjuC(),
			$keys[16] => $this->getPorCob(),
			$keys[17] => $this->getComiCob(),
			$keys[18] => $this->getMontCob(),
			$keys[19] => $this->getSinoPago(),
			$keys[20] => $this->getSinoReten(),
			$keys[21] => $this->getMontoDppago(),
			$keys[22] => $this->getMontoReten(),
			$keys[23] => $this->getImpPago(),
			$keys[24] => $this->getMontoObj(),
			$keys[25] => $this->getIsv(),
			$keys[26] => $this->getNroFact(),
			$keys[27] => $this->getMoneda(),
			$keys[28] => $this->getTasa(),
			$keys[29] => $this->getNumcon(),
			$keys[30] => $this->getSustraen(),
			$keys[31] => $this->getRowguid(),
			$keys[32] => $this->getCoIslr(),
			$keys[33] => $this->getFecEmis(),
			$keys[34] => $this->getFecVenc(),
			$keys[35] => $this->getComis5(),
			$keys[36] => $this->getComis6(),
			$keys[37] => $this->getFactIva(),
			$keys[38] => $this->getRetIva(),
			$keys[39] => $this->getPorcRetn(),
			$keys[40] => $this->getPorcDesc(),
			$keys[41] => $this->getAux01(),
			$keys[42] => $this->getAux02(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RengCobPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCobNum($value);
				break;
			case 1:
				$this->setRengNum($value);
				break;
			case 2:
				$this->setTpDocCob($value);
				break;
			case 3:
				$this->setDocNum($value);
				break;
			case 4:
				$this->setNeto($value);
				break;
			case 5:
				$this->setNetoTmp($value);
				break;
			case 6:
				$this->setDppago($value);
				break;
			case 7:
				$this->setDppagoTmp($value);
				break;
			case 8:
				$this->setRengNcr($value);
				break;
			case 9:
				$this->setCoVen($value);
				break;
			case 10:
				$this->setComis1($value);
				break;
			case 11:
				$this->setComis2($value);
				break;
			case 12:
				$this->setComis3($value);
				break;
			case 13:
				$this->setComis4($value);
				break;
			case 14:
				$this->setSignAjuC($value);
				break;
			case 15:
				$this->setPorcAjuC($value);
				break;
			case 16:
				$this->setPorCob($value);
				break;
			case 17:
				$this->setComiCob($value);
				break;
			case 18:
				$this->setMontCob($value);
				break;
			case 19:
				$this->setSinoPago($value);
				break;
			case 20:
				$this->setSinoReten($value);
				break;
			case 21:
				$this->setMontoDppago($value);
				break;
			case 22:
				$this->setMontoReten($value);
				break;
			case 23:
				$this->setImpPago($value);
				break;
			case 24:
				$this->setMontoObj($value);
				break;
			case 25:
				$this->setIsv($value);
				break;
			case 26:
				$this->setNroFact($value);
				break;
			case 27:
				$this->setMoneda($value);
				break;
			case 28:
				$this->setTasa($value);
				break;
			case 29:
				$this->setNumcon($value);
				break;
			case 30:
				$this->setSustraen($value);
				break;
			case 31:
				$this->setRowguid($value);
				break;
			case 32:
				$this->setCoIslr($value);
				break;
			case 33:
				$this->setFecEmis($value);
				break;
			case 34:
				$this->setFecVenc($value);
				break;
			case 35:
				$this->setComis5($value);
				break;
			case 36:
				$this->setComis6($value);
				break;
			case 37:
				$this->setFactIva($value);
				break;
			case 38:
				$this->setRetIva($value);
				break;
			case 39:
				$this->setPorcRetn($value);
				break;
			case 40:
				$this->setPorcDesc($value);
				break;
			case 41:
				$this->setAux01($value);
				break;
			case 42:
				$this->setAux02($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RengCobPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCobNum($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setRengNum($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTpDocCob($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDocNum($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNeto($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNetoTmp($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDppago($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDppagoTmp($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setRengNcr($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCoVen($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setComis1($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setComis2($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setComis3($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setComis4($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setSignAjuC($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPorcAjuC($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setPorCob($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setComiCob($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMontCob($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setSinoPago($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSinoReten($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setMontoDppago($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setMontoReten($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setImpPago($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setMontoObj($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setIsv($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setNroFact($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setMoneda($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setTasa($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setNumcon($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setSustraen($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setRowguid($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCoIslr($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setFecEmis($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setFecVenc($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setComis5($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setComis6($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setFactIva($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setRetIva($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setPorcRetn($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setPorcDesc($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setAux01($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setAux02($arr[$keys[42]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RengCobPeer::DATABASE_NAME);

		if ($this->isColumnModified(RengCobPeer::COB_NUM)) $criteria->add(RengCobPeer::COB_NUM, $this->cob_num);
		if ($this->isColumnModified(RengCobPeer::RENG_NUM)) $criteria->add(RengCobPeer::RENG_NUM, $this->reng_num);
		if ($this->isColumnModified(RengCobPeer::TP_DOC_COB)) $criteria->add(RengCobPeer::TP_DOC_COB, $this->tp_doc_cob);
		if ($this->isColumnModified(RengCobPeer::DOC_NUM)) $criteria->add(RengCobPeer::DOC_NUM, $this->doc_num);
		if ($this->isColumnModified(RengCobPeer::NETO)) $criteria->add(RengCobPeer::NETO, $this->neto);
		if ($this->isColumnModified(RengCobPeer::NETO_TMP)) $criteria->add(RengCobPeer::NETO_TMP, $this->neto_tmp);
		if ($this->isColumnModified(RengCobPeer::DPPAGO)) $criteria->add(RengCobPeer::DPPAGO, $this->dppago);
		if ($this->isColumnModified(RengCobPeer::DPPAGO_TMP)) $criteria->add(RengCobPeer::DPPAGO_TMP, $this->dppago_tmp);
		if ($this->isColumnModified(RengCobPeer::RENG_NCR)) $criteria->add(RengCobPeer::RENG_NCR, $this->reng_ncr);
		if ($this->isColumnModified(RengCobPeer::CO_VEN)) $criteria->add(RengCobPeer::CO_VEN, $this->co_ven);
		if ($this->isColumnModified(RengCobPeer::COMIS1)) $criteria->add(RengCobPeer::COMIS1, $this->comis1);
		if ($this->isColumnModified(RengCobPeer::COMIS2)) $criteria->add(RengCobPeer::COMIS2, $this->comis2);
		if ($this->isColumnModified(RengCobPeer::COMIS3)) $criteria->add(RengCobPeer::COMIS3, $this->comis3);
		if ($this->isColumnModified(RengCobPeer::COMIS4)) $criteria->add(RengCobPeer::COMIS4, $this->comis4);
		if ($this->isColumnModified(RengCobPeer::SIGN_AJU_C)) $criteria->add(RengCobPeer::SIGN_AJU_C, $this->sign_aju_c);
		if ($this->isColumnModified(RengCobPeer::PORC_AJU_C)) $criteria->add(RengCobPeer::PORC_AJU_C, $this->porc_aju_c);
		if ($this->isColumnModified(RengCobPeer::POR_COB)) $criteria->add(RengCobPeer::POR_COB, $this->por_cob);
		if ($this->isColumnModified(RengCobPeer::COMI_COB)) $criteria->add(RengCobPeer::COMI_COB, $this->comi_cob);
		if ($this->isColumnModified(RengCobPeer::MONT_COB)) $criteria->add(RengCobPeer::MONT_COB, $this->mont_cob);
		if ($this->isColumnModified(RengCobPeer::SINO_PAGO)) $criteria->add(RengCobPeer::SINO_PAGO, $this->sino_pago);
		if ($this->isColumnModified(RengCobPeer::SINO_RETEN)) $criteria->add(RengCobPeer::SINO_RETEN, $this->sino_reten);
		if ($this->isColumnModified(RengCobPeer::MONTO_DPPAGO)) $criteria->add(RengCobPeer::MONTO_DPPAGO, $this->monto_dppago);
		if ($this->isColumnModified(RengCobPeer::MONTO_RETEN)) $criteria->add(RengCobPeer::MONTO_RETEN, $this->monto_reten);
		if ($this->isColumnModified(RengCobPeer::IMP_PAGO)) $criteria->add(RengCobPeer::IMP_PAGO, $this->imp_pago);
		if ($this->isColumnModified(RengCobPeer::MONTO_OBJ)) $criteria->add(RengCobPeer::MONTO_OBJ, $this->monto_obj);
		if ($this->isColumnModified(RengCobPeer::ISV)) $criteria->add(RengCobPeer::ISV, $this->isv);
		if ($this->isColumnModified(RengCobPeer::NRO_FACT)) $criteria->add(RengCobPeer::NRO_FACT, $this->nro_fact);
		if ($this->isColumnModified(RengCobPeer::MONEDA)) $criteria->add(RengCobPeer::MONEDA, $this->moneda);
		if ($this->isColumnModified(RengCobPeer::TASA)) $criteria->add(RengCobPeer::TASA, $this->tasa);
		if ($this->isColumnModified(RengCobPeer::NUMCON)) $criteria->add(RengCobPeer::NUMCON, $this->numcon);
		if ($this->isColumnModified(RengCobPeer::SUSTRAEN)) $criteria->add(RengCobPeer::SUSTRAEN, $this->sustraen);
		if ($this->isColumnModified(RengCobPeer::ROWGUID)) $criteria->add(RengCobPeer::ROWGUID, $this->rowguid);
		if ($this->isColumnModified(RengCobPeer::CO_ISLR)) $criteria->add(RengCobPeer::CO_ISLR, $this->co_islr);
		if ($this->isColumnModified(RengCobPeer::FEC_EMIS)) $criteria->add(RengCobPeer::FEC_EMIS, $this->fec_emis);
		if ($this->isColumnModified(RengCobPeer::FEC_VENC)) $criteria->add(RengCobPeer::FEC_VENC, $this->fec_venc);
		if ($this->isColumnModified(RengCobPeer::COMIS5)) $criteria->add(RengCobPeer::COMIS5, $this->comis5);
		if ($this->isColumnModified(RengCobPeer::COMIS6)) $criteria->add(RengCobPeer::COMIS6, $this->comis6);
		if ($this->isColumnModified(RengCobPeer::FACT_IVA)) $criteria->add(RengCobPeer::FACT_IVA, $this->fact_iva);
		if ($this->isColumnModified(RengCobPeer::RET_IVA)) $criteria->add(RengCobPeer::RET_IVA, $this->ret_iva);
		if ($this->isColumnModified(RengCobPeer::PORC_RETN)) $criteria->add(RengCobPeer::PORC_RETN, $this->porc_retn);
		if ($this->isColumnModified(RengCobPeer::PORC_DESC)) $criteria->add(RengCobPeer::PORC_DESC, $this->porc_desc);
		if ($this->isColumnModified(RengCobPeer::AUX01)) $criteria->add(RengCobPeer::AUX01, $this->aux01);
		if ($this->isColumnModified(RengCobPeer::AUX02)) $criteria->add(RengCobPeer::AUX02, $this->aux02);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RengCobPeer::DATABASE_NAME);

		$criteria->add(RengCobPeer::COB_NUM, $this->cob_num);
		$criteria->add(RengCobPeer::RENG_NUM, $this->reng_num);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getCobNum();

		$pks[1] = $this->getRengNum();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setCobNum($keys[0]);

		$this->setRengNum($keys[1]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RengCob (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCobNum($this->cob_num);

		$copyObj->setRengNum($this->reng_num);

		$copyObj->setTpDocCob($this->tp_doc_cob);

		$copyObj->setDocNum($this->doc_num);

		$copyObj->setNeto($this->neto);

		$copyObj->setNetoTmp($this->neto_tmp);

		$copyObj->setDppago($this->dppago);

		$copyObj->setDppagoTmp($this->dppago_tmp);

		$copyObj->setRengNcr($this->reng_ncr);

		$copyObj->setCoVen($this->co_ven);

		$copyObj->setComis1($this->comis1);

		$copyObj->setComis2($this->comis2);

		$copyObj->setComis3($this->comis3);

		$copyObj->setComis4($this->comis4);

		$copyObj->setSignAjuC($this->sign_aju_c);

		$copyObj->setPorcAjuC($this->porc_aju_c);

		$copyObj->setPorCob($this->por_cob);

		$copyObj->setComiCob($this->comi_cob);

		$copyObj->setMontCob($this->mont_cob);

		$copyObj->setSinoPago($this->sino_pago);

		$copyObj->setSinoReten($this->sino_reten);

		$copyObj->setMontoDppago($this->monto_dppago);

		$copyObj->setMontoReten($this->monto_reten);

		$copyObj->setImpPago($this->imp_pago);

		$copyObj->setMontoObj($this->monto_obj);

		$copyObj->setIsv($this->isv);

		$copyObj->setNroFact($this->nro_fact);

		$copyObj->setMoneda($this->moneda);

		$copyObj->setTasa($this->tasa);

		$copyObj->setNumcon($this->numcon);

		$copyObj->setSustraen($this->sustraen);

		$copyObj->setRowguid($this->rowguid);

		$copyObj->setCoIslr($this->co_islr);

		$copyObj->setFecEmis($this->fec_emis);

		$copyObj->setFecVenc($this->fec_venc);

		$copyObj->setComis5($this->comis5);

		$copyObj->setComis6($this->comis6);

		$copyObj->setFactIva($this->fact_iva);

		$copyObj->setRetIva($this->ret_iva);

		$copyObj->setPorcRetn($this->porc_retn);

		$copyObj->setPorcDesc($this->porc_desc);

		$copyObj->setAux01($this->aux01);

		$copyObj->setAux02($this->aux02);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RengCob Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RengCobPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RengCobPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRengCob:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRengCob::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRengCob
