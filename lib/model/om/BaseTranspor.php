<?php

/**
 * Base class that represents a row from the 'transpor' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 01:04:00 2009
 *
 * @package    lib.model.om
 */
abstract class BaseTranspor extends BaseObject  implements Persistent {


  const PEER = 'TransporPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TransporPeer
	 */
	protected static $peer;

	/**
	 * The value for the co_tran field.
	 * @var        string
	 */
	protected $co_tran;

	/**
	 * The value for the des_tran field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $des_tran;

	/**
	 * The value for the resp_tra field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $resp_tra;

	/**
	 * The value for the campo1 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo1;

	/**
	 * The value for the campo2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo2;

	/**
	 * The value for the campo3 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo3;

	/**
	 * The value for the campo4 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo4;

	/**
	 * The value for the dis_cen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $dis_cen;

	/**
	 * The value for the co_us_in field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_in;

	/**
	 * The value for the fe_us_in field.
	 * @var        string
	 */
	protected $fe_us_in;

	/**
	 * The value for the co_us_mo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_mo;

	/**
	 * The value for the fe_us_mo field.
	 * @var        string
	 */
	protected $fe_us_mo;

	/**
	 * The value for the co_us_el field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_el;

	/**
	 * The value for the fe_us_el field.
	 * @var        string
	 */
	protected $fe_us_el;

	/**
	 * The value for the revisado field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $revisado;

	/**
	 * The value for the trasnfe field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $trasnfe;

	/**
	 * The value for the co_sucu field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_sucu;

	/**
	 * The value for the rowguid field.
	 * Note: this column has a database default value of: '(newid())'
	 * @var        string
	 */
	protected $rowguid;

	/**
	 * @var        array Factura[] Collection to store aggregation of Factura objects.
	 */
	protected $collFacturas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFacturas.
	 */
	private $lastFacturaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseTranspor object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->des_tran = ' ';
		$this->resp_tra = ' ';
		$this->campo1 = ' ';
		$this->campo2 = ' ';
		$this->campo3 = ' ';
		$this->campo4 = ' ';
		$this->dis_cen = ' ';
		$this->co_us_in = ' ';
		$this->co_us_mo = ' ';
		$this->co_us_el = ' ';
		$this->revisado = ' ';
		$this->trasnfe = ' ';
		$this->co_sucu = ' ';
		$this->rowguid = '(newid())';
	}

	/**
	 * Get the [co_tran] column value.
	 * 
	 * @return     string
	 */
	public function getCoTran()
	{
		return $this->co_tran;
	}

	/**
	 * Get the [des_tran] column value.
	 * 
	 * @return     string
	 */
	public function getDesTran()
	{
		return $this->des_tran;
	}

	/**
	 * Get the [resp_tra] column value.
	 * 
	 * @return     string
	 */
	public function getRespTra()
	{
		return $this->resp_tra;
	}

	/**
	 * Get the [campo1] column value.
	 * 
	 * @return     string
	 */
	public function getCampo1()
	{
		return $this->campo1;
	}

	/**
	 * Get the [campo2] column value.
	 * 
	 * @return     string
	 */
	public function getCampo2()
	{
		return $this->campo2;
	}

	/**
	 * Get the [campo3] column value.
	 * 
	 * @return     string
	 */
	public function getCampo3()
	{
		return $this->campo3;
	}

	/**
	 * Get the [campo4] column value.
	 * 
	 * @return     string
	 */
	public function getCampo4()
	{
		return $this->campo4;
	}

	/**
	 * Get the [dis_cen] column value.
	 * 
	 * @return     string
	 */
	public function getDisCen()
	{
		return $this->dis_cen;
	}

	/**
	 * Get the [co_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsIn()
	{
		return $this->co_us_in;
	}

	/**
	 * Get the [fe_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsIn()
	{
		return $this->fe_us_in;
	}

	/**
	 * Get the [co_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsMo()
	{
		return $this->co_us_mo;
	}

	/**
	 * Get the [fe_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsMo()
	{
		return $this->fe_us_mo;
	}

	/**
	 * Get the [co_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsEl()
	{
		return $this->co_us_el;
	}

	/**
	 * Get the [fe_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsEl()
	{
		return $this->fe_us_el;
	}

	/**
	 * Get the [revisado] column value.
	 * 
	 * @return     string
	 */
	public function getRevisado()
	{
		return $this->revisado;
	}

	/**
	 * Get the [trasnfe] column value.
	 * 
	 * @return     string
	 */
	public function getTrasnfe()
	{
		return $this->trasnfe;
	}

	/**
	 * Get the [co_sucu] column value.
	 * 
	 * @return     string
	 */
	public function getCoSucu()
	{
		return $this->co_sucu;
	}

	/**
	 * Get the [rowguid] column value.
	 * 
	 * @return     string
	 */
	public function getRowguid()
	{
		return $this->rowguid;
	}

	/**
	 * Set the value of [co_tran] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCoTran($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_tran !== $v) {
			$this->co_tran = $v;
			$this->modifiedColumns[] = TransporPeer::CO_TRAN;
		}

		return $this;
	} // setCoTran()

	/**
	 * Set the value of [des_tran] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setDesTran($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->des_tran !== $v || $v === ' ') {
			$this->des_tran = $v;
			$this->modifiedColumns[] = TransporPeer::DES_TRAN;
		}

		return $this;
	} // setDesTran()

	/**
	 * Set the value of [resp_tra] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setRespTra($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->resp_tra !== $v || $v === ' ') {
			$this->resp_tra = $v;
			$this->modifiedColumns[] = TransporPeer::RESP_TRA;
		}

		return $this;
	} // setRespTra()

	/**
	 * Set the value of [campo1] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCampo1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo1 !== $v || $v === ' ') {
			$this->campo1 = $v;
			$this->modifiedColumns[] = TransporPeer::CAMPO1;
		}

		return $this;
	} // setCampo1()

	/**
	 * Set the value of [campo2] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCampo2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo2 !== $v || $v === ' ') {
			$this->campo2 = $v;
			$this->modifiedColumns[] = TransporPeer::CAMPO2;
		}

		return $this;
	} // setCampo2()

	/**
	 * Set the value of [campo3] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCampo3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo3 !== $v || $v === ' ') {
			$this->campo3 = $v;
			$this->modifiedColumns[] = TransporPeer::CAMPO3;
		}

		return $this;
	} // setCampo3()

	/**
	 * Set the value of [campo4] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCampo4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo4 !== $v || $v === ' ') {
			$this->campo4 = $v;
			$this->modifiedColumns[] = TransporPeer::CAMPO4;
		}

		return $this;
	} // setCampo4()

	/**
	 * Set the value of [dis_cen] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setDisCen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dis_cen !== $v || $v === ' ') {
			$this->dis_cen = $v;
			$this->modifiedColumns[] = TransporPeer::DIS_CEN;
		}

		return $this;
	} // setDisCen()

	/**
	 * Set the value of [co_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCoUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_in !== $v || $v === ' ') {
			$this->co_us_in = $v;
			$this->modifiedColumns[] = TransporPeer::CO_US_IN;
		}

		return $this;
	} // setCoUsIn()

	/**
	 * Set the value of [fe_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setFeUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_in !== $v) {
			$this->fe_us_in = $v;
			$this->modifiedColumns[] = TransporPeer::FE_US_IN;
		}

		return $this;
	} // setFeUsIn()

	/**
	 * Set the value of [co_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCoUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_mo !== $v || $v === ' ') {
			$this->co_us_mo = $v;
			$this->modifiedColumns[] = TransporPeer::CO_US_MO;
		}

		return $this;
	} // setCoUsMo()

	/**
	 * Set the value of [fe_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setFeUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_mo !== $v) {
			$this->fe_us_mo = $v;
			$this->modifiedColumns[] = TransporPeer::FE_US_MO;
		}

		return $this;
	} // setFeUsMo()

	/**
	 * Set the value of [co_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCoUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_el !== $v || $v === ' ') {
			$this->co_us_el = $v;
			$this->modifiedColumns[] = TransporPeer::CO_US_EL;
		}

		return $this;
	} // setCoUsEl()

	/**
	 * Set the value of [fe_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setFeUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_el !== $v) {
			$this->fe_us_el = $v;
			$this->modifiedColumns[] = TransporPeer::FE_US_EL;
		}

		return $this;
	} // setFeUsEl()

	/**
	 * Set the value of [revisado] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setRevisado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->revisado !== $v || $v === ' ') {
			$this->revisado = $v;
			$this->modifiedColumns[] = TransporPeer::REVISADO;
		}

		return $this;
	} // setRevisado()

	/**
	 * Set the value of [trasnfe] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setTrasnfe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->trasnfe !== $v || $v === ' ') {
			$this->trasnfe = $v;
			$this->modifiedColumns[] = TransporPeer::TRASNFE;
		}

		return $this;
	} // setTrasnfe()

	/**
	 * Set the value of [co_sucu] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setCoSucu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_sucu !== $v || $v === ' ') {
			$this->co_sucu = $v;
			$this->modifiedColumns[] = TransporPeer::CO_SUCU;
		}

		return $this;
	} // setCoSucu()

	/**
	 * Set the value of [rowguid] column.
	 * 
	 * @param      string $v new value
	 * @return     Transpor The current object (for fluent API support)
	 */
	public function setRowguid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowguid !== $v || $v === '(newid())') {
			$this->rowguid = $v;
			$this->modifiedColumns[] = TransporPeer::ROWGUID;
		}

		return $this;
	} // setRowguid()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(TransporPeer::DES_TRAN,TransporPeer::RESP_TRA,TransporPeer::CAMPO1,TransporPeer::CAMPO2,TransporPeer::CAMPO3,TransporPeer::CAMPO4,TransporPeer::DIS_CEN,TransporPeer::CO_US_IN,TransporPeer::CO_US_MO,TransporPeer::CO_US_EL,TransporPeer::REVISADO,TransporPeer::TRASNFE,TransporPeer::CO_SUCU,TransporPeer::ROWGUID))) {
				return false;
			}

			if ($this->des_tran !== ' ') {
				return false;
			}

			if ($this->resp_tra !== ' ') {
				return false;
			}

			if ($this->campo1 !== ' ') {
				return false;
			}

			if ($this->campo2 !== ' ') {
				return false;
			}

			if ($this->campo3 !== ' ') {
				return false;
			}

			if ($this->campo4 !== ' ') {
				return false;
			}

			if ($this->dis_cen !== ' ') {
				return false;
			}

			if ($this->co_us_in !== ' ') {
				return false;
			}

			if ($this->co_us_mo !== ' ') {
				return false;
			}

			if ($this->co_us_el !== ' ') {
				return false;
			}

			if ($this->revisado !== ' ') {
				return false;
			}

			if ($this->trasnfe !== ' ') {
				return false;
			}

			if ($this->co_sucu !== ' ') {
				return false;
			}

			if ($this->rowguid !== '(newid())') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_tran = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->des_tran = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->resp_tra = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->campo1 = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->campo2 = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->campo3 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->campo4 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->dis_cen = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->co_us_in = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->fe_us_in = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->co_us_mo = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->fe_us_mo = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->co_us_el = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->fe_us_el = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->revisado = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->trasnfe = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->co_sucu = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->rowguid = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 18; // 18 = TransporPeer::NUM_COLUMNS - TransporPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Transpor object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TransporPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TransporPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collFacturas = null;
			$this->lastFacturaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseTranspor:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TransporPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			TransporPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseTranspor:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseTranspor:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TransporPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseTranspor:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			TransporPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TransporPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += TransporPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collFacturas !== null) {
				foreach ($this->collFacturas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = TransporPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collFacturas !== null) {
					foreach ($this->collFacturas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TransporPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoTran();
				break;
			case 1:
				return $this->getDesTran();
				break;
			case 2:
				return $this->getRespTra();
				break;
			case 3:
				return $this->getCampo1();
				break;
			case 4:
				return $this->getCampo2();
				break;
			case 5:
				return $this->getCampo3();
				break;
			case 6:
				return $this->getCampo4();
				break;
			case 7:
				return $this->getDisCen();
				break;
			case 8:
				return $this->getCoUsIn();
				break;
			case 9:
				return $this->getFeUsIn();
				break;
			case 10:
				return $this->getCoUsMo();
				break;
			case 11:
				return $this->getFeUsMo();
				break;
			case 12:
				return $this->getCoUsEl();
				break;
			case 13:
				return $this->getFeUsEl();
				break;
			case 14:
				return $this->getRevisado();
				break;
			case 15:
				return $this->getTrasnfe();
				break;
			case 16:
				return $this->getCoSucu();
				break;
			case 17:
				return $this->getRowguid();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TransporPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoTran(),
			$keys[1] => $this->getDesTran(),
			$keys[2] => $this->getRespTra(),
			$keys[3] => $this->getCampo1(),
			$keys[4] => $this->getCampo2(),
			$keys[5] => $this->getCampo3(),
			$keys[6] => $this->getCampo4(),
			$keys[7] => $this->getDisCen(),
			$keys[8] => $this->getCoUsIn(),
			$keys[9] => $this->getFeUsIn(),
			$keys[10] => $this->getCoUsMo(),
			$keys[11] => $this->getFeUsMo(),
			$keys[12] => $this->getCoUsEl(),
			$keys[13] => $this->getFeUsEl(),
			$keys[14] => $this->getRevisado(),
			$keys[15] => $this->getTrasnfe(),
			$keys[16] => $this->getCoSucu(),
			$keys[17] => $this->getRowguid(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TransporPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoTran($value);
				break;
			case 1:
				$this->setDesTran($value);
				break;
			case 2:
				$this->setRespTra($value);
				break;
			case 3:
				$this->setCampo1($value);
				break;
			case 4:
				$this->setCampo2($value);
				break;
			case 5:
				$this->setCampo3($value);
				break;
			case 6:
				$this->setCampo4($value);
				break;
			case 7:
				$this->setDisCen($value);
				break;
			case 8:
				$this->setCoUsIn($value);
				break;
			case 9:
				$this->setFeUsIn($value);
				break;
			case 10:
				$this->setCoUsMo($value);
				break;
			case 11:
				$this->setFeUsMo($value);
				break;
			case 12:
				$this->setCoUsEl($value);
				break;
			case 13:
				$this->setFeUsEl($value);
				break;
			case 14:
				$this->setRevisado($value);
				break;
			case 15:
				$this->setTrasnfe($value);
				break;
			case 16:
				$this->setCoSucu($value);
				break;
			case 17:
				$this->setRowguid($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TransporPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoTran($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDesTran($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setRespTra($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCampo1($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCampo2($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCampo3($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCampo4($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDisCen($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCoUsIn($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setFeUsIn($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCoUsMo($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFeUsMo($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCoUsEl($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setFeUsEl($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setRevisado($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTrasnfe($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCoSucu($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setRowguid($arr[$keys[17]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TransporPeer::DATABASE_NAME);

		if ($this->isColumnModified(TransporPeer::CO_TRAN)) $criteria->add(TransporPeer::CO_TRAN, $this->co_tran);
		if ($this->isColumnModified(TransporPeer::DES_TRAN)) $criteria->add(TransporPeer::DES_TRAN, $this->des_tran);
		if ($this->isColumnModified(TransporPeer::RESP_TRA)) $criteria->add(TransporPeer::RESP_TRA, $this->resp_tra);
		if ($this->isColumnModified(TransporPeer::CAMPO1)) $criteria->add(TransporPeer::CAMPO1, $this->campo1);
		if ($this->isColumnModified(TransporPeer::CAMPO2)) $criteria->add(TransporPeer::CAMPO2, $this->campo2);
		if ($this->isColumnModified(TransporPeer::CAMPO3)) $criteria->add(TransporPeer::CAMPO3, $this->campo3);
		if ($this->isColumnModified(TransporPeer::CAMPO4)) $criteria->add(TransporPeer::CAMPO4, $this->campo4);
		if ($this->isColumnModified(TransporPeer::DIS_CEN)) $criteria->add(TransporPeer::DIS_CEN, $this->dis_cen);
		if ($this->isColumnModified(TransporPeer::CO_US_IN)) $criteria->add(TransporPeer::CO_US_IN, $this->co_us_in);
		if ($this->isColumnModified(TransporPeer::FE_US_IN)) $criteria->add(TransporPeer::FE_US_IN, $this->fe_us_in);
		if ($this->isColumnModified(TransporPeer::CO_US_MO)) $criteria->add(TransporPeer::CO_US_MO, $this->co_us_mo);
		if ($this->isColumnModified(TransporPeer::FE_US_MO)) $criteria->add(TransporPeer::FE_US_MO, $this->fe_us_mo);
		if ($this->isColumnModified(TransporPeer::CO_US_EL)) $criteria->add(TransporPeer::CO_US_EL, $this->co_us_el);
		if ($this->isColumnModified(TransporPeer::FE_US_EL)) $criteria->add(TransporPeer::FE_US_EL, $this->fe_us_el);
		if ($this->isColumnModified(TransporPeer::REVISADO)) $criteria->add(TransporPeer::REVISADO, $this->revisado);
		if ($this->isColumnModified(TransporPeer::TRASNFE)) $criteria->add(TransporPeer::TRASNFE, $this->trasnfe);
		if ($this->isColumnModified(TransporPeer::CO_SUCU)) $criteria->add(TransporPeer::CO_SUCU, $this->co_sucu);
		if ($this->isColumnModified(TransporPeer::ROWGUID)) $criteria->add(TransporPeer::ROWGUID, $this->rowguid);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TransporPeer::DATABASE_NAME);

		$criteria->add(TransporPeer::CO_TRAN, $this->co_tran);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCoTran();
	}

	/**
	 * Generic method to set the primary key (co_tran column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCoTran($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Transpor (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCoTran($this->co_tran);

		$copyObj->setDesTran($this->des_tran);

		$copyObj->setRespTra($this->resp_tra);

		$copyObj->setCampo1($this->campo1);

		$copyObj->setCampo2($this->campo2);

		$copyObj->setCampo3($this->campo3);

		$copyObj->setCampo4($this->campo4);

		$copyObj->setDisCen($this->dis_cen);

		$copyObj->setCoUsIn($this->co_us_in);

		$copyObj->setFeUsIn($this->fe_us_in);

		$copyObj->setCoUsMo($this->co_us_mo);

		$copyObj->setFeUsMo($this->fe_us_mo);

		$copyObj->setCoUsEl($this->co_us_el);

		$copyObj->setFeUsEl($this->fe_us_el);

		$copyObj->setRevisado($this->revisado);

		$copyObj->setTrasnfe($this->trasnfe);

		$copyObj->setCoSucu($this->co_sucu);

		$copyObj->setRowguid($this->rowguid);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getFacturas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFactura($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Transpor Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TransporPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TransporPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collFacturas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFacturas()
	 */
	public function clearFacturas()
	{
		$this->collFacturas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFacturas collection (array).
	 *
	 * By default this just sets the collFacturas collection to an empty array (like clearcollFacturas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFacturas()
	{
		$this->collFacturas = array();
	}

	/**
	 * Gets an array of Factura objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Transpor has previously been saved, it will retrieve
	 * related Facturas from storage. If this Transpor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Factura[]
	 * @throws     PropelException
	 */
	public function getFacturas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TransporPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
			   $this->collFacturas = array();
			} else {

				$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

				FacturaPeer::addSelectColumns($criteria);
				$this->collFacturas = FacturaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

				FacturaPeer::addSelectColumns($criteria);
				if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
					$this->collFacturas = FacturaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFacturaCriteria = $criteria;
		return $this->collFacturas;
	}

	/**
	 * Returns the number of related Factura objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Factura objects.
	 * @throws     PropelException
	 */
	public function countFacturas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TransporPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

				$count = FacturaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

				if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
					$count = FacturaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collFacturas);
				}
			} else {
				$count = count($this->collFacturas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Factura object to this object
	 * through the Factura foreign key attribute.
	 *
	 * @param      Factura $l Factura
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFactura(Factura $l)
	{
		if ($this->collFacturas === null) {
			$this->initFacturas();
		}
		if (!in_array($l, $this->collFacturas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFacturas, $l);
			$l->setTranspor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Transpor is new, it will return
	 * an empty collection; or if this Transpor has previously
	 * been saved, it will retrieve related Facturas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Transpor.
	 */
	public function getFacturasJoinClientes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TransporPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
				$this->collFacturas = array();
			} else {

				$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

				$this->collFacturas = FacturaPeer::doSelectJoinClientes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

			if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
				$this->collFacturas = FacturaPeer::doSelectJoinClientes($criteria, $con, $join_behavior);
			}
		}
		$this->lastFacturaCriteria = $criteria;

		return $this->collFacturas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Transpor is new, it will return
	 * an empty collection; or if this Transpor has previously
	 * been saved, it will retrieve related Facturas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Transpor.
	 */
	public function getFacturasJoinVendedor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TransporPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
				$this->collFacturas = array();
			} else {

				$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

				$this->collFacturas = FacturaPeer::doSelectJoinVendedor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

			if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
				$this->collFacturas = FacturaPeer::doSelectJoinVendedor($criteria, $con, $join_behavior);
			}
		}
		$this->lastFacturaCriteria = $criteria;

		return $this->collFacturas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Transpor is new, it will return
	 * an empty collection; or if this Transpor has previously
	 * been saved, it will retrieve related Facturas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Transpor.
	 */
	public function getFacturasJoinCondicio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TransporPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturas === null) {
			if ($this->isNew()) {
				$this->collFacturas = array();
			} else {

				$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

				$this->collFacturas = FacturaPeer::doSelectJoinCondicio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);

			if (!isset($this->lastFacturaCriteria) || !$this->lastFacturaCriteria->equals($criteria)) {
				$this->collFacturas = FacturaPeer::doSelectJoinCondicio($criteria, $con, $join_behavior);
			}
		}
		$this->lastFacturaCriteria = $criteria;

		return $this->collFacturas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collFacturas) {
				foreach ((array) $this->collFacturas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collFacturas = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseTranspor:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseTranspor::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseTranspor
