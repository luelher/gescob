<?php

/**
 * Base class that represents a row from the 'prov' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Mon Jan  4 23:40:38 2010
 *
 * @package    lib.model.profit.om
 */
abstract class BaseProv extends BaseObject  implements Persistent {


  const PEER = 'ProvPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProvPeer
	 */
	protected static $peer;

	/**
	 * The value for the co_prov field.
	 * @var        string
	 */
	protected $co_prov;

	/**
	 * The value for the prov_des field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $prov_des;

	/**
	 * The value for the co_seg field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_seg;

	/**
	 * The value for the co_zon field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_zon;

	/**
	 * The value for the inactivo field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $inactivo;

	/**
	 * The value for the productos field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $productos;

	/**
	 * The value for the direc1 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $direc1;

	/**
	 * The value for the direc2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $direc2;

	/**
	 * The value for the telefonos field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $telefonos;

	/**
	 * The value for the fax field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the respons field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $respons;

	/**
	 * The value for the fecha_reg field.
	 * @var        string
	 */
	protected $fecha_reg;

	/**
	 * The value for the tipo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tipo;

	/**
	 * The value for the com_ult_co field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $com_ult_co;

	/**
	 * The value for the fec_ult_co field.
	 * @var        string
	 */
	protected $fec_ult_co;

	/**
	 * The value for the net_ult_co field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $net_ult_co;

	/**
	 * The value for the saldo field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $saldo;

	/**
	 * The value for the saldo_ini field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $saldo_ini;

	/**
	 * The value for the mont_cre field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $mont_cre;

	/**
	 * The value for the plaz_pag field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $plaz_pag;

	/**
	 * The value for the desc_ppago field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $desc_ppago;

	/**
	 * The value for the desc_glob field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $desc_glob;

	/**
	 * The value for the tipo_iva field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tipo_iva;

	/**
	 * The value for the iva field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $iva;

	/**
	 * The value for the rif field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $rif;

	/**
	 * The value for the nacional field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $nacional;

	/**
	 * The value for the dis_cen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $dis_cen;

	/**
	 * The value for the nit field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $nit;

	/**
	 * The value for the email field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the co_ingr field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_ingr;

	/**
	 * The value for the comentario field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $comentario;

	/**
	 * The value for the campo1 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo1;

	/**
	 * The value for the campo2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo2;

	/**
	 * The value for the campo3 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo3;

	/**
	 * The value for the campo4 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo4;

	/**
	 * The value for the campo5 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo5;

	/**
	 * The value for the campo6 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo6;

	/**
	 * The value for the campo7 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo7;

	/**
	 * The value for the campo8 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo8;

	/**
	 * The value for the co_us_in field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_in;

	/**
	 * The value for the fe_us_in field.
	 * @var        string
	 */
	protected $fe_us_in;

	/**
	 * The value for the co_us_mo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_mo;

	/**
	 * The value for the fe_us_mo field.
	 * @var        string
	 */
	protected $fe_us_mo;

	/**
	 * The value for the co_us_el field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_el;

	/**
	 * The value for the fe_us_el field.
	 * @var        string
	 */
	protected $fe_us_el;

	/**
	 * The value for the revisado field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $revisado;

	/**
	 * The value for the trasnfe field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $trasnfe;

	/**
	 * The value for the co_sucu field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_sucu;

	/**
	 * The value for the rowguid field.
	 * Note: this column has a database default value of: '(newid())'
	 * @var        string
	 */
	protected $rowguid;

	/**
	 * The value for the juridico field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $juridico;

	/**
	 * The value for the tipo_adi field.
	 * Note: this column has a database default value of: '1'
	 * @var        string
	 */
	protected $tipo_adi;

	/**
	 * The value for the matriz field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $matriz;

	/**
	 * The value for the co_tab field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $co_tab;

	/**
	 * The value for the tipo_per field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tipo_per;

	/**
	 * The value for the co_pais field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_pais;

	/**
	 * The value for the ciudad field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $ciudad;

	/**
	 * The value for the zip field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $zip;

	/**
	 * The value for the website field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $website;

	/**
	 * The value for the formtype field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $formtype;

	/**
	 * The value for the taxid field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $taxid;

	/**
	 * The value for the contribu_e field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $contribu_e;

	/**
	 * The value for the porc_esp field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $porc_esp;

	/**
	 * @var        Segmento
	 */
	protected $aSegmento;

	/**
	 * @var        Zona
	 */
	protected $aZona;

	/**
	 * @var        TipoPro
	 */
	protected $aTipoPro;

	/**
	 * @var        CtaIngr
	 */
	protected $aCtaIngr;

	/**
	 * @var        array Art[] Collection to store aggregation of Art objects.
	 */
	protected $collArts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collArts.
	 */
	private $lastArtCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseProv object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->prov_des = ' ';
		$this->co_seg = ' ';
		$this->co_zon = ' ';
		$this->inactivo = false;
		$this->productos = ' ';
		$this->direc1 = ' ';
		$this->direc2 = ' ';
		$this->telefonos = ' ';
		$this->fax = ' ';
		$this->respons = ' ';
		$this->tipo = ' ';
		$this->com_ult_co = 0;
		$this->net_ult_co = '0';
		$this->saldo = '0';
		$this->saldo_ini = '0';
		$this->mont_cre = '0';
		$this->plaz_pag = 0;
		$this->desc_ppago = '0';
		$this->desc_glob = '0';
		$this->tipo_iva = ' ';
		$this->iva = '0';
		$this->rif = ' ';
		$this->nacional = false;
		$this->dis_cen = ' ';
		$this->nit = ' ';
		$this->email = ' ';
		$this->co_ingr = ' ';
		$this->comentario = ' ';
		$this->campo1 = ' ';
		$this->campo2 = ' ';
		$this->campo3 = ' ';
		$this->campo4 = ' ';
		$this->campo5 = ' ';
		$this->campo6 = ' ';
		$this->campo7 = ' ';
		$this->campo8 = ' ';
		$this->co_us_in = ' ';
		$this->co_us_mo = ' ';
		$this->co_us_el = ' ';
		$this->revisado = ' ';
		$this->trasnfe = ' ';
		$this->co_sucu = ' ';
		$this->rowguid = '(newid())';
		$this->juridico = false;
		$this->tipo_adi = '1';
		$this->matriz = ' ';
		$this->co_tab = 0;
		$this->tipo_per = ' ';
		$this->co_pais = ' ';
		$this->ciudad = ' ';
		$this->zip = ' ';
		$this->website = ' ';
		$this->formtype = ' ';
		$this->taxid = ' ';
		$this->contribu_e = false;
		$this->porc_esp = 0;
	}

	/**
	 * Get the [co_prov] column value.
	 * 
	 * @return     string
	 */
	public function getCoProv()
	{
		return $this->co_prov;
	}

	/**
	 * Get the [prov_des] column value.
	 * 
	 * @return     string
	 */
	public function getProvDes()
	{
		return $this->prov_des;
	}

	/**
	 * Get the [co_seg] column value.
	 * 
	 * @return     string
	 */
	public function getCoSeg()
	{
		return $this->co_seg;
	}

	/**
	 * Get the [co_zon] column value.
	 * 
	 * @return     string
	 */
	public function getCoZon()
	{
		return $this->co_zon;
	}

	/**
	 * Get the [inactivo] column value.
	 * 
	 * @return     boolean
	 */
	public function getInactivo()
	{
		return $this->inactivo;
	}

	/**
	 * Get the [productos] column value.
	 * 
	 * @return     string
	 */
	public function getProductos()
	{
		return $this->productos;
	}

	/**
	 * Get the [direc1] column value.
	 * 
	 * @return     string
	 */
	public function getDirec1()
	{
		return $this->direc1;
	}

	/**
	 * Get the [direc2] column value.
	 * 
	 * @return     string
	 */
	public function getDirec2()
	{
		return $this->direc2;
	}

	/**
	 * Get the [telefonos] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonos()
	{
		return $this->telefonos;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [respons] column value.
	 * 
	 * @return     string
	 */
	public function getRespons()
	{
		return $this->respons;
	}

	/**
	 * Get the [fecha_reg] column value.
	 * 
	 * @return     string
	 */
	public function getFechaReg()
	{
		return $this->fecha_reg;
	}

	/**
	 * Get the [tipo] column value.
	 * 
	 * @return     string
	 */
	public function getTipo()
	{
		return $this->tipo;
	}

	/**
	 * Get the [com_ult_co] column value.
	 * 
	 * @return     int
	 */
	public function getComUltCo()
	{
		return $this->com_ult_co;
	}

	/**
	 * Get the [fec_ult_co] column value.
	 * 
	 * @return     string
	 */
	public function getFecUltCo()
	{
		return $this->fec_ult_co;
	}

	/**
	 * Get the [net_ult_co] column value.
	 * 
	 * @return     string
	 */
	public function getNetUltCo()
	{
		return $this->net_ult_co;
	}

	/**
	 * Get the [saldo] column value.
	 * 
	 * @return     string
	 */
	public function getSaldo()
	{
		return $this->saldo;
	}

	/**
	 * Get the [saldo_ini] column value.
	 * 
	 * @return     string
	 */
	public function getSaldoIni()
	{
		return $this->saldo_ini;
	}

	/**
	 * Get the [mont_cre] column value.
	 * 
	 * @return     string
	 */
	public function getMontCre()
	{
		return $this->mont_cre;
	}

	/**
	 * Get the [plaz_pag] column value.
	 * 
	 * @return     int
	 */
	public function getPlazPag()
	{
		return $this->plaz_pag;
	}

	/**
	 * Get the [desc_ppago] column value.
	 * 
	 * @return     string
	 */
	public function getDescPpago()
	{
		return $this->desc_ppago;
	}

	/**
	 * Get the [desc_glob] column value.
	 * 
	 * @return     string
	 */
	public function getDescGlob()
	{
		return $this->desc_glob;
	}

	/**
	 * Get the [tipo_iva] column value.
	 * 
	 * @return     string
	 */
	public function getTipoIva()
	{
		return $this->tipo_iva;
	}

	/**
	 * Get the [iva] column value.
	 * 
	 * @return     string
	 */
	public function getIva()
	{
		return $this->iva;
	}

	/**
	 * Get the [rif] column value.
	 * 
	 * @return     string
	 */
	public function getRif()
	{
		return $this->rif;
	}

	/**
	 * Get the [nacional] column value.
	 * 
	 * @return     boolean
	 */
	public function getNacional()
	{
		return $this->nacional;
	}

	/**
	 * Get the [dis_cen] column value.
	 * 
	 * @return     string
	 */
	public function getDisCen()
	{
		return $this->dis_cen;
	}

	/**
	 * Get the [nit] column value.
	 * 
	 * @return     string
	 */
	public function getNit()
	{
		return $this->nit;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [co_ingr] column value.
	 * 
	 * @return     string
	 */
	public function getCoIngr()
	{
		return $this->co_ingr;
	}

	/**
	 * Get the [comentario] column value.
	 * 
	 * @return     string
	 */
	public function getComentario()
	{
		return $this->comentario;
	}

	/**
	 * Get the [campo1] column value.
	 * 
	 * @return     string
	 */
	public function getCampo1()
	{
		return $this->campo1;
	}

	/**
	 * Get the [campo2] column value.
	 * 
	 * @return     string
	 */
	public function getCampo2()
	{
		return $this->campo2;
	}

	/**
	 * Get the [campo3] column value.
	 * 
	 * @return     string
	 */
	public function getCampo3()
	{
		return $this->campo3;
	}

	/**
	 * Get the [campo4] column value.
	 * 
	 * @return     string
	 */
	public function getCampo4()
	{
		return $this->campo4;
	}

	/**
	 * Get the [campo5] column value.
	 * 
	 * @return     string
	 */
	public function getCampo5()
	{
		return $this->campo5;
	}

	/**
	 * Get the [campo6] column value.
	 * 
	 * @return     string
	 */
	public function getCampo6()
	{
		return $this->campo6;
	}

	/**
	 * Get the [campo7] column value.
	 * 
	 * @return     string
	 */
	public function getCampo7()
	{
		return $this->campo7;
	}

	/**
	 * Get the [campo8] column value.
	 * 
	 * @return     string
	 */
	public function getCampo8()
	{
		return $this->campo8;
	}

	/**
	 * Get the [co_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsIn()
	{
		return $this->co_us_in;
	}

	/**
	 * Get the [fe_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsIn()
	{
		return $this->fe_us_in;
	}

	/**
	 * Get the [co_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsMo()
	{
		return $this->co_us_mo;
	}

	/**
	 * Get the [fe_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsMo()
	{
		return $this->fe_us_mo;
	}

	/**
	 * Get the [co_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsEl()
	{
		return $this->co_us_el;
	}

	/**
	 * Get the [fe_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsEl()
	{
		return $this->fe_us_el;
	}

	/**
	 * Get the [revisado] column value.
	 * 
	 * @return     string
	 */
	public function getRevisado()
	{
		return $this->revisado;
	}

	/**
	 * Get the [trasnfe] column value.
	 * 
	 * @return     string
	 */
	public function getTrasnfe()
	{
		return $this->trasnfe;
	}

	/**
	 * Get the [co_sucu] column value.
	 * 
	 * @return     string
	 */
	public function getCoSucu()
	{
		return $this->co_sucu;
	}

	/**
	 * Get the [rowguid] column value.
	 * 
	 * @return     string
	 */
	public function getRowguid()
	{
		return $this->rowguid;
	}

	/**
	 * Get the [juridico] column value.
	 * 
	 * @return     boolean
	 */
	public function getJuridico()
	{
		return $this->juridico;
	}

	/**
	 * Get the [tipo_adi] column value.
	 * 
	 * @return     string
	 */
	public function getTipoAdi()
	{
		return $this->tipo_adi;
	}

	/**
	 * Get the [matriz] column value.
	 * 
	 * @return     string
	 */
	public function getMatriz()
	{
		return $this->matriz;
	}

	/**
	 * Get the [co_tab] column value.
	 * 
	 * @return     int
	 */
	public function getCoTab()
	{
		return $this->co_tab;
	}

	/**
	 * Get the [tipo_per] column value.
	 * 
	 * @return     string
	 */
	public function getTipoPer()
	{
		return $this->tipo_per;
	}

	/**
	 * Get the [co_pais] column value.
	 * 
	 * @return     string
	 */
	public function getCoPais()
	{
		return $this->co_pais;
	}

	/**
	 * Get the [ciudad] column value.
	 * 
	 * @return     string
	 */
	public function getCiudad()
	{
		return $this->ciudad;
	}

	/**
	 * Get the [zip] column value.
	 * 
	 * @return     string
	 */
	public function getZip()
	{
		return $this->zip;
	}

	/**
	 * Get the [website] column value.
	 * 
	 * @return     string
	 */
	public function getWebsite()
	{
		return $this->website;
	}

	/**
	 * Get the [formtype] column value.
	 * 
	 * @return     string
	 */
	public function getFormtype()
	{
		return $this->formtype;
	}

	/**
	 * Get the [taxid] column value.
	 * 
	 * @return     string
	 */
	public function getTaxid()
	{
		return $this->taxid;
	}

	/**
	 * Get the [contribu_e] column value.
	 * 
	 * @return     boolean
	 */
	public function getContribuE()
	{
		return $this->contribu_e;
	}

	/**
	 * Get the [porc_esp] column value.
	 * 
	 * @return     double
	 */
	public function getPorcEsp()
	{
		return $this->porc_esp;
	}

	/**
	 * Set the value of [co_prov] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoProv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_prov !== $v) {
			$this->co_prov = $v;
			$this->modifiedColumns[] = ProvPeer::CO_PROV;
		}

		return $this;
	} // setCoProv()

	/**
	 * Set the value of [prov_des] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setProvDes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prov_des !== $v || $v === ' ') {
			$this->prov_des = $v;
			$this->modifiedColumns[] = ProvPeer::PROV_DES;
		}

		return $this;
	} // setProvDes()

	/**
	 * Set the value of [co_seg] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoSeg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_seg !== $v || $v === ' ') {
			$this->co_seg = $v;
			$this->modifiedColumns[] = ProvPeer::CO_SEG;
		}

		if ($this->aSegmento !== null && $this->aSegmento->getCoSeg() !== $v) {
			$this->aSegmento = null;
		}

		return $this;
	} // setCoSeg()

	/**
	 * Set the value of [co_zon] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoZon($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_zon !== $v || $v === ' ') {
			$this->co_zon = $v;
			$this->modifiedColumns[] = ProvPeer::CO_ZON;
		}

		if ($this->aZona !== null && $this->aZona->getCoZon() !== $v) {
			$this->aZona = null;
		}

		return $this;
	} // setCoZon()

	/**
	 * Set the value of [inactivo] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setInactivo($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->inactivo !== $v || $v === false) {
			$this->inactivo = $v;
			$this->modifiedColumns[] = ProvPeer::INACTIVO;
		}

		return $this;
	} // setInactivo()

	/**
	 * Set the value of [productos] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setProductos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->productos !== $v || $v === ' ') {
			$this->productos = $v;
			$this->modifiedColumns[] = ProvPeer::PRODUCTOS;
		}

		return $this;
	} // setProductos()

	/**
	 * Set the value of [direc1] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setDirec1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direc1 !== $v || $v === ' ') {
			$this->direc1 = $v;
			$this->modifiedColumns[] = ProvPeer::DIREC1;
		}

		return $this;
	} // setDirec1()

	/**
	 * Set the value of [direc2] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setDirec2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direc2 !== $v || $v === ' ') {
			$this->direc2 = $v;
			$this->modifiedColumns[] = ProvPeer::DIREC2;
		}

		return $this;
	} // setDirec2()

	/**
	 * Set the value of [telefonos] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setTelefonos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefonos !== $v || $v === ' ') {
			$this->telefonos = $v;
			$this->modifiedColumns[] = ProvPeer::TELEFONOS;
		}

		return $this;
	} // setTelefonos()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v || $v === ' ') {
			$this->fax = $v;
			$this->modifiedColumns[] = ProvPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [respons] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setRespons($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->respons !== $v || $v === ' ') {
			$this->respons = $v;
			$this->modifiedColumns[] = ProvPeer::RESPONS;
		}

		return $this;
	} // setRespons()

	/**
	 * Set the value of [fecha_reg] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setFechaReg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fecha_reg !== $v) {
			$this->fecha_reg = $v;
			$this->modifiedColumns[] = ProvPeer::FECHA_REG;
		}

		return $this;
	} // setFechaReg()

	/**
	 * Set the value of [tipo] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setTipo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo !== $v || $v === ' ') {
			$this->tipo = $v;
			$this->modifiedColumns[] = ProvPeer::TIPO;
		}

		if ($this->aTipoPro !== null && $this->aTipoPro->getTipPro() !== $v) {
			$this->aTipoPro = null;
		}

		return $this;
	} // setTipo()

	/**
	 * Set the value of [com_ult_co] column.
	 * 
	 * @param      int $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setComUltCo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->com_ult_co !== $v || $v === 0) {
			$this->com_ult_co = $v;
			$this->modifiedColumns[] = ProvPeer::COM_ULT_CO;
		}

		return $this;
	} // setComUltCo()

	/**
	 * Set the value of [fec_ult_co] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setFecUltCo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_ult_co !== $v) {
			$this->fec_ult_co = $v;
			$this->modifiedColumns[] = ProvPeer::FEC_ULT_CO;
		}

		return $this;
	} // setFecUltCo()

	/**
	 * Set the value of [net_ult_co] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setNetUltCo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->net_ult_co !== $v || $v === '0') {
			$this->net_ult_co = $v;
			$this->modifiedColumns[] = ProvPeer::NET_ULT_CO;
		}

		return $this;
	} // setNetUltCo()

	/**
	 * Set the value of [saldo] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setSaldo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->saldo !== $v || $v === '0') {
			$this->saldo = $v;
			$this->modifiedColumns[] = ProvPeer::SALDO;
		}

		return $this;
	} // setSaldo()

	/**
	 * Set the value of [saldo_ini] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setSaldoIni($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->saldo_ini !== $v || $v === '0') {
			$this->saldo_ini = $v;
			$this->modifiedColumns[] = ProvPeer::SALDO_INI;
		}

		return $this;
	} // setSaldoIni()

	/**
	 * Set the value of [mont_cre] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setMontCre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mont_cre !== $v || $v === '0') {
			$this->mont_cre = $v;
			$this->modifiedColumns[] = ProvPeer::MONT_CRE;
		}

		return $this;
	} // setMontCre()

	/**
	 * Set the value of [plaz_pag] column.
	 * 
	 * @param      int $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setPlazPag($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->plaz_pag !== $v || $v === 0) {
			$this->plaz_pag = $v;
			$this->modifiedColumns[] = ProvPeer::PLAZ_PAG;
		}

		return $this;
	} // setPlazPag()

	/**
	 * Set the value of [desc_ppago] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setDescPpago($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->desc_ppago !== $v || $v === '0') {
			$this->desc_ppago = $v;
			$this->modifiedColumns[] = ProvPeer::DESC_PPAGO;
		}

		return $this;
	} // setDescPpago()

	/**
	 * Set the value of [desc_glob] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setDescGlob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->desc_glob !== $v || $v === '0') {
			$this->desc_glob = $v;
			$this->modifiedColumns[] = ProvPeer::DESC_GLOB;
		}

		return $this;
	} // setDescGlob()

	/**
	 * Set the value of [tipo_iva] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setTipoIva($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_iva !== $v || $v === ' ') {
			$this->tipo_iva = $v;
			$this->modifiedColumns[] = ProvPeer::TIPO_IVA;
		}

		return $this;
	} // setTipoIva()

	/**
	 * Set the value of [iva] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setIva($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->iva !== $v || $v === '0') {
			$this->iva = $v;
			$this->modifiedColumns[] = ProvPeer::IVA;
		}

		return $this;
	} // setIva()

	/**
	 * Set the value of [rif] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setRif($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rif !== $v || $v === ' ') {
			$this->rif = $v;
			$this->modifiedColumns[] = ProvPeer::RIF;
		}

		return $this;
	} // setRif()

	/**
	 * Set the value of [nacional] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setNacional($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->nacional !== $v || $v === false) {
			$this->nacional = $v;
			$this->modifiedColumns[] = ProvPeer::NACIONAL;
		}

		return $this;
	} // setNacional()

	/**
	 * Set the value of [dis_cen] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setDisCen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dis_cen !== $v || $v === ' ') {
			$this->dis_cen = $v;
			$this->modifiedColumns[] = ProvPeer::DIS_CEN;
		}

		return $this;
	} // setDisCen()

	/**
	 * Set the value of [nit] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setNit($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nit !== $v || $v === ' ') {
			$this->nit = $v;
			$this->modifiedColumns[] = ProvPeer::NIT;
		}

		return $this;
	} // setNit()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v || $v === ' ') {
			$this->email = $v;
			$this->modifiedColumns[] = ProvPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [co_ingr] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoIngr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_ingr !== $v || $v === ' ') {
			$this->co_ingr = $v;
			$this->modifiedColumns[] = ProvPeer::CO_INGR;
		}

		if ($this->aCtaIngr !== null && $this->aCtaIngr->getCoIngr() !== $v) {
			$this->aCtaIngr = null;
		}

		return $this;
	} // setCoIngr()

	/**
	 * Set the value of [comentario] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setComentario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comentario !== $v || $v === ' ') {
			$this->comentario = $v;
			$this->modifiedColumns[] = ProvPeer::COMENTARIO;
		}

		return $this;
	} // setComentario()

	/**
	 * Set the value of [campo1] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCampo1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo1 !== $v || $v === ' ') {
			$this->campo1 = $v;
			$this->modifiedColumns[] = ProvPeer::CAMPO1;
		}

		return $this;
	} // setCampo1()

	/**
	 * Set the value of [campo2] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCampo2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo2 !== $v || $v === ' ') {
			$this->campo2 = $v;
			$this->modifiedColumns[] = ProvPeer::CAMPO2;
		}

		return $this;
	} // setCampo2()

	/**
	 * Set the value of [campo3] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCampo3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo3 !== $v || $v === ' ') {
			$this->campo3 = $v;
			$this->modifiedColumns[] = ProvPeer::CAMPO3;
		}

		return $this;
	} // setCampo3()

	/**
	 * Set the value of [campo4] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCampo4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo4 !== $v || $v === ' ') {
			$this->campo4 = $v;
			$this->modifiedColumns[] = ProvPeer::CAMPO4;
		}

		return $this;
	} // setCampo4()

	/**
	 * Set the value of [campo5] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCampo5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo5 !== $v || $v === ' ') {
			$this->campo5 = $v;
			$this->modifiedColumns[] = ProvPeer::CAMPO5;
		}

		return $this;
	} // setCampo5()

	/**
	 * Set the value of [campo6] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCampo6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo6 !== $v || $v === ' ') {
			$this->campo6 = $v;
			$this->modifiedColumns[] = ProvPeer::CAMPO6;
		}

		return $this;
	} // setCampo6()

	/**
	 * Set the value of [campo7] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCampo7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo7 !== $v || $v === ' ') {
			$this->campo7 = $v;
			$this->modifiedColumns[] = ProvPeer::CAMPO7;
		}

		return $this;
	} // setCampo7()

	/**
	 * Set the value of [campo8] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCampo8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo8 !== $v || $v === ' ') {
			$this->campo8 = $v;
			$this->modifiedColumns[] = ProvPeer::CAMPO8;
		}

		return $this;
	} // setCampo8()

	/**
	 * Set the value of [co_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_in !== $v || $v === ' ') {
			$this->co_us_in = $v;
			$this->modifiedColumns[] = ProvPeer::CO_US_IN;
		}

		return $this;
	} // setCoUsIn()

	/**
	 * Set the value of [fe_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setFeUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_in !== $v) {
			$this->fe_us_in = $v;
			$this->modifiedColumns[] = ProvPeer::FE_US_IN;
		}

		return $this;
	} // setFeUsIn()

	/**
	 * Set the value of [co_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_mo !== $v || $v === ' ') {
			$this->co_us_mo = $v;
			$this->modifiedColumns[] = ProvPeer::CO_US_MO;
		}

		return $this;
	} // setCoUsMo()

	/**
	 * Set the value of [fe_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setFeUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_mo !== $v) {
			$this->fe_us_mo = $v;
			$this->modifiedColumns[] = ProvPeer::FE_US_MO;
		}

		return $this;
	} // setFeUsMo()

	/**
	 * Set the value of [co_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_el !== $v || $v === ' ') {
			$this->co_us_el = $v;
			$this->modifiedColumns[] = ProvPeer::CO_US_EL;
		}

		return $this;
	} // setCoUsEl()

	/**
	 * Set the value of [fe_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setFeUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_el !== $v) {
			$this->fe_us_el = $v;
			$this->modifiedColumns[] = ProvPeer::FE_US_EL;
		}

		return $this;
	} // setFeUsEl()

	/**
	 * Set the value of [revisado] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setRevisado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->revisado !== $v || $v === ' ') {
			$this->revisado = $v;
			$this->modifiedColumns[] = ProvPeer::REVISADO;
		}

		return $this;
	} // setRevisado()

	/**
	 * Set the value of [trasnfe] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setTrasnfe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->trasnfe !== $v || $v === ' ') {
			$this->trasnfe = $v;
			$this->modifiedColumns[] = ProvPeer::TRASNFE;
		}

		return $this;
	} // setTrasnfe()

	/**
	 * Set the value of [co_sucu] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoSucu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_sucu !== $v || $v === ' ') {
			$this->co_sucu = $v;
			$this->modifiedColumns[] = ProvPeer::CO_SUCU;
		}

		return $this;
	} // setCoSucu()

	/**
	 * Set the value of [rowguid] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setRowguid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowguid !== $v || $v === '(newid())') {
			$this->rowguid = $v;
			$this->modifiedColumns[] = ProvPeer::ROWGUID;
		}

		return $this;
	} // setRowguid()

	/**
	 * Set the value of [juridico] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setJuridico($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->juridico !== $v || $v === false) {
			$this->juridico = $v;
			$this->modifiedColumns[] = ProvPeer::JURIDICO;
		}

		return $this;
	} // setJuridico()

	/**
	 * Set the value of [tipo_adi] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setTipoAdi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_adi !== $v || $v === '1') {
			$this->tipo_adi = $v;
			$this->modifiedColumns[] = ProvPeer::TIPO_ADI;
		}

		return $this;
	} // setTipoAdi()

	/**
	 * Set the value of [matriz] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setMatriz($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->matriz !== $v || $v === ' ') {
			$this->matriz = $v;
			$this->modifiedColumns[] = ProvPeer::MATRIZ;
		}

		return $this;
	} // setMatriz()

	/**
	 * Set the value of [co_tab] column.
	 * 
	 * @param      int $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoTab($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->co_tab !== $v || $v === 0) {
			$this->co_tab = $v;
			$this->modifiedColumns[] = ProvPeer::CO_TAB;
		}

		return $this;
	} // setCoTab()

	/**
	 * Set the value of [tipo_per] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setTipoPer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_per !== $v || $v === ' ') {
			$this->tipo_per = $v;
			$this->modifiedColumns[] = ProvPeer::TIPO_PER;
		}

		return $this;
	} // setTipoPer()

	/**
	 * Set the value of [co_pais] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCoPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_pais !== $v || $v === ' ') {
			$this->co_pais = $v;
			$this->modifiedColumns[] = ProvPeer::CO_PAIS;
		}

		return $this;
	} // setCoPais()

	/**
	 * Set the value of [ciudad] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setCiudad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ciudad !== $v || $v === ' ') {
			$this->ciudad = $v;
			$this->modifiedColumns[] = ProvPeer::CIUDAD;
		}

		return $this;
	} // setCiudad()

	/**
	 * Set the value of [zip] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setZip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zip !== $v || $v === ' ') {
			$this->zip = $v;
			$this->modifiedColumns[] = ProvPeer::ZIP;
		}

		return $this;
	} // setZip()

	/**
	 * Set the value of [website] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setWebsite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->website !== $v || $v === ' ') {
			$this->website = $v;
			$this->modifiedColumns[] = ProvPeer::WEBSITE;
		}

		return $this;
	} // setWebsite()

	/**
	 * Set the value of [formtype] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setFormtype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->formtype !== $v || $v === ' ') {
			$this->formtype = $v;
			$this->modifiedColumns[] = ProvPeer::FORMTYPE;
		}

		return $this;
	} // setFormtype()

	/**
	 * Set the value of [taxid] column.
	 * 
	 * @param      string $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setTaxid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->taxid !== $v || $v === ' ') {
			$this->taxid = $v;
			$this->modifiedColumns[] = ProvPeer::TAXID;
		}

		return $this;
	} // setTaxid()

	/**
	 * Set the value of [contribu_e] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setContribuE($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->contribu_e !== $v || $v === false) {
			$this->contribu_e = $v;
			$this->modifiedColumns[] = ProvPeer::CONTRIBU_E;
		}

		return $this;
	} // setContribuE()

	/**
	 * Set the value of [porc_esp] column.
	 * 
	 * @param      double $v new value
	 * @return     Prov The current object (for fluent API support)
	 */
	public function setPorcEsp($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->porc_esp !== $v || $v === 0) {
			$this->porc_esp = $v;
			$this->modifiedColumns[] = ProvPeer::PORC_ESP;
		}

		return $this;
	} // setPorcEsp()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(ProvPeer::PROV_DES,ProvPeer::CO_SEG,ProvPeer::CO_ZON,ProvPeer::INACTIVO,ProvPeer::PRODUCTOS,ProvPeer::DIREC1,ProvPeer::DIREC2,ProvPeer::TELEFONOS,ProvPeer::FAX,ProvPeer::RESPONS,ProvPeer::TIPO,ProvPeer::COM_ULT_CO,ProvPeer::NET_ULT_CO,ProvPeer::SALDO,ProvPeer::SALDO_INI,ProvPeer::MONT_CRE,ProvPeer::PLAZ_PAG,ProvPeer::DESC_PPAGO,ProvPeer::DESC_GLOB,ProvPeer::TIPO_IVA,ProvPeer::IVA,ProvPeer::RIF,ProvPeer::NACIONAL,ProvPeer::DIS_CEN,ProvPeer::NIT,ProvPeer::EMAIL,ProvPeer::CO_INGR,ProvPeer::COMENTARIO,ProvPeer::CAMPO1,ProvPeer::CAMPO2,ProvPeer::CAMPO3,ProvPeer::CAMPO4,ProvPeer::CAMPO5,ProvPeer::CAMPO6,ProvPeer::CAMPO7,ProvPeer::CAMPO8,ProvPeer::CO_US_IN,ProvPeer::CO_US_MO,ProvPeer::CO_US_EL,ProvPeer::REVISADO,ProvPeer::TRASNFE,ProvPeer::CO_SUCU,ProvPeer::ROWGUID,ProvPeer::JURIDICO,ProvPeer::TIPO_ADI,ProvPeer::MATRIZ,ProvPeer::CO_TAB,ProvPeer::TIPO_PER,ProvPeer::CO_PAIS,ProvPeer::CIUDAD,ProvPeer::ZIP,ProvPeer::WEBSITE,ProvPeer::FORMTYPE,ProvPeer::TAXID,ProvPeer::CONTRIBU_E,ProvPeer::PORC_ESP))) {
				return false;
			}

			if ($this->prov_des !== ' ') {
				return false;
			}

			if ($this->co_seg !== ' ') {
				return false;
			}

			if ($this->co_zon !== ' ') {
				return false;
			}

			if ($this->inactivo !== false) {
				return false;
			}

			if ($this->productos !== ' ') {
				return false;
			}

			if ($this->direc1 !== ' ') {
				return false;
			}

			if ($this->direc2 !== ' ') {
				return false;
			}

			if ($this->telefonos !== ' ') {
				return false;
			}

			if ($this->fax !== ' ') {
				return false;
			}

			if ($this->respons !== ' ') {
				return false;
			}

			if ($this->tipo !== ' ') {
				return false;
			}

			if ($this->com_ult_co !== 0) {
				return false;
			}

			if ($this->net_ult_co !== '0') {
				return false;
			}

			if ($this->saldo !== '0') {
				return false;
			}

			if ($this->saldo_ini !== '0') {
				return false;
			}

			if ($this->mont_cre !== '0') {
				return false;
			}

			if ($this->plaz_pag !== 0) {
				return false;
			}

			if ($this->desc_ppago !== '0') {
				return false;
			}

			if ($this->desc_glob !== '0') {
				return false;
			}

			if ($this->tipo_iva !== ' ') {
				return false;
			}

			if ($this->iva !== '0') {
				return false;
			}

			if ($this->rif !== ' ') {
				return false;
			}

			if ($this->nacional !== false) {
				return false;
			}

			if ($this->dis_cen !== ' ') {
				return false;
			}

			if ($this->nit !== ' ') {
				return false;
			}

			if ($this->email !== ' ') {
				return false;
			}

			if ($this->co_ingr !== ' ') {
				return false;
			}

			if ($this->comentario !== ' ') {
				return false;
			}

			if ($this->campo1 !== ' ') {
				return false;
			}

			if ($this->campo2 !== ' ') {
				return false;
			}

			if ($this->campo3 !== ' ') {
				return false;
			}

			if ($this->campo4 !== ' ') {
				return false;
			}

			if ($this->campo5 !== ' ') {
				return false;
			}

			if ($this->campo6 !== ' ') {
				return false;
			}

			if ($this->campo7 !== ' ') {
				return false;
			}

			if ($this->campo8 !== ' ') {
				return false;
			}

			if ($this->co_us_in !== ' ') {
				return false;
			}

			if ($this->co_us_mo !== ' ') {
				return false;
			}

			if ($this->co_us_el !== ' ') {
				return false;
			}

			if ($this->revisado !== ' ') {
				return false;
			}

			if ($this->trasnfe !== ' ') {
				return false;
			}

			if ($this->co_sucu !== ' ') {
				return false;
			}

			if ($this->rowguid !== '(newid())') {
				return false;
			}

			if ($this->juridico !== false) {
				return false;
			}

			if ($this->tipo_adi !== '1') {
				return false;
			}

			if ($this->matriz !== ' ') {
				return false;
			}

			if ($this->co_tab !== 0) {
				return false;
			}

			if ($this->tipo_per !== ' ') {
				return false;
			}

			if ($this->co_pais !== ' ') {
				return false;
			}

			if ($this->ciudad !== ' ') {
				return false;
			}

			if ($this->zip !== ' ') {
				return false;
			}

			if ($this->website !== ' ') {
				return false;
			}

			if ($this->formtype !== ' ') {
				return false;
			}

			if ($this->taxid !== ' ') {
				return false;
			}

			if ($this->contribu_e !== false) {
				return false;
			}

			if ($this->porc_esp !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_prov = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->prov_des = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->co_seg = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->co_zon = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->inactivo = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
			$this->productos = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->direc1 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->direc2 = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->telefonos = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->fax = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->respons = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->fecha_reg = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->tipo = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->com_ult_co = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->fec_ult_co = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->net_ult_co = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->saldo = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->saldo_ini = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->mont_cre = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->plaz_pag = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->desc_ppago = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->desc_glob = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->tipo_iva = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->iva = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->rif = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->nacional = ($row[$startcol + 25] !== null) ? (boolean) $row[$startcol + 25] : null;
			$this->dis_cen = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->nit = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->email = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->co_ingr = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->comentario = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->campo1 = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->campo2 = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->campo3 = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->campo4 = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->campo5 = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->campo6 = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->campo7 = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->campo8 = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->co_us_in = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->fe_us_in = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->co_us_mo = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->fe_us_mo = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->co_us_el = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->fe_us_el = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->revisado = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->trasnfe = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->co_sucu = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->rowguid = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->juridico = ($row[$startcol + 49] !== null) ? (boolean) $row[$startcol + 49] : null;
			$this->tipo_adi = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
			$this->matriz = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
			$this->co_tab = ($row[$startcol + 52] !== null) ? (int) $row[$startcol + 52] : null;
			$this->tipo_per = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->co_pais = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
			$this->ciudad = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->zip = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
			$this->website = ($row[$startcol + 57] !== null) ? (string) $row[$startcol + 57] : null;
			$this->formtype = ($row[$startcol + 58] !== null) ? (string) $row[$startcol + 58] : null;
			$this->taxid = ($row[$startcol + 59] !== null) ? (string) $row[$startcol + 59] : null;
			$this->contribu_e = ($row[$startcol + 60] !== null) ? (boolean) $row[$startcol + 60] : null;
			$this->porc_esp = ($row[$startcol + 61] !== null) ? (double) $row[$startcol + 61] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 62; // 62 = ProvPeer::NUM_COLUMNS - ProvPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Prov object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aSegmento !== null && $this->co_seg !== $this->aSegmento->getCoSeg()) {
			$this->aSegmento = null;
		}
		if ($this->aZona !== null && $this->co_zon !== $this->aZona->getCoZon()) {
			$this->aZona = null;
		}
		if ($this->aTipoPro !== null && $this->tipo !== $this->aTipoPro->getTipPro()) {
			$this->aTipoPro = null;
		}
		if ($this->aCtaIngr !== null && $this->co_ingr !== $this->aCtaIngr->getCoIngr()) {
			$this->aCtaIngr = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProvPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProvPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aSegmento = null;
			$this->aZona = null;
			$this->aTipoPro = null;
			$this->aCtaIngr = null;
			$this->collArts = null;
			$this->lastArtCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProv:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProvPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ProvPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseProv:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProv:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProvPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseProv:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ProvPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSegmento !== null) {
				if ($this->aSegmento->isModified() || $this->aSegmento->isNew()) {
					$affectedRows += $this->aSegmento->save($con);
				}
				$this->setSegmento($this->aSegmento);
			}

			if ($this->aZona !== null) {
				if ($this->aZona->isModified() || $this->aZona->isNew()) {
					$affectedRows += $this->aZona->save($con);
				}
				$this->setZona($this->aZona);
			}

			if ($this->aTipoPro !== null) {
				if ($this->aTipoPro->isModified() || $this->aTipoPro->isNew()) {
					$affectedRows += $this->aTipoPro->save($con);
				}
				$this->setTipoPro($this->aTipoPro);
			}

			if ($this->aCtaIngr !== null) {
				if ($this->aCtaIngr->isModified() || $this->aCtaIngr->isNew()) {
					$affectedRows += $this->aCtaIngr->save($con);
				}
				$this->setCtaIngr($this->aCtaIngr);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProvPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += ProvPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collArts !== null) {
				foreach ($this->collArts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSegmento !== null) {
				if (!$this->aSegmento->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSegmento->getValidationFailures());
				}
			}

			if ($this->aZona !== null) {
				if (!$this->aZona->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aZona->getValidationFailures());
				}
			}

			if ($this->aTipoPro !== null) {
				if (!$this->aTipoPro->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTipoPro->getValidationFailures());
				}
			}

			if ($this->aCtaIngr !== null) {
				if (!$this->aCtaIngr->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCtaIngr->getValidationFailures());
				}
			}


			if (($retval = ProvPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collArts !== null) {
					foreach ($this->collArts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProvPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoProv();
				break;
			case 1:
				return $this->getProvDes();
				break;
			case 2:
				return $this->getCoSeg();
				break;
			case 3:
				return $this->getCoZon();
				break;
			case 4:
				return $this->getInactivo();
				break;
			case 5:
				return $this->getProductos();
				break;
			case 6:
				return $this->getDirec1();
				break;
			case 7:
				return $this->getDirec2();
				break;
			case 8:
				return $this->getTelefonos();
				break;
			case 9:
				return $this->getFax();
				break;
			case 10:
				return $this->getRespons();
				break;
			case 11:
				return $this->getFechaReg();
				break;
			case 12:
				return $this->getTipo();
				break;
			case 13:
				return $this->getComUltCo();
				break;
			case 14:
				return $this->getFecUltCo();
				break;
			case 15:
				return $this->getNetUltCo();
				break;
			case 16:
				return $this->getSaldo();
				break;
			case 17:
				return $this->getSaldoIni();
				break;
			case 18:
				return $this->getMontCre();
				break;
			case 19:
				return $this->getPlazPag();
				break;
			case 20:
				return $this->getDescPpago();
				break;
			case 21:
				return $this->getDescGlob();
				break;
			case 22:
				return $this->getTipoIva();
				break;
			case 23:
				return $this->getIva();
				break;
			case 24:
				return $this->getRif();
				break;
			case 25:
				return $this->getNacional();
				break;
			case 26:
				return $this->getDisCen();
				break;
			case 27:
				return $this->getNit();
				break;
			case 28:
				return $this->getEmail();
				break;
			case 29:
				return $this->getCoIngr();
				break;
			case 30:
				return $this->getComentario();
				break;
			case 31:
				return $this->getCampo1();
				break;
			case 32:
				return $this->getCampo2();
				break;
			case 33:
				return $this->getCampo3();
				break;
			case 34:
				return $this->getCampo4();
				break;
			case 35:
				return $this->getCampo5();
				break;
			case 36:
				return $this->getCampo6();
				break;
			case 37:
				return $this->getCampo7();
				break;
			case 38:
				return $this->getCampo8();
				break;
			case 39:
				return $this->getCoUsIn();
				break;
			case 40:
				return $this->getFeUsIn();
				break;
			case 41:
				return $this->getCoUsMo();
				break;
			case 42:
				return $this->getFeUsMo();
				break;
			case 43:
				return $this->getCoUsEl();
				break;
			case 44:
				return $this->getFeUsEl();
				break;
			case 45:
				return $this->getRevisado();
				break;
			case 46:
				return $this->getTrasnfe();
				break;
			case 47:
				return $this->getCoSucu();
				break;
			case 48:
				return $this->getRowguid();
				break;
			case 49:
				return $this->getJuridico();
				break;
			case 50:
				return $this->getTipoAdi();
				break;
			case 51:
				return $this->getMatriz();
				break;
			case 52:
				return $this->getCoTab();
				break;
			case 53:
				return $this->getTipoPer();
				break;
			case 54:
				return $this->getCoPais();
				break;
			case 55:
				return $this->getCiudad();
				break;
			case 56:
				return $this->getZip();
				break;
			case 57:
				return $this->getWebsite();
				break;
			case 58:
				return $this->getFormtype();
				break;
			case 59:
				return $this->getTaxid();
				break;
			case 60:
				return $this->getContribuE();
				break;
			case 61:
				return $this->getPorcEsp();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProvPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoProv(),
			$keys[1] => $this->getProvDes(),
			$keys[2] => $this->getCoSeg(),
			$keys[3] => $this->getCoZon(),
			$keys[4] => $this->getInactivo(),
			$keys[5] => $this->getProductos(),
			$keys[6] => $this->getDirec1(),
			$keys[7] => $this->getDirec2(),
			$keys[8] => $this->getTelefonos(),
			$keys[9] => $this->getFax(),
			$keys[10] => $this->getRespons(),
			$keys[11] => $this->getFechaReg(),
			$keys[12] => $this->getTipo(),
			$keys[13] => $this->getComUltCo(),
			$keys[14] => $this->getFecUltCo(),
			$keys[15] => $this->getNetUltCo(),
			$keys[16] => $this->getSaldo(),
			$keys[17] => $this->getSaldoIni(),
			$keys[18] => $this->getMontCre(),
			$keys[19] => $this->getPlazPag(),
			$keys[20] => $this->getDescPpago(),
			$keys[21] => $this->getDescGlob(),
			$keys[22] => $this->getTipoIva(),
			$keys[23] => $this->getIva(),
			$keys[24] => $this->getRif(),
			$keys[25] => $this->getNacional(),
			$keys[26] => $this->getDisCen(),
			$keys[27] => $this->getNit(),
			$keys[28] => $this->getEmail(),
			$keys[29] => $this->getCoIngr(),
			$keys[30] => $this->getComentario(),
			$keys[31] => $this->getCampo1(),
			$keys[32] => $this->getCampo2(),
			$keys[33] => $this->getCampo3(),
			$keys[34] => $this->getCampo4(),
			$keys[35] => $this->getCampo5(),
			$keys[36] => $this->getCampo6(),
			$keys[37] => $this->getCampo7(),
			$keys[38] => $this->getCampo8(),
			$keys[39] => $this->getCoUsIn(),
			$keys[40] => $this->getFeUsIn(),
			$keys[41] => $this->getCoUsMo(),
			$keys[42] => $this->getFeUsMo(),
			$keys[43] => $this->getCoUsEl(),
			$keys[44] => $this->getFeUsEl(),
			$keys[45] => $this->getRevisado(),
			$keys[46] => $this->getTrasnfe(),
			$keys[47] => $this->getCoSucu(),
			$keys[48] => $this->getRowguid(),
			$keys[49] => $this->getJuridico(),
			$keys[50] => $this->getTipoAdi(),
			$keys[51] => $this->getMatriz(),
			$keys[52] => $this->getCoTab(),
			$keys[53] => $this->getTipoPer(),
			$keys[54] => $this->getCoPais(),
			$keys[55] => $this->getCiudad(),
			$keys[56] => $this->getZip(),
			$keys[57] => $this->getWebsite(),
			$keys[58] => $this->getFormtype(),
			$keys[59] => $this->getTaxid(),
			$keys[60] => $this->getContribuE(),
			$keys[61] => $this->getPorcEsp(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProvPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoProv($value);
				break;
			case 1:
				$this->setProvDes($value);
				break;
			case 2:
				$this->setCoSeg($value);
				break;
			case 3:
				$this->setCoZon($value);
				break;
			case 4:
				$this->setInactivo($value);
				break;
			case 5:
				$this->setProductos($value);
				break;
			case 6:
				$this->setDirec1($value);
				break;
			case 7:
				$this->setDirec2($value);
				break;
			case 8:
				$this->setTelefonos($value);
				break;
			case 9:
				$this->setFax($value);
				break;
			case 10:
				$this->setRespons($value);
				break;
			case 11:
				$this->setFechaReg($value);
				break;
			case 12:
				$this->setTipo($value);
				break;
			case 13:
				$this->setComUltCo($value);
				break;
			case 14:
				$this->setFecUltCo($value);
				break;
			case 15:
				$this->setNetUltCo($value);
				break;
			case 16:
				$this->setSaldo($value);
				break;
			case 17:
				$this->setSaldoIni($value);
				break;
			case 18:
				$this->setMontCre($value);
				break;
			case 19:
				$this->setPlazPag($value);
				break;
			case 20:
				$this->setDescPpago($value);
				break;
			case 21:
				$this->setDescGlob($value);
				break;
			case 22:
				$this->setTipoIva($value);
				break;
			case 23:
				$this->setIva($value);
				break;
			case 24:
				$this->setRif($value);
				break;
			case 25:
				$this->setNacional($value);
				break;
			case 26:
				$this->setDisCen($value);
				break;
			case 27:
				$this->setNit($value);
				break;
			case 28:
				$this->setEmail($value);
				break;
			case 29:
				$this->setCoIngr($value);
				break;
			case 30:
				$this->setComentario($value);
				break;
			case 31:
				$this->setCampo1($value);
				break;
			case 32:
				$this->setCampo2($value);
				break;
			case 33:
				$this->setCampo3($value);
				break;
			case 34:
				$this->setCampo4($value);
				break;
			case 35:
				$this->setCampo5($value);
				break;
			case 36:
				$this->setCampo6($value);
				break;
			case 37:
				$this->setCampo7($value);
				break;
			case 38:
				$this->setCampo8($value);
				break;
			case 39:
				$this->setCoUsIn($value);
				break;
			case 40:
				$this->setFeUsIn($value);
				break;
			case 41:
				$this->setCoUsMo($value);
				break;
			case 42:
				$this->setFeUsMo($value);
				break;
			case 43:
				$this->setCoUsEl($value);
				break;
			case 44:
				$this->setFeUsEl($value);
				break;
			case 45:
				$this->setRevisado($value);
				break;
			case 46:
				$this->setTrasnfe($value);
				break;
			case 47:
				$this->setCoSucu($value);
				break;
			case 48:
				$this->setRowguid($value);
				break;
			case 49:
				$this->setJuridico($value);
				break;
			case 50:
				$this->setTipoAdi($value);
				break;
			case 51:
				$this->setMatriz($value);
				break;
			case 52:
				$this->setCoTab($value);
				break;
			case 53:
				$this->setTipoPer($value);
				break;
			case 54:
				$this->setCoPais($value);
				break;
			case 55:
				$this->setCiudad($value);
				break;
			case 56:
				$this->setZip($value);
				break;
			case 57:
				$this->setWebsite($value);
				break;
			case 58:
				$this->setFormtype($value);
				break;
			case 59:
				$this->setTaxid($value);
				break;
			case 60:
				$this->setContribuE($value);
				break;
			case 61:
				$this->setPorcEsp($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProvPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoProv($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProvDes($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCoSeg($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCoZon($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setInactivo($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setProductos($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDirec1($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDirec2($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTelefonos($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setFax($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setRespons($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFechaReg($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTipo($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setComUltCo($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setFecUltCo($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setNetUltCo($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setSaldo($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setSaldoIni($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMontCre($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPlazPag($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDescPpago($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setDescGlob($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setTipoIva($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setIva($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setRif($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setNacional($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setDisCen($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setNit($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setEmail($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setCoIngr($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setComentario($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setCampo1($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCampo2($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setCampo3($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setCampo4($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setCampo5($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setCampo6($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setCampo7($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setCampo8($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setCoUsIn($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setFeUsIn($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setCoUsMo($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setFeUsMo($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setCoUsEl($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setFeUsEl($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setRevisado($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setTrasnfe($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setCoSucu($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setRowguid($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setJuridico($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setTipoAdi($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setMatriz($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setCoTab($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setTipoPer($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setCoPais($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setCiudad($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setZip($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setWebsite($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setFormtype($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setTaxid($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setContribuE($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setPorcEsp($arr[$keys[61]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProvPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProvPeer::CO_PROV)) $criteria->add(ProvPeer::CO_PROV, $this->co_prov);
		if ($this->isColumnModified(ProvPeer::PROV_DES)) $criteria->add(ProvPeer::PROV_DES, $this->prov_des);
		if ($this->isColumnModified(ProvPeer::CO_SEG)) $criteria->add(ProvPeer::CO_SEG, $this->co_seg);
		if ($this->isColumnModified(ProvPeer::CO_ZON)) $criteria->add(ProvPeer::CO_ZON, $this->co_zon);
		if ($this->isColumnModified(ProvPeer::INACTIVO)) $criteria->add(ProvPeer::INACTIVO, $this->inactivo);
		if ($this->isColumnModified(ProvPeer::PRODUCTOS)) $criteria->add(ProvPeer::PRODUCTOS, $this->productos);
		if ($this->isColumnModified(ProvPeer::DIREC1)) $criteria->add(ProvPeer::DIREC1, $this->direc1);
		if ($this->isColumnModified(ProvPeer::DIREC2)) $criteria->add(ProvPeer::DIREC2, $this->direc2);
		if ($this->isColumnModified(ProvPeer::TELEFONOS)) $criteria->add(ProvPeer::TELEFONOS, $this->telefonos);
		if ($this->isColumnModified(ProvPeer::FAX)) $criteria->add(ProvPeer::FAX, $this->fax);
		if ($this->isColumnModified(ProvPeer::RESPONS)) $criteria->add(ProvPeer::RESPONS, $this->respons);
		if ($this->isColumnModified(ProvPeer::FECHA_REG)) $criteria->add(ProvPeer::FECHA_REG, $this->fecha_reg);
		if ($this->isColumnModified(ProvPeer::TIPO)) $criteria->add(ProvPeer::TIPO, $this->tipo);
		if ($this->isColumnModified(ProvPeer::COM_ULT_CO)) $criteria->add(ProvPeer::COM_ULT_CO, $this->com_ult_co);
		if ($this->isColumnModified(ProvPeer::FEC_ULT_CO)) $criteria->add(ProvPeer::FEC_ULT_CO, $this->fec_ult_co);
		if ($this->isColumnModified(ProvPeer::NET_ULT_CO)) $criteria->add(ProvPeer::NET_ULT_CO, $this->net_ult_co);
		if ($this->isColumnModified(ProvPeer::SALDO)) $criteria->add(ProvPeer::SALDO, $this->saldo);
		if ($this->isColumnModified(ProvPeer::SALDO_INI)) $criteria->add(ProvPeer::SALDO_INI, $this->saldo_ini);
		if ($this->isColumnModified(ProvPeer::MONT_CRE)) $criteria->add(ProvPeer::MONT_CRE, $this->mont_cre);
		if ($this->isColumnModified(ProvPeer::PLAZ_PAG)) $criteria->add(ProvPeer::PLAZ_PAG, $this->plaz_pag);
		if ($this->isColumnModified(ProvPeer::DESC_PPAGO)) $criteria->add(ProvPeer::DESC_PPAGO, $this->desc_ppago);
		if ($this->isColumnModified(ProvPeer::DESC_GLOB)) $criteria->add(ProvPeer::DESC_GLOB, $this->desc_glob);
		if ($this->isColumnModified(ProvPeer::TIPO_IVA)) $criteria->add(ProvPeer::TIPO_IVA, $this->tipo_iva);
		if ($this->isColumnModified(ProvPeer::IVA)) $criteria->add(ProvPeer::IVA, $this->iva);
		if ($this->isColumnModified(ProvPeer::RIF)) $criteria->add(ProvPeer::RIF, $this->rif);
		if ($this->isColumnModified(ProvPeer::NACIONAL)) $criteria->add(ProvPeer::NACIONAL, $this->nacional);
		if ($this->isColumnModified(ProvPeer::DIS_CEN)) $criteria->add(ProvPeer::DIS_CEN, $this->dis_cen);
		if ($this->isColumnModified(ProvPeer::NIT)) $criteria->add(ProvPeer::NIT, $this->nit);
		if ($this->isColumnModified(ProvPeer::EMAIL)) $criteria->add(ProvPeer::EMAIL, $this->email);
		if ($this->isColumnModified(ProvPeer::CO_INGR)) $criteria->add(ProvPeer::CO_INGR, $this->co_ingr);
		if ($this->isColumnModified(ProvPeer::COMENTARIO)) $criteria->add(ProvPeer::COMENTARIO, $this->comentario);
		if ($this->isColumnModified(ProvPeer::CAMPO1)) $criteria->add(ProvPeer::CAMPO1, $this->campo1);
		if ($this->isColumnModified(ProvPeer::CAMPO2)) $criteria->add(ProvPeer::CAMPO2, $this->campo2);
		if ($this->isColumnModified(ProvPeer::CAMPO3)) $criteria->add(ProvPeer::CAMPO3, $this->campo3);
		if ($this->isColumnModified(ProvPeer::CAMPO4)) $criteria->add(ProvPeer::CAMPO4, $this->campo4);
		if ($this->isColumnModified(ProvPeer::CAMPO5)) $criteria->add(ProvPeer::CAMPO5, $this->campo5);
		if ($this->isColumnModified(ProvPeer::CAMPO6)) $criteria->add(ProvPeer::CAMPO6, $this->campo6);
		if ($this->isColumnModified(ProvPeer::CAMPO7)) $criteria->add(ProvPeer::CAMPO7, $this->campo7);
		if ($this->isColumnModified(ProvPeer::CAMPO8)) $criteria->add(ProvPeer::CAMPO8, $this->campo8);
		if ($this->isColumnModified(ProvPeer::CO_US_IN)) $criteria->add(ProvPeer::CO_US_IN, $this->co_us_in);
		if ($this->isColumnModified(ProvPeer::FE_US_IN)) $criteria->add(ProvPeer::FE_US_IN, $this->fe_us_in);
		if ($this->isColumnModified(ProvPeer::CO_US_MO)) $criteria->add(ProvPeer::CO_US_MO, $this->co_us_mo);
		if ($this->isColumnModified(ProvPeer::FE_US_MO)) $criteria->add(ProvPeer::FE_US_MO, $this->fe_us_mo);
		if ($this->isColumnModified(ProvPeer::CO_US_EL)) $criteria->add(ProvPeer::CO_US_EL, $this->co_us_el);
		if ($this->isColumnModified(ProvPeer::FE_US_EL)) $criteria->add(ProvPeer::FE_US_EL, $this->fe_us_el);
		if ($this->isColumnModified(ProvPeer::REVISADO)) $criteria->add(ProvPeer::REVISADO, $this->revisado);
		if ($this->isColumnModified(ProvPeer::TRASNFE)) $criteria->add(ProvPeer::TRASNFE, $this->trasnfe);
		if ($this->isColumnModified(ProvPeer::CO_SUCU)) $criteria->add(ProvPeer::CO_SUCU, $this->co_sucu);
		if ($this->isColumnModified(ProvPeer::ROWGUID)) $criteria->add(ProvPeer::ROWGUID, $this->rowguid);
		if ($this->isColumnModified(ProvPeer::JURIDICO)) $criteria->add(ProvPeer::JURIDICO, $this->juridico);
		if ($this->isColumnModified(ProvPeer::TIPO_ADI)) $criteria->add(ProvPeer::TIPO_ADI, $this->tipo_adi);
		if ($this->isColumnModified(ProvPeer::MATRIZ)) $criteria->add(ProvPeer::MATRIZ, $this->matriz);
		if ($this->isColumnModified(ProvPeer::CO_TAB)) $criteria->add(ProvPeer::CO_TAB, $this->co_tab);
		if ($this->isColumnModified(ProvPeer::TIPO_PER)) $criteria->add(ProvPeer::TIPO_PER, $this->tipo_per);
		if ($this->isColumnModified(ProvPeer::CO_PAIS)) $criteria->add(ProvPeer::CO_PAIS, $this->co_pais);
		if ($this->isColumnModified(ProvPeer::CIUDAD)) $criteria->add(ProvPeer::CIUDAD, $this->ciudad);
		if ($this->isColumnModified(ProvPeer::ZIP)) $criteria->add(ProvPeer::ZIP, $this->zip);
		if ($this->isColumnModified(ProvPeer::WEBSITE)) $criteria->add(ProvPeer::WEBSITE, $this->website);
		if ($this->isColumnModified(ProvPeer::FORMTYPE)) $criteria->add(ProvPeer::FORMTYPE, $this->formtype);
		if ($this->isColumnModified(ProvPeer::TAXID)) $criteria->add(ProvPeer::TAXID, $this->taxid);
		if ($this->isColumnModified(ProvPeer::CONTRIBU_E)) $criteria->add(ProvPeer::CONTRIBU_E, $this->contribu_e);
		if ($this->isColumnModified(ProvPeer::PORC_ESP)) $criteria->add(ProvPeer::PORC_ESP, $this->porc_esp);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProvPeer::DATABASE_NAME);

		$criteria->add(ProvPeer::CO_PROV, $this->co_prov);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCoProv();
	}

	/**
	 * Generic method to set the primary key (co_prov column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCoProv($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Prov (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCoProv($this->co_prov);

		$copyObj->setProvDes($this->prov_des);

		$copyObj->setCoSeg($this->co_seg);

		$copyObj->setCoZon($this->co_zon);

		$copyObj->setInactivo($this->inactivo);

		$copyObj->setProductos($this->productos);

		$copyObj->setDirec1($this->direc1);

		$copyObj->setDirec2($this->direc2);

		$copyObj->setTelefonos($this->telefonos);

		$copyObj->setFax($this->fax);

		$copyObj->setRespons($this->respons);

		$copyObj->setFechaReg($this->fecha_reg);

		$copyObj->setTipo($this->tipo);

		$copyObj->setComUltCo($this->com_ult_co);

		$copyObj->setFecUltCo($this->fec_ult_co);

		$copyObj->setNetUltCo($this->net_ult_co);

		$copyObj->setSaldo($this->saldo);

		$copyObj->setSaldoIni($this->saldo_ini);

		$copyObj->setMontCre($this->mont_cre);

		$copyObj->setPlazPag($this->plaz_pag);

		$copyObj->setDescPpago($this->desc_ppago);

		$copyObj->setDescGlob($this->desc_glob);

		$copyObj->setTipoIva($this->tipo_iva);

		$copyObj->setIva($this->iva);

		$copyObj->setRif($this->rif);

		$copyObj->setNacional($this->nacional);

		$copyObj->setDisCen($this->dis_cen);

		$copyObj->setNit($this->nit);

		$copyObj->setEmail($this->email);

		$copyObj->setCoIngr($this->co_ingr);

		$copyObj->setComentario($this->comentario);

		$copyObj->setCampo1($this->campo1);

		$copyObj->setCampo2($this->campo2);

		$copyObj->setCampo3($this->campo3);

		$copyObj->setCampo4($this->campo4);

		$copyObj->setCampo5($this->campo5);

		$copyObj->setCampo6($this->campo6);

		$copyObj->setCampo7($this->campo7);

		$copyObj->setCampo8($this->campo8);

		$copyObj->setCoUsIn($this->co_us_in);

		$copyObj->setFeUsIn($this->fe_us_in);

		$copyObj->setCoUsMo($this->co_us_mo);

		$copyObj->setFeUsMo($this->fe_us_mo);

		$copyObj->setCoUsEl($this->co_us_el);

		$copyObj->setFeUsEl($this->fe_us_el);

		$copyObj->setRevisado($this->revisado);

		$copyObj->setTrasnfe($this->trasnfe);

		$copyObj->setCoSucu($this->co_sucu);

		$copyObj->setRowguid($this->rowguid);

		$copyObj->setJuridico($this->juridico);

		$copyObj->setTipoAdi($this->tipo_adi);

		$copyObj->setMatriz($this->matriz);

		$copyObj->setCoTab($this->co_tab);

		$copyObj->setTipoPer($this->tipo_per);

		$copyObj->setCoPais($this->co_pais);

		$copyObj->setCiudad($this->ciudad);

		$copyObj->setZip($this->zip);

		$copyObj->setWebsite($this->website);

		$copyObj->setFormtype($this->formtype);

		$copyObj->setTaxid($this->taxid);

		$copyObj->setContribuE($this->contribu_e);

		$copyObj->setPorcEsp($this->porc_esp);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getArts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addArt($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Prov Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProvPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProvPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Segmento object.
	 *
	 * @param      Segmento $v
	 * @return     Prov The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSegmento(Segmento $v = null)
	{
		if ($v === null) {
			$this->setCoSeg(' ');
		} else {
			$this->setCoSeg($v->getCoSeg());
		}

		$this->aSegmento = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Segmento object, it will not be re-added.
		if ($v !== null) {
			$v->addProv($this);
		}

		return $this;
	}


	/**
	 * Get the associated Segmento object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Segmento The associated Segmento object.
	 * @throws     PropelException
	 */
	public function getSegmento(PropelPDO $con = null)
	{
		if ($this->aSegmento === null && (($this->co_seg !== "" && $this->co_seg !== null))) {
			$c = new Criteria(SegmentoPeer::DATABASE_NAME);
			$c->add(SegmentoPeer::CO_SEG, $this->co_seg);
			$this->aSegmento = SegmentoPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSegmento->addProvs($this);
			 */
		}
		return $this->aSegmento;
	}

	/**
	 * Declares an association between this object and a Zona object.
	 *
	 * @param      Zona $v
	 * @return     Prov The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setZona(Zona $v = null)
	{
		if ($v === null) {
			$this->setCoZon(' ');
		} else {
			$this->setCoZon($v->getCoZon());
		}

		$this->aZona = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Zona object, it will not be re-added.
		if ($v !== null) {
			$v->addProv($this);
		}

		return $this;
	}


	/**
	 * Get the associated Zona object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Zona The associated Zona object.
	 * @throws     PropelException
	 */
	public function getZona(PropelPDO $con = null)
	{
		if ($this->aZona === null && (($this->co_zon !== "" && $this->co_zon !== null))) {
			$c = new Criteria(ZonaPeer::DATABASE_NAME);
			$c->add(ZonaPeer::CO_ZON, $this->co_zon);
			$this->aZona = ZonaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aZona->addProvs($this);
			 */
		}
		return $this->aZona;
	}

	/**
	 * Declares an association between this object and a TipoPro object.
	 *
	 * @param      TipoPro $v
	 * @return     Prov The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTipoPro(TipoPro $v = null)
	{
		if ($v === null) {
			$this->setTipo(' ');
		} else {
			$this->setTipo($v->getTipPro());
		}

		$this->aTipoPro = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TipoPro object, it will not be re-added.
		if ($v !== null) {
			$v->addProv($this);
		}

		return $this;
	}


	/**
	 * Get the associated TipoPro object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TipoPro The associated TipoPro object.
	 * @throws     PropelException
	 */
	public function getTipoPro(PropelPDO $con = null)
	{
		if ($this->aTipoPro === null && (($this->tipo !== "" && $this->tipo !== null))) {
			$c = new Criteria(TipoProPeer::DATABASE_NAME);
			$c->add(TipoProPeer::TIP_PRO, $this->tipo);
			$this->aTipoPro = TipoProPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTipoPro->addProvs($this);
			 */
		}
		return $this->aTipoPro;
	}

	/**
	 * Declares an association between this object and a CtaIngr object.
	 *
	 * @param      CtaIngr $v
	 * @return     Prov The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCtaIngr(CtaIngr $v = null)
	{
		if ($v === null) {
			$this->setCoIngr(' ');
		} else {
			$this->setCoIngr($v->getCoIngr());
		}

		$this->aCtaIngr = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CtaIngr object, it will not be re-added.
		if ($v !== null) {
			$v->addProv($this);
		}

		return $this;
	}


	/**
	 * Get the associated CtaIngr object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CtaIngr The associated CtaIngr object.
	 * @throws     PropelException
	 */
	public function getCtaIngr(PropelPDO $con = null)
	{
		if ($this->aCtaIngr === null && (($this->co_ingr !== "" && $this->co_ingr !== null))) {
			$c = new Criteria(CtaIngrPeer::DATABASE_NAME);
			$c->add(CtaIngrPeer::CO_INGR, $this->co_ingr);
			$this->aCtaIngr = CtaIngrPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCtaIngr->addProvs($this);
			 */
		}
		return $this->aCtaIngr;
	}

	/**
	 * Clears out the collArts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addArts()
	 */
	public function clearArts()
	{
		$this->collArts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collArts collection (array).
	 *
	 * By default this just sets the collArts collection to an empty array (like clearcollArts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initArts()
	{
		$this->collArts = array();
	}

	/**
	 * Gets an array of Art objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Prov has previously been saved, it will retrieve
	 * related Arts from storage. If this Prov is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Art[]
	 * @throws     PropelException
	 */
	public function getArts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
			   $this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				ArtPeer::addSelectColumns($criteria);
				$this->collArts = ArtPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				ArtPeer::addSelectColumns($criteria);
				if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
					$this->collArts = ArtPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastArtCriteria = $criteria;
		return $this->collArts;
	}

	/**
	 * Returns the number of related Art objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Art objects.
	 * @throws     PropelException
	 */
	public function countArts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$count = ArtPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
					$count = ArtPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collArts);
				}
			} else {
				$count = count($this->collArts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Art object to this object
	 * through the Art foreign key attribute.
	 *
	 * @param      Art $l Art
	 * @return     void
	 * @throws     PropelException
	 */
	public function addArt(Art $l)
	{
		if ($this->collArts === null) {
			$this->initArts();
		}
		if (!in_array($l, $this->collArts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collArts, $l);
			$l->setProv($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Prov is new, it will return
	 * an empty collection; or if this Prov has previously
	 * been saved, it will retrieve related Arts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Prov.
	 */
	public function getArtsJoinLinArt($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$this->collArts = ArtPeer::doSelectJoinLinArt($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

			if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
				$this->collArts = ArtPeer::doSelectJoinLinArt($criteria, $con, $join_behavior);
			}
		}
		$this->lastArtCriteria = $criteria;

		return $this->collArts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Prov is new, it will return
	 * an empty collection; or if this Prov has previously
	 * been saved, it will retrieve related Arts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Prov.
	 */
	public function getArtsJoinCatArt($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$this->collArts = ArtPeer::doSelectJoinCatArt($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

			if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
				$this->collArts = ArtPeer::doSelectJoinCatArt($criteria, $con, $join_behavior);
			}
		}
		$this->lastArtCriteria = $criteria;

		return $this->collArts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Prov is new, it will return
	 * an empty collection; or if this Prov has previously
	 * been saved, it will retrieve related Arts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Prov.
	 */
	public function getArtsJoinSubLin($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$this->collArts = ArtPeer::doSelectJoinSubLin($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

			if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
				$this->collArts = ArtPeer::doSelectJoinSubLin($criteria, $con, $join_behavior);
			}
		}
		$this->lastArtCriteria = $criteria;

		return $this->collArts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Prov is new, it will return
	 * an empty collection; or if this Prov has previously
	 * been saved, it will retrieve related Arts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Prov.
	 */
	public function getArtsJoinColores($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$this->collArts = ArtPeer::doSelectJoinColores($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

			if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
				$this->collArts = ArtPeer::doSelectJoinColores($criteria, $con, $join_behavior);
			}
		}
		$this->lastArtCriteria = $criteria;

		return $this->collArts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Prov is new, it will return
	 * an empty collection; or if this Prov has previously
	 * been saved, it will retrieve related Arts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Prov.
	 */
	public function getArtsJoinProceden($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$this->collArts = ArtPeer::doSelectJoinProceden($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

			if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
				$this->collArts = ArtPeer::doSelectJoinProceden($criteria, $con, $join_behavior);
			}
		}
		$this->lastArtCriteria = $criteria;

		return $this->collArts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Prov is new, it will return
	 * an empty collection; or if this Prov has previously
	 * been saved, it will retrieve related Arts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Prov.
	 */
	public function getArtsJoinUnidadesRelatedByUniVenta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$this->collArts = ArtPeer::doSelectJoinUnidadesRelatedByUniVenta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

			if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
				$this->collArts = ArtPeer::doSelectJoinUnidadesRelatedByUniVenta($criteria, $con, $join_behavior);
			}
		}
		$this->lastArtCriteria = $criteria;

		return $this->collArts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Prov is new, it will return
	 * an empty collection; or if this Prov has previously
	 * been saved, it will retrieve related Arts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Prov.
	 */
	public function getArtsJoinUnidadesRelatedBySuniVenta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$this->collArts = ArtPeer::doSelectJoinUnidadesRelatedBySuniVenta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

			if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
				$this->collArts = ArtPeer::doSelectJoinUnidadesRelatedBySuniVenta($criteria, $con, $join_behavior);
			}
		}
		$this->lastArtCriteria = $criteria;

		return $this->collArts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Prov is new, it will return
	 * an empty collection; or if this Prov has previously
	 * been saved, it will retrieve related Arts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Prov.
	 */
	public function getArtsJoinTabulado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProvPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArts === null) {
			if ($this->isNew()) {
				$this->collArts = array();
			} else {

				$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

				$this->collArts = ArtPeer::doSelectJoinTabulado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ArtPeer::CO_PROV, $this->co_prov);

			if (!isset($this->lastArtCriteria) || !$this->lastArtCriteria->equals($criteria)) {
				$this->collArts = ArtPeer::doSelectJoinTabulado($criteria, $con, $join_behavior);
			}
		}
		$this->lastArtCriteria = $criteria;

		return $this->collArts;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collArts) {
				foreach ((array) $this->collArts as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collArts = null;
			$this->aSegmento = null;
			$this->aZona = null;
			$this->aTipoPro = null;
			$this->aCtaIngr = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseProv:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseProv::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseProv
