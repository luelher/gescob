<?php

/**
 * Base static class for performing query and update operations on the 'docum_cc' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Nov 25 23:58:32 2009
 *
 * @package    lib.model.profit.om
 */
abstract class BaseDocumCcPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'profit';

	/** the table name for this class */
	const TABLE_NAME = 'docum_cc';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.profit.DocumCc';

	/** The total number of columns. */
	const NUM_COLUMNS = 72;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the TIPO_DOC field */
	const TIPO_DOC = 'docum_cc.TIPO_DOC';

	/** the column name for the NRO_DOC field */
	const NRO_DOC = 'docum_cc.NRO_DOC';

	/** the column name for the ANULADO field */
	const ANULADO = 'docum_cc.ANULADO';

	/** the column name for the MOVI field */
	const MOVI = 'docum_cc.MOVI';

	/** the column name for the AUT field */
	const AUT = 'docum_cc.AUT';

	/** the column name for the NUM_CONTROL field */
	const NUM_CONTROL = 'docum_cc.NUM_CONTROL';

	/** the column name for the CO_CLI field */
	const CO_CLI = 'docum_cc.CO_CLI';

	/** the column name for the CONTRIB field */
	const CONTRIB = 'docum_cc.CONTRIB';

	/** the column name for the FEC_EMIS field */
	const FEC_EMIS = 'docum_cc.FEC_EMIS';

	/** the column name for the FEC_VENC field */
	const FEC_VENC = 'docum_cc.FEC_VENC';

	/** the column name for the OBSERVA field */
	const OBSERVA = 'docum_cc.OBSERVA';

	/** the column name for the DOC_ORIG field */
	const DOC_ORIG = 'docum_cc.DOC_ORIG';

	/** the column name for the NRO_ORIG field */
	const NRO_ORIG = 'docum_cc.NRO_ORIG';

	/** the column name for the CO_BAN field */
	const CO_BAN = 'docum_cc.CO_BAN';

	/** the column name for the NRO_CHE field */
	const NRO_CHE = 'docum_cc.NRO_CHE';

	/** the column name for the CO_VEN field */
	const CO_VEN = 'docum_cc.CO_VEN';

	/** the column name for the TIPO field */
	const TIPO = 'docum_cc.TIPO';

	/** the column name for the TASA field */
	const TASA = 'docum_cc.TASA';

	/** the column name for the MONEDA field */
	const MONEDA = 'docum_cc.MONEDA';

	/** the column name for the MONTO_IMP field */
	const MONTO_IMP = 'docum_cc.MONTO_IMP';

	/** the column name for the MONTO_GEN field */
	const MONTO_GEN = 'docum_cc.MONTO_GEN';

	/** the column name for the MONTO_A1 field */
	const MONTO_A1 = 'docum_cc.MONTO_A1';

	/** the column name for the MONTO_A2 field */
	const MONTO_A2 = 'docum_cc.MONTO_A2';

	/** the column name for the MONTO_BRU field */
	const MONTO_BRU = 'docum_cc.MONTO_BRU';

	/** the column name for the DESCUENTOS field */
	const DESCUENTOS = 'docum_cc.DESCUENTOS';

	/** the column name for the MONTO_DES field */
	const MONTO_DES = 'docum_cc.MONTO_DES';

	/** the column name for the RECARGO field */
	const RECARGO = 'docum_cc.RECARGO';

	/** the column name for the MONTO_REC field */
	const MONTO_REC = 'docum_cc.MONTO_REC';

	/** the column name for the MONTO_OTR field */
	const MONTO_OTR = 'docum_cc.MONTO_OTR';

	/** the column name for the MONTO_NET field */
	const MONTO_NET = 'docum_cc.MONTO_NET';

	/** the column name for the SALDO field */
	const SALDO = 'docum_cc.SALDO';

	/** the column name for the FECCOM field */
	const FECCOM = 'docum_cc.FECCOM';

	/** the column name for the NUMCOM field */
	const NUMCOM = 'docum_cc.NUMCOM';

	/** the column name for the DIS_CEN field */
	const DIS_CEN = 'docum_cc.DIS_CEN';

	/** the column name for the COMIS1 field */
	const COMIS1 = 'docum_cc.COMIS1';

	/** the column name for the COMIS2 field */
	const COMIS2 = 'docum_cc.COMIS2';

	/** the column name for the COMIS3 field */
	const COMIS3 = 'docum_cc.COMIS3';

	/** the column name for the COMIS4 field */
	const COMIS4 = 'docum_cc.COMIS4';

	/** the column name for the ADICIONAL field */
	const ADICIONAL = 'docum_cc.ADICIONAL';

	/** the column name for the CAMPO1 field */
	const CAMPO1 = 'docum_cc.CAMPO1';

	/** the column name for the CAMPO2 field */
	const CAMPO2 = 'docum_cc.CAMPO2';

	/** the column name for the CAMPO3 field */
	const CAMPO3 = 'docum_cc.CAMPO3';

	/** the column name for the CAMPO4 field */
	const CAMPO4 = 'docum_cc.CAMPO4';

	/** the column name for the CAMPO5 field */
	const CAMPO5 = 'docum_cc.CAMPO5';

	/** the column name for the CAMPO6 field */
	const CAMPO6 = 'docum_cc.CAMPO6';

	/** the column name for the CAMPO7 field */
	const CAMPO7 = 'docum_cc.CAMPO7';

	/** the column name for the CAMPO8 field */
	const CAMPO8 = 'docum_cc.CAMPO8';

	/** the column name for the CO_US_IN field */
	const CO_US_IN = 'docum_cc.CO_US_IN';

	/** the column name for the FE_US_IN field */
	const FE_US_IN = 'docum_cc.FE_US_IN';

	/** the column name for the CO_US_MO field */
	const CO_US_MO = 'docum_cc.CO_US_MO';

	/** the column name for the FE_US_MO field */
	const FE_US_MO = 'docum_cc.FE_US_MO';

	/** the column name for the CO_US_EL field */
	const CO_US_EL = 'docum_cc.CO_US_EL';

	/** the column name for the FE_US_EL field */
	const FE_US_EL = 'docum_cc.FE_US_EL';

	/** the column name for the REVISADO field */
	const REVISADO = 'docum_cc.REVISADO';

	/** the column name for the TRASNFE field */
	const TRASNFE = 'docum_cc.TRASNFE';

	/** the column name for the NUMCON field */
	const NUMCON = 'docum_cc.NUMCON';

	/** the column name for the CO_SUCU field */
	const CO_SUCU = 'docum_cc.CO_SUCU';

	/** the column name for the ROWGUID field */
	const ROWGUID = 'docum_cc.ROWGUID';

	/** the column name for the MON_ILC field */
	const MON_ILC = 'docum_cc.MON_ILC';

	/** the column name for the OTROS1 field */
	const OTROS1 = 'docum_cc.OTROS1';

	/** the column name for the OTROS2 field */
	const OTROS2 = 'docum_cc.OTROS2';

	/** the column name for the OTROS3 field */
	const OTROS3 = 'docum_cc.OTROS3';

	/** the column name for the RENG_SI field */
	const RENG_SI = 'docum_cc.RENG_SI';

	/** the column name for the COMIS5 field */
	const COMIS5 = 'docum_cc.COMIS5';

	/** the column name for the COMIS6 field */
	const COMIS6 = 'docum_cc.COMIS6';

	/** the column name for the ROW_ID field */
	const ROW_ID = 'docum_cc.ROW_ID';

	/** the column name for the AUX01 field */
	const AUX01 = 'docum_cc.AUX01';

	/** the column name for the AUX02 field */
	const AUX02 = 'docum_cc.AUX02';

	/** the column name for the SALESTAX field */
	const SALESTAX = 'docum_cc.SALESTAX';

	/** the column name for the ORIGEN field */
	const ORIGEN = 'docum_cc.ORIGEN';

	/** the column name for the ORIGEN_D field */
	const ORIGEN_D = 'docum_cc.ORIGEN_D';

	/** the column name for the FEC_REG field */
	const FEC_REG = 'docum_cc.FEC_REG';

	/**
	 * An identiy map to hold any loaded instances of DocumCc objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array DocumCc[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('TipoDoc', 'NroDoc', 'Anulado', 'Movi', 'Aut', 'NumControl', 'CoCli', 'Contrib', 'FecEmis', 'FecVenc', 'Observa', 'DocOrig', 'NroOrig', 'CoBan', 'NroChe', 'CoVen', 'Tipo', 'Tasa', 'Moneda', 'MontoImp', 'MontoGen', 'MontoA1', 'MontoA2', 'MontoBru', 'Descuentos', 'MontoDes', 'Recargo', 'MontoRec', 'MontoOtr', 'MontoNet', 'Saldo', 'Feccom', 'Numcom', 'DisCen', 'Comis1', 'Comis2', 'Comis3', 'Comis4', 'Adicional', 'Campo1', 'Campo2', 'Campo3', 'Campo4', 'Campo5', 'Campo6', 'Campo7', 'Campo8', 'CoUsIn', 'FeUsIn', 'CoUsMo', 'FeUsMo', 'CoUsEl', 'FeUsEl', 'Revisado', 'Trasnfe', 'Numcon', 'CoSucu', 'Rowguid', 'MonIlc', 'Otros1', 'Otros2', 'Otros3', 'RengSi', 'Comis5', 'Comis6', 'RowId', 'Aux01', 'Aux02', 'Salestax', 'Origen', 'OrigenD', 'FecReg', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('tipoDoc', 'nroDoc', 'anulado', 'movi', 'aut', 'numControl', 'coCli', 'contrib', 'fecEmis', 'fecVenc', 'observa', 'docOrig', 'nroOrig', 'coBan', 'nroChe', 'coVen', 'tipo', 'tasa', 'moneda', 'montoImp', 'montoGen', 'montoA1', 'montoA2', 'montoBru', 'descuentos', 'montoDes', 'recargo', 'montoRec', 'montoOtr', 'montoNet', 'saldo', 'feccom', 'numcom', 'disCen', 'comis1', 'comis2', 'comis3', 'comis4', 'adicional', 'campo1', 'campo2', 'campo3', 'campo4', 'campo5', 'campo6', 'campo7', 'campo8', 'coUsIn', 'feUsIn', 'coUsMo', 'feUsMo', 'coUsEl', 'feUsEl', 'revisado', 'trasnfe', 'numcon', 'coSucu', 'rowguid', 'monIlc', 'otros1', 'otros2', 'otros3', 'rengSi', 'comis5', 'comis6', 'rowId', 'aux01', 'aux02', 'salestax', 'origen', 'origenD', 'fecReg', ),
		BasePeer::TYPE_COLNAME => array (self::TIPO_DOC, self::NRO_DOC, self::ANULADO, self::MOVI, self::AUT, self::NUM_CONTROL, self::CO_CLI, self::CONTRIB, self::FEC_EMIS, self::FEC_VENC, self::OBSERVA, self::DOC_ORIG, self::NRO_ORIG, self::CO_BAN, self::NRO_CHE, self::CO_VEN, self::TIPO, self::TASA, self::MONEDA, self::MONTO_IMP, self::MONTO_GEN, self::MONTO_A1, self::MONTO_A2, self::MONTO_BRU, self::DESCUENTOS, self::MONTO_DES, self::RECARGO, self::MONTO_REC, self::MONTO_OTR, self::MONTO_NET, self::SALDO, self::FECCOM, self::NUMCOM, self::DIS_CEN, self::COMIS1, self::COMIS2, self::COMIS3, self::COMIS4, self::ADICIONAL, self::CAMPO1, self::CAMPO2, self::CAMPO3, self::CAMPO4, self::CAMPO5, self::CAMPO6, self::CAMPO7, self::CAMPO8, self::CO_US_IN, self::FE_US_IN, self::CO_US_MO, self::FE_US_MO, self::CO_US_EL, self::FE_US_EL, self::REVISADO, self::TRASNFE, self::NUMCON, self::CO_SUCU, self::ROWGUID, self::MON_ILC, self::OTROS1, self::OTROS2, self::OTROS3, self::RENG_SI, self::COMIS5, self::COMIS6, self::ROW_ID, self::AUX01, self::AUX02, self::SALESTAX, self::ORIGEN, self::ORIGEN_D, self::FEC_REG, ),
		BasePeer::TYPE_FIELDNAME => array ('tipo_doc', 'nro_doc', 'anulado', 'movi', 'aut', 'num_control', 'co_cli', 'contrib', 'fec_emis', 'fec_venc', 'observa', 'doc_orig', 'nro_orig', 'co_ban', 'nro_che', 'co_ven', 'tipo', 'tasa', 'moneda', 'monto_imp', 'monto_gen', 'monto_a1', 'monto_a2', 'monto_bru', 'descuentos', 'monto_des', 'recargo', 'monto_rec', 'monto_otr', 'monto_net', 'saldo', 'feccom', 'numcom', 'dis_cen', 'comis1', 'comis2', 'comis3', 'comis4', 'adicional', 'campo1', 'campo2', 'campo3', 'campo4', 'campo5', 'campo6', 'campo7', 'campo8', 'co_us_in', 'fe_us_in', 'co_us_mo', 'fe_us_mo', 'co_us_el', 'fe_us_el', 'revisado', 'trasnfe', 'numcon', 'co_sucu', 'rowguid', 'mon_ilc', 'otros1', 'otros2', 'otros3', 'reng_si', 'comis5', 'comis6', 'row_id', 'aux01', 'aux02', 'salestax', 'origen', 'origen_d', 'fec_reg', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('TipoDoc' => 0, 'NroDoc' => 1, 'Anulado' => 2, 'Movi' => 3, 'Aut' => 4, 'NumControl' => 5, 'CoCli' => 6, 'Contrib' => 7, 'FecEmis' => 8, 'FecVenc' => 9, 'Observa' => 10, 'DocOrig' => 11, 'NroOrig' => 12, 'CoBan' => 13, 'NroChe' => 14, 'CoVen' => 15, 'Tipo' => 16, 'Tasa' => 17, 'Moneda' => 18, 'MontoImp' => 19, 'MontoGen' => 20, 'MontoA1' => 21, 'MontoA2' => 22, 'MontoBru' => 23, 'Descuentos' => 24, 'MontoDes' => 25, 'Recargo' => 26, 'MontoRec' => 27, 'MontoOtr' => 28, 'MontoNet' => 29, 'Saldo' => 30, 'Feccom' => 31, 'Numcom' => 32, 'DisCen' => 33, 'Comis1' => 34, 'Comis2' => 35, 'Comis3' => 36, 'Comis4' => 37, 'Adicional' => 38, 'Campo1' => 39, 'Campo2' => 40, 'Campo3' => 41, 'Campo4' => 42, 'Campo5' => 43, 'Campo6' => 44, 'Campo7' => 45, 'Campo8' => 46, 'CoUsIn' => 47, 'FeUsIn' => 48, 'CoUsMo' => 49, 'FeUsMo' => 50, 'CoUsEl' => 51, 'FeUsEl' => 52, 'Revisado' => 53, 'Trasnfe' => 54, 'Numcon' => 55, 'CoSucu' => 56, 'Rowguid' => 57, 'MonIlc' => 58, 'Otros1' => 59, 'Otros2' => 60, 'Otros3' => 61, 'RengSi' => 62, 'Comis5' => 63, 'Comis6' => 64, 'RowId' => 65, 'Aux01' => 66, 'Aux02' => 67, 'Salestax' => 68, 'Origen' => 69, 'OrigenD' => 70, 'FecReg' => 71, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('tipoDoc' => 0, 'nroDoc' => 1, 'anulado' => 2, 'movi' => 3, 'aut' => 4, 'numControl' => 5, 'coCli' => 6, 'contrib' => 7, 'fecEmis' => 8, 'fecVenc' => 9, 'observa' => 10, 'docOrig' => 11, 'nroOrig' => 12, 'coBan' => 13, 'nroChe' => 14, 'coVen' => 15, 'tipo' => 16, 'tasa' => 17, 'moneda' => 18, 'montoImp' => 19, 'montoGen' => 20, 'montoA1' => 21, 'montoA2' => 22, 'montoBru' => 23, 'descuentos' => 24, 'montoDes' => 25, 'recargo' => 26, 'montoRec' => 27, 'montoOtr' => 28, 'montoNet' => 29, 'saldo' => 30, 'feccom' => 31, 'numcom' => 32, 'disCen' => 33, 'comis1' => 34, 'comis2' => 35, 'comis3' => 36, 'comis4' => 37, 'adicional' => 38, 'campo1' => 39, 'campo2' => 40, 'campo3' => 41, 'campo4' => 42, 'campo5' => 43, 'campo6' => 44, 'campo7' => 45, 'campo8' => 46, 'coUsIn' => 47, 'feUsIn' => 48, 'coUsMo' => 49, 'feUsMo' => 50, 'coUsEl' => 51, 'feUsEl' => 52, 'revisado' => 53, 'trasnfe' => 54, 'numcon' => 55, 'coSucu' => 56, 'rowguid' => 57, 'monIlc' => 58, 'otros1' => 59, 'otros2' => 60, 'otros3' => 61, 'rengSi' => 62, 'comis5' => 63, 'comis6' => 64, 'rowId' => 65, 'aux01' => 66, 'aux02' => 67, 'salestax' => 68, 'origen' => 69, 'origenD' => 70, 'fecReg' => 71, ),
		BasePeer::TYPE_COLNAME => array (self::TIPO_DOC => 0, self::NRO_DOC => 1, self::ANULADO => 2, self::MOVI => 3, self::AUT => 4, self::NUM_CONTROL => 5, self::CO_CLI => 6, self::CONTRIB => 7, self::FEC_EMIS => 8, self::FEC_VENC => 9, self::OBSERVA => 10, self::DOC_ORIG => 11, self::NRO_ORIG => 12, self::CO_BAN => 13, self::NRO_CHE => 14, self::CO_VEN => 15, self::TIPO => 16, self::TASA => 17, self::MONEDA => 18, self::MONTO_IMP => 19, self::MONTO_GEN => 20, self::MONTO_A1 => 21, self::MONTO_A2 => 22, self::MONTO_BRU => 23, self::DESCUENTOS => 24, self::MONTO_DES => 25, self::RECARGO => 26, self::MONTO_REC => 27, self::MONTO_OTR => 28, self::MONTO_NET => 29, self::SALDO => 30, self::FECCOM => 31, self::NUMCOM => 32, self::DIS_CEN => 33, self::COMIS1 => 34, self::COMIS2 => 35, self::COMIS3 => 36, self::COMIS4 => 37, self::ADICIONAL => 38, self::CAMPO1 => 39, self::CAMPO2 => 40, self::CAMPO3 => 41, self::CAMPO4 => 42, self::CAMPO5 => 43, self::CAMPO6 => 44, self::CAMPO7 => 45, self::CAMPO8 => 46, self::CO_US_IN => 47, self::FE_US_IN => 48, self::CO_US_MO => 49, self::FE_US_MO => 50, self::CO_US_EL => 51, self::FE_US_EL => 52, self::REVISADO => 53, self::TRASNFE => 54, self::NUMCON => 55, self::CO_SUCU => 56, self::ROWGUID => 57, self::MON_ILC => 58, self::OTROS1 => 59, self::OTROS2 => 60, self::OTROS3 => 61, self::RENG_SI => 62, self::COMIS5 => 63, self::COMIS6 => 64, self::ROW_ID => 65, self::AUX01 => 66, self::AUX02 => 67, self::SALESTAX => 68, self::ORIGEN => 69, self::ORIGEN_D => 70, self::FEC_REG => 71, ),
		BasePeer::TYPE_FIELDNAME => array ('tipo_doc' => 0, 'nro_doc' => 1, 'anulado' => 2, 'movi' => 3, 'aut' => 4, 'num_control' => 5, 'co_cli' => 6, 'contrib' => 7, 'fec_emis' => 8, 'fec_venc' => 9, 'observa' => 10, 'doc_orig' => 11, 'nro_orig' => 12, 'co_ban' => 13, 'nro_che' => 14, 'co_ven' => 15, 'tipo' => 16, 'tasa' => 17, 'moneda' => 18, 'monto_imp' => 19, 'monto_gen' => 20, 'monto_a1' => 21, 'monto_a2' => 22, 'monto_bru' => 23, 'descuentos' => 24, 'monto_des' => 25, 'recargo' => 26, 'monto_rec' => 27, 'monto_otr' => 28, 'monto_net' => 29, 'saldo' => 30, 'feccom' => 31, 'numcom' => 32, 'dis_cen' => 33, 'comis1' => 34, 'comis2' => 35, 'comis3' => 36, 'comis4' => 37, 'adicional' => 38, 'campo1' => 39, 'campo2' => 40, 'campo3' => 41, 'campo4' => 42, 'campo5' => 43, 'campo6' => 44, 'campo7' => 45, 'campo8' => 46, 'co_us_in' => 47, 'fe_us_in' => 48, 'co_us_mo' => 49, 'fe_us_mo' => 50, 'co_us_el' => 51, 'fe_us_el' => 52, 'revisado' => 53, 'trasnfe' => 54, 'numcon' => 55, 'co_sucu' => 56, 'rowguid' => 57, 'mon_ilc' => 58, 'otros1' => 59, 'otros2' => 60, 'otros3' => 61, 'reng_si' => 62, 'comis5' => 63, 'comis6' => 64, 'row_id' => 65, 'aux01' => 66, 'aux02' => 67, 'salestax' => 68, 'origen' => 69, 'origen_d' => 70, 'fec_reg' => 71, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new DocumCcMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. DocumCcPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(DocumCcPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(DocumCcPeer::TIPO_DOC);

		$criteria->addSelectColumn(DocumCcPeer::NRO_DOC);

		$criteria->addSelectColumn(DocumCcPeer::ANULADO);

		$criteria->addSelectColumn(DocumCcPeer::MOVI);

		$criteria->addSelectColumn(DocumCcPeer::AUT);

		$criteria->addSelectColumn(DocumCcPeer::NUM_CONTROL);

		$criteria->addSelectColumn(DocumCcPeer::CO_CLI);

		$criteria->addSelectColumn(DocumCcPeer::CONTRIB);

		$criteria->addSelectColumn(DocumCcPeer::FEC_EMIS);

		$criteria->addSelectColumn(DocumCcPeer::FEC_VENC);

		$criteria->addSelectColumn(DocumCcPeer::OBSERVA);

		$criteria->addSelectColumn(DocumCcPeer::DOC_ORIG);

		$criteria->addSelectColumn(DocumCcPeer::NRO_ORIG);

		$criteria->addSelectColumn(DocumCcPeer::CO_BAN);

		$criteria->addSelectColumn(DocumCcPeer::NRO_CHE);

		$criteria->addSelectColumn(DocumCcPeer::CO_VEN);

		$criteria->addSelectColumn(DocumCcPeer::TIPO);

		$criteria->addSelectColumn(DocumCcPeer::TASA);

		$criteria->addSelectColumn(DocumCcPeer::MONEDA);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_IMP);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_GEN);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_A1);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_A2);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_BRU);

		$criteria->addSelectColumn(DocumCcPeer::DESCUENTOS);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_DES);

		$criteria->addSelectColumn(DocumCcPeer::RECARGO);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_REC);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_OTR);

		$criteria->addSelectColumn(DocumCcPeer::MONTO_NET);

		$criteria->addSelectColumn(DocumCcPeer::SALDO);

		$criteria->addSelectColumn(DocumCcPeer::FECCOM);

		$criteria->addSelectColumn(DocumCcPeer::NUMCOM);

		$criteria->addSelectColumn(DocumCcPeer::DIS_CEN);

		$criteria->addSelectColumn(DocumCcPeer::COMIS1);

		$criteria->addSelectColumn(DocumCcPeer::COMIS2);

		$criteria->addSelectColumn(DocumCcPeer::COMIS3);

		$criteria->addSelectColumn(DocumCcPeer::COMIS4);

		$criteria->addSelectColumn(DocumCcPeer::ADICIONAL);

		$criteria->addSelectColumn(DocumCcPeer::CAMPO1);

		$criteria->addSelectColumn(DocumCcPeer::CAMPO2);

		$criteria->addSelectColumn(DocumCcPeer::CAMPO3);

		$criteria->addSelectColumn(DocumCcPeer::CAMPO4);

		$criteria->addSelectColumn(DocumCcPeer::CAMPO5);

		$criteria->addSelectColumn(DocumCcPeer::CAMPO6);

		$criteria->addSelectColumn(DocumCcPeer::CAMPO7);

		$criteria->addSelectColumn(DocumCcPeer::CAMPO8);

		$criteria->addSelectColumn(DocumCcPeer::CO_US_IN);

		$criteria->addSelectColumn(DocumCcPeer::FE_US_IN);

		$criteria->addSelectColumn(DocumCcPeer::CO_US_MO);

		$criteria->addSelectColumn(DocumCcPeer::FE_US_MO);

		$criteria->addSelectColumn(DocumCcPeer::CO_US_EL);

		$criteria->addSelectColumn(DocumCcPeer::FE_US_EL);

		$criteria->addSelectColumn(DocumCcPeer::REVISADO);

		$criteria->addSelectColumn(DocumCcPeer::TRASNFE);

		$criteria->addSelectColumn(DocumCcPeer::NUMCON);

		$criteria->addSelectColumn(DocumCcPeer::CO_SUCU);

		$criteria->addSelectColumn(DocumCcPeer::ROWGUID);

		$criteria->addSelectColumn(DocumCcPeer::MON_ILC);

		$criteria->addSelectColumn(DocumCcPeer::OTROS1);

		$criteria->addSelectColumn(DocumCcPeer::OTROS2);

		$criteria->addSelectColumn(DocumCcPeer::OTROS3);

		$criteria->addSelectColumn(DocumCcPeer::RENG_SI);

		$criteria->addSelectColumn(DocumCcPeer::COMIS5);

		$criteria->addSelectColumn(DocumCcPeer::COMIS6);

		$criteria->addSelectColumn(DocumCcPeer::ROW_ID);

		$criteria->addSelectColumn(DocumCcPeer::AUX01);

		$criteria->addSelectColumn(DocumCcPeer::AUX02);

		$criteria->addSelectColumn(DocumCcPeer::SALESTAX);

		$criteria->addSelectColumn(DocumCcPeer::ORIGEN);

		$criteria->addSelectColumn(DocumCcPeer::ORIGEN_D);

		$criteria->addSelectColumn(DocumCcPeer::FEC_REG);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DocumCcPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     DocumCc
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = DocumCcPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return DocumCcPeer::populateObjects(DocumCcPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			DocumCcPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      DocumCc $value A DocumCc object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(DocumCc $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = serialize(array((string) $obj->getTipoDoc(), (string) $obj->getNroDoc()));
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A DocumCc object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof DocumCc) {
				$key = serialize(array((string) $value->getTipoDoc(), (string) $value->getNroDoc()));
			} elseif (is_array($value) && count($value) === 2) {
				// assume we've been passed a primary key
				$key = serialize(array((string) $value[0], (string) $value[1]));
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or DocumCc object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     DocumCc Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null && $row[$startcol + 1] === null) {
			return null;
		}
		return serialize(array((string) $row[$startcol + 0], (string) $row[$startcol + 1]));
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = DocumCcPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = DocumCcPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				DocumCcPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Clientes table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinClientes(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DocumCcPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);


    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Vendedor table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinVendedor(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DocumCcPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);


    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tabulado table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTabulado(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DocumCcPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);


    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MonedaRelatedByMoneda table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinMonedaRelatedByMoneda(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DocumCcPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);


    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Almacen table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlmacen(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DocumCcPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);


    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with their Clientes objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinClientes(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);
		ClientesPeer::addSelectColumns($c);

		$c->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ClientesPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ClientesPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ClientesPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ClientesPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (DocumCc) to $obj2 (Clientes)
				$obj2->addDocumCc($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with their Vendedor objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinVendedor(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);
		VendedorPeer::addSelectColumns($c);

		$c->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = VendedorPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = VendedorPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					VendedorPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (DocumCc) to $obj2 (Vendedor)
				$obj2->addDocumCc($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with their Tabulado objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTabulado(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);
		TabuladoPeer::addSelectColumns($c);

		$c->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TabuladoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = TabuladoPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TabuladoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (DocumCc) to $obj2 (Tabulado)
				$obj2->addDocumCc($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with their Moneda objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinMonedaRelatedByMoneda(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);
		MonedaPeer::addSelectColumns($c);

		$c->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = MonedaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = MonedaPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					MonedaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (DocumCc) to $obj2 (Moneda)
				$obj2->addDocumCc($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with their Almacen objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlmacen(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);
		AlmacenPeer::addSelectColumns($c);

		$c->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlmacenPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlmacenPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = AlmacenPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlmacenPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (DocumCc) to $obj2 (Almacen)
				$obj2->addDocumCc($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DocumCcPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
		$criteria->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
		$criteria->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
		$criteria->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
		$criteria->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of DocumCc objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol2 = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);

		ClientesPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

		MonedaPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (MonedaPeer::NUM_COLUMNS - MonedaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlmacenPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (AlmacenPeer::NUM_COLUMNS - AlmacenPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
		$c->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
		$c->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
		$c->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
		$c->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Clientes rows

			$key2 = ClientesPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = ClientesPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ClientesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientesPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (DocumCc) to the collection in $obj2 (Clientes)
				$obj2->addDocumCc($obj1);
			} // if joined row not null

			// Add objects for joined Vendedor rows

			$key3 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = VendedorPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					VendedorPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (DocumCc) to the collection in $obj3 (Vendedor)
				$obj3->addDocumCc($obj1);
			} // if joined row not null

			// Add objects for joined Tabulado rows

			$key4 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = TabuladoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TabuladoPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (DocumCc) to the collection in $obj4 (Tabulado)
				$obj4->addDocumCc($obj1);
			} // if joined row not null

			// Add objects for joined Moneda rows

			$key5 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = MonedaPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$omClass = MonedaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MonedaPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (DocumCc) to the collection in $obj5 (Moneda)
				$obj5->addDocumCc($obj1);
			} // if joined row not null

			// Add objects for joined Almacen rows

			$key6 = AlmacenPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlmacenPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$omClass = AlmacenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlmacenPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (DocumCc) to the collection in $obj6 (Almacen)
				$obj6->addDocumCc($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Clientes table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptClientes(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Vendedor table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptVendedor(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tabulado table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTabulado(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MonedaRelatedByMoneda table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMonedaRelatedByMoneda(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Almacen table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlmacen(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DocumCcPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
				$criteria->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with all related objects except Clientes.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptClientes(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol2 = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

		MonedaPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (MonedaPeer::NUM_COLUMNS - MonedaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlmacenPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (AlmacenPeer::NUM_COLUMNS - AlmacenPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Vendedor rows

				$key2 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = VendedorPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					VendedorPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj2 (Vendedor)
				$obj2->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key3 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TabuladoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TabuladoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj3 (Tabulado)
				$obj3->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Moneda rows

				$key4 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = MonedaPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = MonedaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					MonedaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj4 (Moneda)
				$obj4->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Almacen rows

				$key5 = AlmacenPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = AlmacenPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = AlmacenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlmacenPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj5 (Almacen)
				$obj5->addDocumCc($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with all related objects except Vendedor.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptVendedor(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol2 = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);

		ClientesPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

		MonedaPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (MonedaPeer::NUM_COLUMNS - MonedaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlmacenPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (AlmacenPeer::NUM_COLUMNS - AlmacenPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Clientes rows

				$key2 = ClientesPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientesPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientesPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj2 (Clientes)
				$obj2->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key3 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TabuladoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TabuladoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj3 (Tabulado)
				$obj3->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Moneda rows

				$key4 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = MonedaPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = MonedaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					MonedaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj4 (Moneda)
				$obj4->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Almacen rows

				$key5 = AlmacenPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = AlmacenPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = AlmacenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlmacenPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj5 (Almacen)
				$obj5->addDocumCc($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with all related objects except Tabulado.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTabulado(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol2 = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);

		ClientesPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		MonedaPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (MonedaPeer::NUM_COLUMNS - MonedaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlmacenPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (AlmacenPeer::NUM_COLUMNS - AlmacenPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Clientes rows

				$key2 = ClientesPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientesPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientesPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj2 (Clientes)
				$obj2->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Vendedor rows

				$key3 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = VendedorPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					VendedorPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj3 (Vendedor)
				$obj3->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Moneda rows

				$key4 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = MonedaPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = MonedaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					MonedaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj4 (Moneda)
				$obj4->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Almacen rows

				$key5 = AlmacenPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = AlmacenPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = AlmacenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlmacenPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj5 (Almacen)
				$obj5->addDocumCc($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with all related objects except MonedaRelatedByMoneda.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMonedaRelatedByMoneda(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol2 = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);

		ClientesPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlmacenPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (AlmacenPeer::NUM_COLUMNS - AlmacenPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::CO_SUCU,), array(AlmacenPeer::CO_ALMA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Clientes rows

				$key2 = ClientesPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientesPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientesPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj2 (Clientes)
				$obj2->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Vendedor rows

				$key3 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = VendedorPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					VendedorPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj3 (Vendedor)
				$obj3->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key4 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TabuladoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TabuladoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj4 (Tabulado)
				$obj4->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Almacen rows

				$key5 = AlmacenPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = AlmacenPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = AlmacenPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlmacenPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj5 (Almacen)
				$obj5->addDocumCc($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of DocumCc objects pre-filled with all related objects except Almacen.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of DocumCc objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlmacen(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		DocumCcPeer::addSelectColumns($c);
		$startcol2 = (DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS);

		ClientesPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		TabuladoPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (TabuladoPeer::NUM_COLUMNS - TabuladoPeer::NUM_LAZY_LOAD_COLUMNS);

		MonedaPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (MonedaPeer::NUM_COLUMNS - MonedaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(DocumCcPeer::CO_CLI,), array(ClientesPeer::CO_CLI,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::TIPO,), array(TabuladoPeer::TIPO,), $join_behavior);
				$c->addJoin(array(DocumCcPeer::MONEDA,), array(MonedaPeer::CO_MONE,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DocumCcPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DocumCcPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = DocumCcPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				DocumCcPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Clientes rows

				$key2 = ClientesPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientesPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientesPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientesPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj2 (Clientes)
				$obj2->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Vendedor rows

				$key3 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = VendedorPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					VendedorPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj3 (Vendedor)
				$obj3->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Tabulado rows

				$key4 = TabuladoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TabuladoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = TabuladoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TabuladoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj4 (Tabulado)
				$obj4->addDocumCc($obj1);

			} // if joined row is not null

				// Add objects for joined Moneda rows

				$key5 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = MonedaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = MonedaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MonedaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (DocumCc) to the collection in $obj5 (Moneda)
				$obj5->addDocumCc($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return DocumCcPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a DocumCc or Criteria object.
	 *
	 * @param      mixed $values Criteria or DocumCc object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseDocumCcPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from DocumCc object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseDocumCcPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a DocumCc or Criteria object.
	 *
	 * @param      mixed $values Criteria or DocumCc object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseDocumCcPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(DocumCcPeer::TIPO_DOC);
			$selectCriteria->add(DocumCcPeer::TIPO_DOC, $criteria->remove(DocumCcPeer::TIPO_DOC), $comparison);

			$comparison = $criteria->getComparison(DocumCcPeer::NRO_DOC);
			$selectCriteria->add(DocumCcPeer::NRO_DOC, $criteria->remove(DocumCcPeer::NRO_DOC), $comparison);

		} else { // $values is DocumCc object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseDocumCcPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseDocumCcPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the docum_cc table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(DocumCcPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a DocumCc or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or DocumCc object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			DocumCcPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof DocumCc) {
			// invalidate the cache for this single object
			DocumCcPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			// primary key is composite; we therefore, expect
			// the primary key passed to be an array of pkey
			// values
			if (count($values) == count($values, COUNT_RECURSIVE)) {
				// array is not multi-dimensional
				$values = array($values);
			}

			foreach ($values as $value) {

				$criterion = $criteria->getNewCriterion(DocumCcPeer::TIPO_DOC, $value[0]);
				$criterion->addAnd($criteria->getNewCriterion(DocumCcPeer::NRO_DOC, $value[1]));
				$criteria->addOr($criterion);

				// we can invalidate the cache for this single PK
				DocumCcPeer::removeInstanceFromPool($value);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given DocumCc object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      DocumCc $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(DocumCc $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(DocumCcPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(DocumCcPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(DocumCcPeer::DATABASE_NAME, DocumCcPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = DocumCcPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve object using using composite pkey values.
	 * @param      string $tipo_doc
	   @param      int $nro_doc
	   
	 * @param      PropelPDO $con
	 * @return     DocumCc
	 */
	public static function retrieveByPK($tipo_doc, $nro_doc, PropelPDO $con = null) {
		$key = serialize(array((string) $tipo_doc, (string) $nro_doc));
 		if (null !== ($obj = DocumCcPeer::getInstanceFromPool($key))) {
 			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$criteria = new Criteria(DocumCcPeer::DATABASE_NAME);
		$criteria->add(DocumCcPeer::TIPO_DOC, $tipo_doc);
		$criteria->add(DocumCcPeer::NRO_DOC, $nro_doc);
		$v = DocumCcPeer::doSelect($criteria, $con);

		return !empty($v) ? $v[0] : null;
	}
} // BaseDocumCcPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the DocumCcPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the DocumCcPeer class:
//
// Propel::getDatabaseMap(DocumCcPeer::DATABASE_NAME)->addTableBuilder(DocumCcPeer::TABLE_NAME, DocumCcPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseDocumCcPeer::DATABASE_NAME)->addTableBuilder(BaseDocumCcPeer::TABLE_NAME, BaseDocumCcPeer::getMapBuilder());

