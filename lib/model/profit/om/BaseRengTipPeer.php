<?php

/**
 * Base static class for performing query and update operations on the 'reng_tip' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Mon Dec  7 22:53:41 2009
 *
 * @package    lib.model.profit.om
 */
abstract class BaseRengTipPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'profit';

	/** the table name for this class */
	const TABLE_NAME = 'reng_tip';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.profit.RengTip';

	/** The total number of columns. */
	const NUM_COLUMNS = 18;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the COB_NUM field */
	const COB_NUM = 'reng_tip.COB_NUM';

	/** the column name for the RENG_NUM field */
	const RENG_NUM = 'reng_tip.RENG_NUM';

	/** the column name for the TIP_COB field */
	const TIP_COB = 'reng_tip.TIP_COB';

	/** the column name for the MOVI field */
	const MOVI = 'reng_tip.MOVI';

	/** the column name for the NUM_DOC field */
	const NUM_DOC = 'reng_tip.NUM_DOC';

	/** the column name for the MONT_DOC field */
	const MONT_DOC = 'reng_tip.MONT_DOC';

	/** the column name for the MONT_TMP field */
	const MONT_TMP = 'reng_tip.MONT_TMP';

	/** the column name for the MONEDA field */
	const MONEDA = 'reng_tip.MONEDA';

	/** the column name for the BANCO field */
	const BANCO = 'reng_tip.BANCO';

	/** the column name for the COD_CAJA field */
	const COD_CAJA = 'reng_tip.COD_CAJA';

	/** the column name for the DES_CAJA field */
	const DES_CAJA = 'reng_tip.DES_CAJA';

	/** the column name for the FEC_CHEQ field */
	const FEC_CHEQ = 'reng_tip.FEC_CHEQ';

	/** the column name for the NOMBRE_BAN field */
	const NOMBRE_BAN = 'reng_tip.NOMBRE_BAN';

	/** the column name for the NUMERO field */
	const NUMERO = 'reng_tip.NUMERO';

	/** the column name for the DEVUELTO field */
	const DEVUELTO = 'reng_tip.DEVUELTO';

	/** the column name for the ROWGUID field */
	const ROWGUID = 'reng_tip.ROWGUID';

	/** the column name for the OPERADOR field */
	const OPERADOR = 'reng_tip.OPERADOR';

	/** the column name for the CLAVE field */
	const CLAVE = 'reng_tip.CLAVE';

	/**
	 * An identiy map to hold any loaded instances of RengTip objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array RengTip[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('CobNum', 'RengNum', 'TipCob', 'Movi', 'NumDoc', 'MontDoc', 'MontTmp', 'Moneda', 'Banco', 'CodCaja', 'DesCaja', 'FecCheq', 'NombreBan', 'Numero', 'Devuelto', 'Rowguid', 'Operador', 'Clave', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('cobNum', 'rengNum', 'tipCob', 'movi', 'numDoc', 'montDoc', 'montTmp', 'moneda', 'banco', 'codCaja', 'desCaja', 'fecCheq', 'nombreBan', 'numero', 'devuelto', 'rowguid', 'operador', 'clave', ),
		BasePeer::TYPE_COLNAME => array (self::COB_NUM, self::RENG_NUM, self::TIP_COB, self::MOVI, self::NUM_DOC, self::MONT_DOC, self::MONT_TMP, self::MONEDA, self::BANCO, self::COD_CAJA, self::DES_CAJA, self::FEC_CHEQ, self::NOMBRE_BAN, self::NUMERO, self::DEVUELTO, self::ROWGUID, self::OPERADOR, self::CLAVE, ),
		BasePeer::TYPE_FIELDNAME => array ('cob_num', 'reng_num', 'tip_cob', 'movi', 'num_doc', 'mont_doc', 'mont_tmp', 'moneda', 'banco', 'cod_caja', 'des_caja', 'fec_cheq', 'nombre_ban', 'numero', 'devuelto', 'rowguid', 'operador', 'clave', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('CobNum' => 0, 'RengNum' => 1, 'TipCob' => 2, 'Movi' => 3, 'NumDoc' => 4, 'MontDoc' => 5, 'MontTmp' => 6, 'Moneda' => 7, 'Banco' => 8, 'CodCaja' => 9, 'DesCaja' => 10, 'FecCheq' => 11, 'NombreBan' => 12, 'Numero' => 13, 'Devuelto' => 14, 'Rowguid' => 15, 'Operador' => 16, 'Clave' => 17, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('cobNum' => 0, 'rengNum' => 1, 'tipCob' => 2, 'movi' => 3, 'numDoc' => 4, 'montDoc' => 5, 'montTmp' => 6, 'moneda' => 7, 'banco' => 8, 'codCaja' => 9, 'desCaja' => 10, 'fecCheq' => 11, 'nombreBan' => 12, 'numero' => 13, 'devuelto' => 14, 'rowguid' => 15, 'operador' => 16, 'clave' => 17, ),
		BasePeer::TYPE_COLNAME => array (self::COB_NUM => 0, self::RENG_NUM => 1, self::TIP_COB => 2, self::MOVI => 3, self::NUM_DOC => 4, self::MONT_DOC => 5, self::MONT_TMP => 6, self::MONEDA => 7, self::BANCO => 8, self::COD_CAJA => 9, self::DES_CAJA => 10, self::FEC_CHEQ => 11, self::NOMBRE_BAN => 12, self::NUMERO => 13, self::DEVUELTO => 14, self::ROWGUID => 15, self::OPERADOR => 16, self::CLAVE => 17, ),
		BasePeer::TYPE_FIELDNAME => array ('cob_num' => 0, 'reng_num' => 1, 'tip_cob' => 2, 'movi' => 3, 'num_doc' => 4, 'mont_doc' => 5, 'mont_tmp' => 6, 'moneda' => 7, 'banco' => 8, 'cod_caja' => 9, 'des_caja' => 10, 'fec_cheq' => 11, 'nombre_ban' => 12, 'numero' => 13, 'devuelto' => 14, 'rowguid' => 15, 'operador' => 16, 'clave' => 17, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new RengTipMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. RengTipPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(RengTipPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(RengTipPeer::COB_NUM);

		$criteria->addSelectColumn(RengTipPeer::RENG_NUM);

		$criteria->addSelectColumn(RengTipPeer::TIP_COB);

		$criteria->addSelectColumn(RengTipPeer::MOVI);

		$criteria->addSelectColumn(RengTipPeer::NUM_DOC);

		$criteria->addSelectColumn(RengTipPeer::MONT_DOC);

		$criteria->addSelectColumn(RengTipPeer::MONT_TMP);

		$criteria->addSelectColumn(RengTipPeer::MONEDA);

		$criteria->addSelectColumn(RengTipPeer::BANCO);

		$criteria->addSelectColumn(RengTipPeer::COD_CAJA);

		$criteria->addSelectColumn(RengTipPeer::DES_CAJA);

		$criteria->addSelectColumn(RengTipPeer::FEC_CHEQ);

		$criteria->addSelectColumn(RengTipPeer::NOMBRE_BAN);

		$criteria->addSelectColumn(RengTipPeer::NUMERO);

		$criteria->addSelectColumn(RengTipPeer::DEVUELTO);

		$criteria->addSelectColumn(RengTipPeer::ROWGUID);

		$criteria->addSelectColumn(RengTipPeer::OPERADOR);

		$criteria->addSelectColumn(RengTipPeer::CLAVE);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(RengTipPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			RengTipPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseRengTipPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseRengTipPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     RengTip
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = RengTipPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return RengTipPeer::populateObjects(RengTipPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengTipPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseRengTipPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			RengTipPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      RengTip $value A RengTip object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(RengTip $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = serialize(array((string) $obj->getCobNum(), (string) $obj->getRengNum()));
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A RengTip object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof RengTip) {
				$key = serialize(array((string) $value->getCobNum(), (string) $value->getRengNum()));
			} elseif (is_array($value) && count($value) === 2) {
				// assume we've been passed a primary key
				$key = serialize(array((string) $value[0], (string) $value[1]));
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or RengTip object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     RengTip Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null && $row[$startcol + 1] === null) {
			return null;
		}
		return serialize(array((string) $row[$startcol + 0], (string) $row[$startcol + 1]));
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = RengTipPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = RengTipPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = RengTipPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				RengTipPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return RengTipPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a RengTip or Criteria object.
	 *
	 * @param      mixed $values Criteria or RengTip object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengTipPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseRengTipPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from RengTip object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseRengTipPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseRengTipPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a RengTip or Criteria object.
	 *
	 * @param      mixed $values Criteria or RengTip object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengTipPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseRengTipPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(RengTipPeer::COB_NUM);
			$selectCriteria->add(RengTipPeer::COB_NUM, $criteria->remove(RengTipPeer::COB_NUM), $comparison);

			$comparison = $criteria->getComparison(RengTipPeer::RENG_NUM);
			$selectCriteria->add(RengTipPeer::RENG_NUM, $criteria->remove(RengTipPeer::RENG_NUM), $comparison);

		} else { // $values is RengTip object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseRengTipPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseRengTipPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the reng_tip table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(RengTipPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a RengTip or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or RengTip object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			RengTipPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof RengTip) {
			// invalidate the cache for this single object
			RengTipPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			// primary key is composite; we therefore, expect
			// the primary key passed to be an array of pkey
			// values
			if (count($values) == count($values, COUNT_RECURSIVE)) {
				// array is not multi-dimensional
				$values = array($values);
			}

			foreach ($values as $value) {

				$criterion = $criteria->getNewCriterion(RengTipPeer::COB_NUM, $value[0]);
				$criterion->addAnd($criteria->getNewCriterion(RengTipPeer::RENG_NUM, $value[1]));
				$criteria->addOr($criterion);

				// we can invalidate the cache for this single PK
				RengTipPeer::removeInstanceFromPool($value);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given RengTip object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      RengTip $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(RengTip $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(RengTipPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(RengTipPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(RengTipPeer::DATABASE_NAME, RengTipPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = RengTipPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve object using using composite pkey values.
	 * @param      int $cob_num
	   @param      int $reng_num
	   
	 * @param      PropelPDO $con
	 * @return     RengTip
	 */
	public static function retrieveByPK($cob_num, $reng_num, PropelPDO $con = null) {
		$key = serialize(array((string) $cob_num, (string) $reng_num));
 		if (null !== ($obj = RengTipPeer::getInstanceFromPool($key))) {
 			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(RengTipPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$criteria = new Criteria(RengTipPeer::DATABASE_NAME);
		$criteria->add(RengTipPeer::COB_NUM, $cob_num);
		$criteria->add(RengTipPeer::RENG_NUM, $reng_num);
		$v = RengTipPeer::doSelect($criteria, $con);

		return !empty($v) ? $v[0] : null;
	}
} // BaseRengTipPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the RengTipPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the RengTipPeer class:
//
// Propel::getDatabaseMap(RengTipPeer::DATABASE_NAME)->addTableBuilder(RengTipPeer::TABLE_NAME, RengTipPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseRengTipPeer::DATABASE_NAME)->addTableBuilder(BaseRengTipPeer::TABLE_NAME, BaseRengTipPeer::getMapBuilder());

