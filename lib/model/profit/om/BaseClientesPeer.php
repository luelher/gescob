<?php

/**
 * Base static class for performing query and update operations on the 'clientes' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Mon Dec  7 22:53:38 2009
 *
 * @package    lib.model.profit.om
 */
abstract class BaseClientesPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'profit';

	/** the table name for this class */
	const TABLE_NAME = 'clientes';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.profit.Clientes';

	/** The total number of columns. */
	const NUM_COLUMNS = 79;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the CO_CLI field */
	const CO_CLI = 'clientes.CO_CLI';

	/** the column name for the TIPO field */
	const TIPO = 'clientes.TIPO';

	/** the column name for the CLI_DES field */
	const CLI_DES = 'clientes.CLI_DES';

	/** the column name for the DIREC1 field */
	const DIREC1 = 'clientes.DIREC1';

	/** the column name for the DIREC2 field */
	const DIREC2 = 'clientes.DIREC2';

	/** the column name for the TELEFONOS field */
	const TELEFONOS = 'clientes.TELEFONOS';

	/** the column name for the FAX field */
	const FAX = 'clientes.FAX';

	/** the column name for the INACTIVO field */
	const INACTIVO = 'clientes.INACTIVO';

	/** the column name for the COMENTARIO field */
	const COMENTARIO = 'clientes.COMENTARIO';

	/** the column name for the RESPONS field */
	const RESPONS = 'clientes.RESPONS';

	/** the column name for the FECHA_REG field */
	const FECHA_REG = 'clientes.FECHA_REG';

	/** the column name for the PUNTAJE field */
	const PUNTAJE = 'clientes.PUNTAJE';

	/** the column name for the SALDO field */
	const SALDO = 'clientes.SALDO';

	/** the column name for the SALDO_INI field */
	const SALDO_INI = 'clientes.SALDO_INI';

	/** the column name for the FAC_ULT_VE field */
	const FAC_ULT_VE = 'clientes.FAC_ULT_VE';

	/** the column name for the FEC_ULT_VE field */
	const FEC_ULT_VE = 'clientes.FEC_ULT_VE';

	/** the column name for the NET_ULT_VE field */
	const NET_ULT_VE = 'clientes.NET_ULT_VE';

	/** the column name for the MONT_CRE field */
	const MONT_CRE = 'clientes.MONT_CRE';

	/** the column name for the PLAZ_PAG field */
	const PLAZ_PAG = 'clientes.PLAZ_PAG';

	/** the column name for the DESC_PPAGO field */
	const DESC_PPAGO = 'clientes.DESC_PPAGO';

	/** the column name for the CO_ZON field */
	const CO_ZON = 'clientes.CO_ZON';

	/** the column name for the CO_SEG field */
	const CO_SEG = 'clientes.CO_SEG';

	/** the column name for the CO_VEN field */
	const CO_VEN = 'clientes.CO_VEN';

	/** the column name for the DESC_GLOB field */
	const DESC_GLOB = 'clientes.DESC_GLOB';

	/** the column name for the HORAR_CAJA field */
	const HORAR_CAJA = 'clientes.HORAR_CAJA';

	/** the column name for the FRECU_VIST field */
	const FRECU_VIST = 'clientes.FRECU_VIST';

	/** the column name for the LUNES field */
	const LUNES = 'clientes.LUNES';

	/** the column name for the MARTES field */
	const MARTES = 'clientes.MARTES';

	/** the column name for the MIERCOLES field */
	const MIERCOLES = 'clientes.MIERCOLES';

	/** the column name for the JUEVES field */
	const JUEVES = 'clientes.JUEVES';

	/** the column name for the VIERNES field */
	const VIERNES = 'clientes.VIERNES';

	/** the column name for the SABADO field */
	const SABADO = 'clientes.SABADO';

	/** the column name for the DOMINGO field */
	const DOMINGO = 'clientes.DOMINGO';

	/** the column name for the DIR_ENT2 field */
	const DIR_ENT2 = 'clientes.DIR_ENT2';

	/** the column name for the TIPO_IVA field */
	const TIPO_IVA = 'clientes.TIPO_IVA';

	/** the column name for the IVA field */
	const IVA = 'clientes.IVA';

	/** the column name for the RIF field */
	const RIF = 'clientes.RIF';

	/** the column name for the CONTRIBU field */
	const CONTRIBU = 'clientes.CONTRIBU';

	/** the column name for the DIS_CEN field */
	const DIS_CEN = 'clientes.DIS_CEN';

	/** the column name for the NIT field */
	const NIT = 'clientes.NIT';

	/** the column name for the EMAIL field */
	const EMAIL = 'clientes.EMAIL';

	/** the column name for the CO_INGR field */
	const CO_INGR = 'clientes.CO_INGR';

	/** the column name for the CAMPO1 field */
	const CAMPO1 = 'clientes.CAMPO1';

	/** the column name for the CAMPO2 field */
	const CAMPO2 = 'clientes.CAMPO2';

	/** the column name for the CAMPO3 field */
	const CAMPO3 = 'clientes.CAMPO3';

	/** the column name for the CAMPO4 field */
	const CAMPO4 = 'clientes.CAMPO4';

	/** the column name for the CAMPO5 field */
	const CAMPO5 = 'clientes.CAMPO5';

	/** the column name for the CAMPO6 field */
	const CAMPO6 = 'clientes.CAMPO6';

	/** the column name for the CAMPO7 field */
	const CAMPO7 = 'clientes.CAMPO7';

	/** the column name for the CAMPO8 field */
	const CAMPO8 = 'clientes.CAMPO8';

	/** the column name for the CO_US_IN field */
	const CO_US_IN = 'clientes.CO_US_IN';

	/** the column name for the FE_US_IN field */
	const FE_US_IN = 'clientes.FE_US_IN';

	/** the column name for the CO_US_MO field */
	const CO_US_MO = 'clientes.CO_US_MO';

	/** the column name for the FE_US_MO field */
	const FE_US_MO = 'clientes.FE_US_MO';

	/** the column name for the CO_US_EL field */
	const CO_US_EL = 'clientes.CO_US_EL';

	/** the column name for the FE_US_EL field */
	const FE_US_EL = 'clientes.FE_US_EL';

	/** the column name for the REVISADO field */
	const REVISADO = 'clientes.REVISADO';

	/** the column name for the TRASNFE field */
	const TRASNFE = 'clientes.TRASNFE';

	/** the column name for the CO_SUCU field */
	const CO_SUCU = 'clientes.CO_SUCU';

	/** the column name for the ROWGUID field */
	const ROWGUID = 'clientes.ROWGUID';

	/** the column name for the JURIDICO field */
	const JURIDICO = 'clientes.JURIDICO';

	/** the column name for the TIPO_ADI field */
	const TIPO_ADI = 'clientes.TIPO_ADI';

	/** the column name for the MATRIZ field */
	const MATRIZ = 'clientes.MATRIZ';

	/** the column name for the CO_TAB field */
	const CO_TAB = 'clientes.CO_TAB';

	/** the column name for the TIPO_PER field */
	const TIPO_PER = 'clientes.TIPO_PER';

	/** the column name for the SERIALP field */
	const SERIALP = 'clientes.SERIALP';

	/** the column name for the VALIDO field */
	const VALIDO = 'clientes.VALIDO';

	/** the column name for the ROW_ID field */
	const ROW_ID = 'clientes.ROW_ID';

	/** the column name for the ESTADO field */
	const ESTADO = 'clientes.ESTADO';

	/** the column name for the ID field */
	const ID = 'clientes.ID';

	/** the column name for the CO_PAIS field */
	const CO_PAIS = 'clientes.CO_PAIS';

	/** the column name for the CIUDAD field */
	const CIUDAD = 'clientes.CIUDAD';

	/** the column name for the ZIP field */
	const ZIP = 'clientes.ZIP';

	/** the column name for the LOGIN field */
	const LOGIN = 'clientes.LOGIN';

	/** the column name for the PASSWORD field */
	const PASSWORD = 'clientes.PASSWORD';

	/** the column name for the WEBSITE field */
	const WEBSITE = 'clientes.WEBSITE';

	/** the column name for the SALESTAX field */
	const SALESTAX = 'clientes.SALESTAX';

	/** the column name for the CONTRIBU_E field */
	const CONTRIBU_E = 'clientes.CONTRIBU_E';

	/** the column name for the PORC_ESP field */
	const PORC_ESP = 'clientes.PORC_ESP';

	/**
	 * An identiy map to hold any loaded instances of Clientes objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Clientes[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('CoCli', 'Tipo', 'CliDes', 'Direc1', 'Direc2', 'Telefonos', 'Fax', 'Inactivo', 'Comentario', 'Respons', 'FechaReg', 'Puntaje', 'Saldo', 'SaldoIni', 'FacUltVe', 'FecUltVe', 'NetUltVe', 'MontCre', 'PlazPag', 'DescPpago', 'CoZon', 'CoSeg', 'CoVen', 'DescGlob', 'HorarCaja', 'FrecuVist', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Domingo', 'DirEnt2', 'TipoIva', 'Iva', 'Rif', 'Contribu', 'DisCen', 'Nit', 'Email', 'CoIngr', 'Campo1', 'Campo2', 'Campo3', 'Campo4', 'Campo5', 'Campo6', 'Campo7', 'Campo8', 'CoUsIn', 'FeUsIn', 'CoUsMo', 'FeUsMo', 'CoUsEl', 'FeUsEl', 'Revisado', 'Trasnfe', 'CoSucu', 'Rowguid', 'Juridico', 'TipoAdi', 'Matriz', 'CoTab', 'TipoPer', 'Serialp', 'Valido', 'RowId', 'Estado', 'Id', 'CoPais', 'Ciudad', 'Zip', 'Login', 'Password', 'Website', 'Salestax', 'ContribuE', 'PorcEsp', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coCli', 'tipo', 'cliDes', 'direc1', 'direc2', 'telefonos', 'fax', 'inactivo', 'comentario', 'respons', 'fechaReg', 'puntaje', 'saldo', 'saldoIni', 'facUltVe', 'fecUltVe', 'netUltVe', 'montCre', 'plazPag', 'descPpago', 'coZon', 'coSeg', 'coVen', 'descGlob', 'horarCaja', 'frecuVist', 'lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo', 'dirEnt2', 'tipoIva', 'iva', 'rif', 'contribu', 'disCen', 'nit', 'email', 'coIngr', 'campo1', 'campo2', 'campo3', 'campo4', 'campo5', 'campo6', 'campo7', 'campo8', 'coUsIn', 'feUsIn', 'coUsMo', 'feUsMo', 'coUsEl', 'feUsEl', 'revisado', 'trasnfe', 'coSucu', 'rowguid', 'juridico', 'tipoAdi', 'matriz', 'coTab', 'tipoPer', 'serialp', 'valido', 'rowId', 'estado', 'id', 'coPais', 'ciudad', 'zip', 'login', 'password', 'website', 'salestax', 'contribuE', 'porcEsp', ),
		BasePeer::TYPE_COLNAME => array (self::CO_CLI, self::TIPO, self::CLI_DES, self::DIREC1, self::DIREC2, self::TELEFONOS, self::FAX, self::INACTIVO, self::COMENTARIO, self::RESPONS, self::FECHA_REG, self::PUNTAJE, self::SALDO, self::SALDO_INI, self::FAC_ULT_VE, self::FEC_ULT_VE, self::NET_ULT_VE, self::MONT_CRE, self::PLAZ_PAG, self::DESC_PPAGO, self::CO_ZON, self::CO_SEG, self::CO_VEN, self::DESC_GLOB, self::HORAR_CAJA, self::FRECU_VIST, self::LUNES, self::MARTES, self::MIERCOLES, self::JUEVES, self::VIERNES, self::SABADO, self::DOMINGO, self::DIR_ENT2, self::TIPO_IVA, self::IVA, self::RIF, self::CONTRIBU, self::DIS_CEN, self::NIT, self::EMAIL, self::CO_INGR, self::CAMPO1, self::CAMPO2, self::CAMPO3, self::CAMPO4, self::CAMPO5, self::CAMPO6, self::CAMPO7, self::CAMPO8, self::CO_US_IN, self::FE_US_IN, self::CO_US_MO, self::FE_US_MO, self::CO_US_EL, self::FE_US_EL, self::REVISADO, self::TRASNFE, self::CO_SUCU, self::ROWGUID, self::JURIDICO, self::TIPO_ADI, self::MATRIZ, self::CO_TAB, self::TIPO_PER, self::SERIALP, self::VALIDO, self::ROW_ID, self::ESTADO, self::ID, self::CO_PAIS, self::CIUDAD, self::ZIP, self::LOGIN, self::PASSWORD, self::WEBSITE, self::SALESTAX, self::CONTRIBU_E, self::PORC_ESP, ),
		BasePeer::TYPE_FIELDNAME => array ('co_cli', 'tipo', 'cli_des', 'direc1', 'direc2', 'telefonos', 'fax', 'inactivo', 'comentario', 'respons', 'fecha_reg', 'puntaje', 'saldo', 'saldo_ini', 'fac_ult_ve', 'fec_ult_ve', 'net_ult_ve', 'mont_cre', 'plaz_pag', 'desc_ppago', 'co_zon', 'co_seg', 'co_ven', 'desc_glob', 'horar_caja', 'frecu_vist', 'lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo', 'dir_ent2', 'tipo_iva', 'iva', 'rif', 'contribu', 'dis_cen', 'nit', 'email', 'co_ingr', 'campo1', 'campo2', 'campo3', 'campo4', 'campo5', 'campo6', 'campo7', 'campo8', 'co_us_in', 'fe_us_in', 'co_us_mo', 'fe_us_mo', 'co_us_el', 'fe_us_el', 'revisado', 'trasnfe', 'co_sucu', 'rowguid', 'juridico', 'tipo_adi', 'matriz', 'co_tab', 'tipo_per', 'serialp', 'valido', 'row_id', 'estado', 'Id', 'co_pais', 'ciudad', 'zip', 'login', 'password', 'website', 'salestax', 'contribu_e', 'porc_esp', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('CoCli' => 0, 'Tipo' => 1, 'CliDes' => 2, 'Direc1' => 3, 'Direc2' => 4, 'Telefonos' => 5, 'Fax' => 6, 'Inactivo' => 7, 'Comentario' => 8, 'Respons' => 9, 'FechaReg' => 10, 'Puntaje' => 11, 'Saldo' => 12, 'SaldoIni' => 13, 'FacUltVe' => 14, 'FecUltVe' => 15, 'NetUltVe' => 16, 'MontCre' => 17, 'PlazPag' => 18, 'DescPpago' => 19, 'CoZon' => 20, 'CoSeg' => 21, 'CoVen' => 22, 'DescGlob' => 23, 'HorarCaja' => 24, 'FrecuVist' => 25, 'Lunes' => 26, 'Martes' => 27, 'Miercoles' => 28, 'Jueves' => 29, 'Viernes' => 30, 'Sabado' => 31, 'Domingo' => 32, 'DirEnt2' => 33, 'TipoIva' => 34, 'Iva' => 35, 'Rif' => 36, 'Contribu' => 37, 'DisCen' => 38, 'Nit' => 39, 'Email' => 40, 'CoIngr' => 41, 'Campo1' => 42, 'Campo2' => 43, 'Campo3' => 44, 'Campo4' => 45, 'Campo5' => 46, 'Campo6' => 47, 'Campo7' => 48, 'Campo8' => 49, 'CoUsIn' => 50, 'FeUsIn' => 51, 'CoUsMo' => 52, 'FeUsMo' => 53, 'CoUsEl' => 54, 'FeUsEl' => 55, 'Revisado' => 56, 'Trasnfe' => 57, 'CoSucu' => 58, 'Rowguid' => 59, 'Juridico' => 60, 'TipoAdi' => 61, 'Matriz' => 62, 'CoTab' => 63, 'TipoPer' => 64, 'Serialp' => 65, 'Valido' => 66, 'RowId' => 67, 'Estado' => 68, 'Id' => 69, 'CoPais' => 70, 'Ciudad' => 71, 'Zip' => 72, 'Login' => 73, 'Password' => 74, 'Website' => 75, 'Salestax' => 76, 'ContribuE' => 77, 'PorcEsp' => 78, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coCli' => 0, 'tipo' => 1, 'cliDes' => 2, 'direc1' => 3, 'direc2' => 4, 'telefonos' => 5, 'fax' => 6, 'inactivo' => 7, 'comentario' => 8, 'respons' => 9, 'fechaReg' => 10, 'puntaje' => 11, 'saldo' => 12, 'saldoIni' => 13, 'facUltVe' => 14, 'fecUltVe' => 15, 'netUltVe' => 16, 'montCre' => 17, 'plazPag' => 18, 'descPpago' => 19, 'coZon' => 20, 'coSeg' => 21, 'coVen' => 22, 'descGlob' => 23, 'horarCaja' => 24, 'frecuVist' => 25, 'lunes' => 26, 'martes' => 27, 'miercoles' => 28, 'jueves' => 29, 'viernes' => 30, 'sabado' => 31, 'domingo' => 32, 'dirEnt2' => 33, 'tipoIva' => 34, 'iva' => 35, 'rif' => 36, 'contribu' => 37, 'disCen' => 38, 'nit' => 39, 'email' => 40, 'coIngr' => 41, 'campo1' => 42, 'campo2' => 43, 'campo3' => 44, 'campo4' => 45, 'campo5' => 46, 'campo6' => 47, 'campo7' => 48, 'campo8' => 49, 'coUsIn' => 50, 'feUsIn' => 51, 'coUsMo' => 52, 'feUsMo' => 53, 'coUsEl' => 54, 'feUsEl' => 55, 'revisado' => 56, 'trasnfe' => 57, 'coSucu' => 58, 'rowguid' => 59, 'juridico' => 60, 'tipoAdi' => 61, 'matriz' => 62, 'coTab' => 63, 'tipoPer' => 64, 'serialp' => 65, 'valido' => 66, 'rowId' => 67, 'estado' => 68, 'id' => 69, 'coPais' => 70, 'ciudad' => 71, 'zip' => 72, 'login' => 73, 'password' => 74, 'website' => 75, 'salestax' => 76, 'contribuE' => 77, 'porcEsp' => 78, ),
		BasePeer::TYPE_COLNAME => array (self::CO_CLI => 0, self::TIPO => 1, self::CLI_DES => 2, self::DIREC1 => 3, self::DIREC2 => 4, self::TELEFONOS => 5, self::FAX => 6, self::INACTIVO => 7, self::COMENTARIO => 8, self::RESPONS => 9, self::FECHA_REG => 10, self::PUNTAJE => 11, self::SALDO => 12, self::SALDO_INI => 13, self::FAC_ULT_VE => 14, self::FEC_ULT_VE => 15, self::NET_ULT_VE => 16, self::MONT_CRE => 17, self::PLAZ_PAG => 18, self::DESC_PPAGO => 19, self::CO_ZON => 20, self::CO_SEG => 21, self::CO_VEN => 22, self::DESC_GLOB => 23, self::HORAR_CAJA => 24, self::FRECU_VIST => 25, self::LUNES => 26, self::MARTES => 27, self::MIERCOLES => 28, self::JUEVES => 29, self::VIERNES => 30, self::SABADO => 31, self::DOMINGO => 32, self::DIR_ENT2 => 33, self::TIPO_IVA => 34, self::IVA => 35, self::RIF => 36, self::CONTRIBU => 37, self::DIS_CEN => 38, self::NIT => 39, self::EMAIL => 40, self::CO_INGR => 41, self::CAMPO1 => 42, self::CAMPO2 => 43, self::CAMPO3 => 44, self::CAMPO4 => 45, self::CAMPO5 => 46, self::CAMPO6 => 47, self::CAMPO7 => 48, self::CAMPO8 => 49, self::CO_US_IN => 50, self::FE_US_IN => 51, self::CO_US_MO => 52, self::FE_US_MO => 53, self::CO_US_EL => 54, self::FE_US_EL => 55, self::REVISADO => 56, self::TRASNFE => 57, self::CO_SUCU => 58, self::ROWGUID => 59, self::JURIDICO => 60, self::TIPO_ADI => 61, self::MATRIZ => 62, self::CO_TAB => 63, self::TIPO_PER => 64, self::SERIALP => 65, self::VALIDO => 66, self::ROW_ID => 67, self::ESTADO => 68, self::ID => 69, self::CO_PAIS => 70, self::CIUDAD => 71, self::ZIP => 72, self::LOGIN => 73, self::PASSWORD => 74, self::WEBSITE => 75, self::SALESTAX => 76, self::CONTRIBU_E => 77, self::PORC_ESP => 78, ),
		BasePeer::TYPE_FIELDNAME => array ('co_cli' => 0, 'tipo' => 1, 'cli_des' => 2, 'direc1' => 3, 'direc2' => 4, 'telefonos' => 5, 'fax' => 6, 'inactivo' => 7, 'comentario' => 8, 'respons' => 9, 'fecha_reg' => 10, 'puntaje' => 11, 'saldo' => 12, 'saldo_ini' => 13, 'fac_ult_ve' => 14, 'fec_ult_ve' => 15, 'net_ult_ve' => 16, 'mont_cre' => 17, 'plaz_pag' => 18, 'desc_ppago' => 19, 'co_zon' => 20, 'co_seg' => 21, 'co_ven' => 22, 'desc_glob' => 23, 'horar_caja' => 24, 'frecu_vist' => 25, 'lunes' => 26, 'martes' => 27, 'miercoles' => 28, 'jueves' => 29, 'viernes' => 30, 'sabado' => 31, 'domingo' => 32, 'dir_ent2' => 33, 'tipo_iva' => 34, 'iva' => 35, 'rif' => 36, 'contribu' => 37, 'dis_cen' => 38, 'nit' => 39, 'email' => 40, 'co_ingr' => 41, 'campo1' => 42, 'campo2' => 43, 'campo3' => 44, 'campo4' => 45, 'campo5' => 46, 'campo6' => 47, 'campo7' => 48, 'campo8' => 49, 'co_us_in' => 50, 'fe_us_in' => 51, 'co_us_mo' => 52, 'fe_us_mo' => 53, 'co_us_el' => 54, 'fe_us_el' => 55, 'revisado' => 56, 'trasnfe' => 57, 'co_sucu' => 58, 'rowguid' => 59, 'juridico' => 60, 'tipo_adi' => 61, 'matriz' => 62, 'co_tab' => 63, 'tipo_per' => 64, 'serialp' => 65, 'valido' => 66, 'row_id' => 67, 'estado' => 68, 'Id' => 69, 'co_pais' => 70, 'ciudad' => 71, 'zip' => 72, 'login' => 73, 'password' => 74, 'website' => 75, 'salestax' => 76, 'contribu_e' => 77, 'porc_esp' => 78, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new ClientesMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. ClientesPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(ClientesPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(ClientesPeer::CO_CLI);

		$criteria->addSelectColumn(ClientesPeer::TIPO);

		$criteria->addSelectColumn(ClientesPeer::CLI_DES);

		$criteria->addSelectColumn(ClientesPeer::DIREC1);

		$criteria->addSelectColumn(ClientesPeer::DIREC2);

		$criteria->addSelectColumn(ClientesPeer::TELEFONOS);

		$criteria->addSelectColumn(ClientesPeer::FAX);

		$criteria->addSelectColumn(ClientesPeer::INACTIVO);

		$criteria->addSelectColumn(ClientesPeer::COMENTARIO);

		$criteria->addSelectColumn(ClientesPeer::RESPONS);

		$criteria->addSelectColumn(ClientesPeer::FECHA_REG);

		$criteria->addSelectColumn(ClientesPeer::PUNTAJE);

		$criteria->addSelectColumn(ClientesPeer::SALDO);

		$criteria->addSelectColumn(ClientesPeer::SALDO_INI);

		$criteria->addSelectColumn(ClientesPeer::FAC_ULT_VE);

		$criteria->addSelectColumn(ClientesPeer::FEC_ULT_VE);

		$criteria->addSelectColumn(ClientesPeer::NET_ULT_VE);

		$criteria->addSelectColumn(ClientesPeer::MONT_CRE);

		$criteria->addSelectColumn(ClientesPeer::PLAZ_PAG);

		$criteria->addSelectColumn(ClientesPeer::DESC_PPAGO);

		$criteria->addSelectColumn(ClientesPeer::CO_ZON);

		$criteria->addSelectColumn(ClientesPeer::CO_SEG);

		$criteria->addSelectColumn(ClientesPeer::CO_VEN);

		$criteria->addSelectColumn(ClientesPeer::DESC_GLOB);

		$criteria->addSelectColumn(ClientesPeer::HORAR_CAJA);

		$criteria->addSelectColumn(ClientesPeer::FRECU_VIST);

		$criteria->addSelectColumn(ClientesPeer::LUNES);

		$criteria->addSelectColumn(ClientesPeer::MARTES);

		$criteria->addSelectColumn(ClientesPeer::MIERCOLES);

		$criteria->addSelectColumn(ClientesPeer::JUEVES);

		$criteria->addSelectColumn(ClientesPeer::VIERNES);

		$criteria->addSelectColumn(ClientesPeer::SABADO);

		$criteria->addSelectColumn(ClientesPeer::DOMINGO);

		$criteria->addSelectColumn(ClientesPeer::DIR_ENT2);

		$criteria->addSelectColumn(ClientesPeer::TIPO_IVA);

		$criteria->addSelectColumn(ClientesPeer::IVA);

		$criteria->addSelectColumn(ClientesPeer::RIF);

		$criteria->addSelectColumn(ClientesPeer::CONTRIBU);

		$criteria->addSelectColumn(ClientesPeer::DIS_CEN);

		$criteria->addSelectColumn(ClientesPeer::NIT);

		$criteria->addSelectColumn(ClientesPeer::EMAIL);

		$criteria->addSelectColumn(ClientesPeer::CO_INGR);

		$criteria->addSelectColumn(ClientesPeer::CAMPO1);

		$criteria->addSelectColumn(ClientesPeer::CAMPO2);

		$criteria->addSelectColumn(ClientesPeer::CAMPO3);

		$criteria->addSelectColumn(ClientesPeer::CAMPO4);

		$criteria->addSelectColumn(ClientesPeer::CAMPO5);

		$criteria->addSelectColumn(ClientesPeer::CAMPO6);

		$criteria->addSelectColumn(ClientesPeer::CAMPO7);

		$criteria->addSelectColumn(ClientesPeer::CAMPO8);

		$criteria->addSelectColumn(ClientesPeer::CO_US_IN);

		$criteria->addSelectColumn(ClientesPeer::FE_US_IN);

		$criteria->addSelectColumn(ClientesPeer::CO_US_MO);

		$criteria->addSelectColumn(ClientesPeer::FE_US_MO);

		$criteria->addSelectColumn(ClientesPeer::CO_US_EL);

		$criteria->addSelectColumn(ClientesPeer::FE_US_EL);

		$criteria->addSelectColumn(ClientesPeer::REVISADO);

		$criteria->addSelectColumn(ClientesPeer::TRASNFE);

		$criteria->addSelectColumn(ClientesPeer::CO_SUCU);

		$criteria->addSelectColumn(ClientesPeer::ROWGUID);

		$criteria->addSelectColumn(ClientesPeer::JURIDICO);

		$criteria->addSelectColumn(ClientesPeer::TIPO_ADI);

		$criteria->addSelectColumn(ClientesPeer::MATRIZ);

		$criteria->addSelectColumn(ClientesPeer::CO_TAB);

		$criteria->addSelectColumn(ClientesPeer::TIPO_PER);

		$criteria->addSelectColumn(ClientesPeer::SERIALP);

		$criteria->addSelectColumn(ClientesPeer::VALIDO);

		$criteria->addSelectColumn(ClientesPeer::ROW_ID);

		$criteria->addSelectColumn(ClientesPeer::ESTADO);

		$criteria->addSelectColumn(ClientesPeer::ID);

		$criteria->addSelectColumn(ClientesPeer::CO_PAIS);

		$criteria->addSelectColumn(ClientesPeer::CIUDAD);

		$criteria->addSelectColumn(ClientesPeer::ZIP);

		$criteria->addSelectColumn(ClientesPeer::LOGIN);

		$criteria->addSelectColumn(ClientesPeer::PASSWORD);

		$criteria->addSelectColumn(ClientesPeer::WEBSITE);

		$criteria->addSelectColumn(ClientesPeer::SALESTAX);

		$criteria->addSelectColumn(ClientesPeer::CONTRIBU_E);

		$criteria->addSelectColumn(ClientesPeer::PORC_ESP);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Clientes
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = ClientesPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return ClientesPeer::populateObjects(ClientesPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClientesPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			ClientesPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Clientes $value A Clientes object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Clientes $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getCoCli();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Clientes object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Clientes) {
				$key = (string) $value->getCoCli();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Clientes object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Clientes Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = ClientesPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = ClientesPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				ClientesPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related TipoCli table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTipoCli(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Zona table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinZona(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Segmento table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinSegmento(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Vendedor table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinVendedor(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related CtaIngr table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinCtaIngr(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with their TipoCli objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTipoCli(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseClientesPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);
		TipoCliPeer::addSelectColumns($c);

		$c->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TipoCliPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TipoCliPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = TipoCliPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TipoCliPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Clientes) to $obj2 (TipoCli)
				$obj2->addClientes($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with their Zona objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinZona(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);
		ZonaPeer::addSelectColumns($c);

		$c->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ZonaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ZonaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ZonaPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ZonaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Clientes) to $obj2 (Zona)
				$obj2->addClientes($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with their Segmento objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinSegmento(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);
		SegmentoPeer::addSelectColumns($c);

		$c->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = SegmentoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = SegmentoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = SegmentoPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					SegmentoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Clientes) to $obj2 (Segmento)
				$obj2->addClientes($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with their Vendedor objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinVendedor(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);
		VendedorPeer::addSelectColumns($c);

		$c->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = VendedorPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = VendedorPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					VendedorPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Clientes) to $obj2 (Vendedor)
				$obj2->addClientes($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with their CtaIngr objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinCtaIngr(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);
		CtaIngrPeer::addSelectColumns($c);

		$c->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = CtaIngrPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = CtaIngrPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = CtaIngrPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					CtaIngrPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Clientes) to $obj2 (CtaIngr)
				$obj2->addClientes($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
		$criteria->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
		$criteria->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
		$criteria->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
		$criteria->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Clientes objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseClientesPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol2 = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		TipoCliPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (TipoCliPeer::NUM_COLUMNS - TipoCliPeer::NUM_LAZY_LOAD_COLUMNS);

		ZonaPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ZonaPeer::NUM_COLUMNS - ZonaPeer::NUM_LAZY_LOAD_COLUMNS);

		SegmentoPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SegmentoPeer::NUM_COLUMNS - SegmentoPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		CtaIngrPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (CtaIngrPeer::NUM_COLUMNS - CtaIngrPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
		$c->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
		$c->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
		$c->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
		$c->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined TipoCli rows

			$key2 = TipoCliPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = TipoCliPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = TipoCliPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TipoCliPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Clientes) to the collection in $obj2 (TipoCli)
				$obj2->addClientes($obj1);
			} // if joined row not null

			// Add objects for joined Zona rows

			$key3 = ZonaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = ZonaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = ZonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ZonaPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (Clientes) to the collection in $obj3 (Zona)
				$obj3->addClientes($obj1);
			} // if joined row not null

			// Add objects for joined Segmento rows

			$key4 = SegmentoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = SegmentoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = SegmentoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SegmentoPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (Clientes) to the collection in $obj4 (Segmento)
				$obj4->addClientes($obj1);
			} // if joined row not null

			// Add objects for joined Vendedor rows

			$key5 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = VendedorPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					VendedorPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (Clientes) to the collection in $obj5 (Vendedor)
				$obj5->addClientes($obj1);
			} // if joined row not null

			// Add objects for joined CtaIngr rows

			$key6 = CtaIngrPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = CtaIngrPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$omClass = CtaIngrPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					CtaIngrPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (Clientes) to the collection in $obj6 (CtaIngr)
				$obj6->addClientes($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TipoCli table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTipoCli(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Zona table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptZona(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Segmento table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptSegmento(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Vendedor table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptVendedor(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related CtaIngr table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptCtaIngr(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
				$criteria->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with all related objects except TipoCli.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTipoCli(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseClientesPeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol2 = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		ZonaPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ZonaPeer::NUM_COLUMNS - ZonaPeer::NUM_LAZY_LOAD_COLUMNS);

		SegmentoPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (SegmentoPeer::NUM_COLUMNS - SegmentoPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		CtaIngrPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CtaIngrPeer::NUM_COLUMNS - CtaIngrPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Zona rows

				$key2 = ZonaPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ZonaPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ZonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ZonaPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj2 (Zona)
				$obj2->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Segmento rows

				$key3 = SegmentoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = SegmentoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = SegmentoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					SegmentoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj3 (Segmento)
				$obj3->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Vendedor rows

				$key4 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = VendedorPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					VendedorPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj4 (Vendedor)
				$obj4->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined CtaIngr rows

				$key5 = CtaIngrPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CtaIngrPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CtaIngrPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CtaIngrPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj5 (CtaIngr)
				$obj5->addClientes($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with all related objects except Zona.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptZona(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol2 = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		TipoCliPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (TipoCliPeer::NUM_COLUMNS - TipoCliPeer::NUM_LAZY_LOAD_COLUMNS);

		SegmentoPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (SegmentoPeer::NUM_COLUMNS - SegmentoPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		CtaIngrPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CtaIngrPeer::NUM_COLUMNS - CtaIngrPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined TipoCli rows

				$key2 = TipoCliPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TipoCliPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = TipoCliPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TipoCliPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj2 (TipoCli)
				$obj2->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Segmento rows

				$key3 = SegmentoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = SegmentoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = SegmentoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					SegmentoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj3 (Segmento)
				$obj3->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Vendedor rows

				$key4 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = VendedorPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					VendedorPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj4 (Vendedor)
				$obj4->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined CtaIngr rows

				$key5 = CtaIngrPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CtaIngrPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CtaIngrPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CtaIngrPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj5 (CtaIngr)
				$obj5->addClientes($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with all related objects except Segmento.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptSegmento(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol2 = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		TipoCliPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (TipoCliPeer::NUM_COLUMNS - TipoCliPeer::NUM_LAZY_LOAD_COLUMNS);

		ZonaPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ZonaPeer::NUM_COLUMNS - ZonaPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

		CtaIngrPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CtaIngrPeer::NUM_COLUMNS - CtaIngrPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined TipoCli rows

				$key2 = TipoCliPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TipoCliPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = TipoCliPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TipoCliPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj2 (TipoCli)
				$obj2->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Zona rows

				$key3 = ZonaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ZonaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ZonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ZonaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj3 (Zona)
				$obj3->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Vendedor rows

				$key4 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = VendedorPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					VendedorPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj4 (Vendedor)
				$obj4->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined CtaIngr rows

				$key5 = CtaIngrPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CtaIngrPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CtaIngrPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CtaIngrPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj5 (CtaIngr)
				$obj5->addClientes($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with all related objects except Vendedor.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptVendedor(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol2 = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		TipoCliPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (TipoCliPeer::NUM_COLUMNS - TipoCliPeer::NUM_LAZY_LOAD_COLUMNS);

		ZonaPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ZonaPeer::NUM_COLUMNS - ZonaPeer::NUM_LAZY_LOAD_COLUMNS);

		SegmentoPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SegmentoPeer::NUM_COLUMNS - SegmentoPeer::NUM_LAZY_LOAD_COLUMNS);

		CtaIngrPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CtaIngrPeer::NUM_COLUMNS - CtaIngrPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_INGR,), array(CtaIngrPeer::CO_INGR,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined TipoCli rows

				$key2 = TipoCliPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TipoCliPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = TipoCliPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TipoCliPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj2 (TipoCli)
				$obj2->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Zona rows

				$key3 = ZonaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ZonaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ZonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ZonaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj3 (Zona)
				$obj3->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Segmento rows

				$key4 = SegmentoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = SegmentoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = SegmentoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SegmentoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj4 (Segmento)
				$obj4->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined CtaIngr rows

				$key5 = CtaIngrPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CtaIngrPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CtaIngrPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CtaIngrPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj5 (CtaIngr)
				$obj5->addClientes($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Clientes objects pre-filled with all related objects except CtaIngr.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Clientes objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptCtaIngr(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientesPeer::addSelectColumns($c);
		$startcol2 = (ClientesPeer::NUM_COLUMNS - ClientesPeer::NUM_LAZY_LOAD_COLUMNS);

		TipoCliPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (TipoCliPeer::NUM_COLUMNS - TipoCliPeer::NUM_LAZY_LOAD_COLUMNS);

		ZonaPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ZonaPeer::NUM_COLUMNS - ZonaPeer::NUM_LAZY_LOAD_COLUMNS);

		SegmentoPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (SegmentoPeer::NUM_COLUMNS - SegmentoPeer::NUM_LAZY_LOAD_COLUMNS);

		VendedorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (VendedorPeer::NUM_COLUMNS - VendedorPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientesPeer::TIPO,), array(TipoCliPeer::TIP_CLI,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_ZON,), array(ZonaPeer::CO_ZON,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_SEG,), array(SegmentoPeer::CO_SEG,), $join_behavior);
				$c->addJoin(array(ClientesPeer::CO_VEN,), array(VendedorPeer::CO_VEN,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientesPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined TipoCli rows

				$key2 = TipoCliPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TipoCliPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = TipoCliPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TipoCliPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj2 (TipoCli)
				$obj2->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Zona rows

				$key3 = ZonaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ZonaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ZonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ZonaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj3 (Zona)
				$obj3->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Segmento rows

				$key4 = SegmentoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = SegmentoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = SegmentoPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					SegmentoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj4 (Segmento)
				$obj4->addClientes($obj1);

			} // if joined row is not null

				// Add objects for joined Vendedor rows

				$key5 = VendedorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = VendedorPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = VendedorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					VendedorPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Clientes) to the collection in $obj5 (Vendedor)
				$obj5->addClientes($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return ClientesPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a Clientes or Criteria object.
	 *
	 * @param      mixed $values Criteria or Clientes object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClientesPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseClientesPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Clientes object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseClientesPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Clientes or Criteria object.
	 *
	 * @param      mixed $values Criteria or Clientes object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClientesPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseClientesPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(ClientesPeer::CO_CLI);
			$selectCriteria->add(ClientesPeer::CO_CLI, $criteria->remove(ClientesPeer::CO_CLI), $comparison);

		} else { // $values is Clientes object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseClientesPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseClientesPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the clientes table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(ClientesPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Clientes or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Clientes object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			ClientesPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Clientes) {
			// invalidate the cache for this single object
			ClientesPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(ClientesPeer::CO_CLI, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				ClientesPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Clientes object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Clientes $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Clientes $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(ClientesPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(ClientesPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(ClientesPeer::DATABASE_NAME, ClientesPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = ClientesPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      string $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Clientes
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = ClientesPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(ClientesPeer::DATABASE_NAME);
		$criteria->add(ClientesPeer::CO_CLI, $pk);

		$v = ClientesPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ClientesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(ClientesPeer::DATABASE_NAME);
			$criteria->add(ClientesPeer::CO_CLI, $pks, Criteria::IN);
			$objs = ClientesPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseClientesPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the ClientesPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the ClientesPeer class:
//
// Propel::getDatabaseMap(ClientesPeer::DATABASE_NAME)->addTableBuilder(ClientesPeer::TABLE_NAME, ClientesPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseClientesPeer::DATABASE_NAME)->addTableBuilder(BaseClientesPeer::TABLE_NAME, BaseClientesPeer::getMapBuilder());

