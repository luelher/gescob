<?php

/**
 * Base class that represents a row from the 'docum_cc' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Mon Feb  8 20:58:33 2010
 *
 * @package    lib.model.profit.om
 */
abstract class BaseDocumCc extends BaseObject  implements Persistent {


  const PEER = 'DocumCcPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        DocumCcPeer
	 */
	protected static $peer;

	/**
	 * The value for the tipo_doc field.
	 * @var        string
	 */
	protected $tipo_doc;

	/**
	 * The value for the nro_doc field.
	 * @var        int
	 */
	protected $nro_doc;

	/**
	 * The value for the anulado field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $anulado;

	/**
	 * The value for the movi field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $movi;

	/**
	 * The value for the aut field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $aut;

	/**
	 * The value for the num_control field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $num_control;

	/**
	 * The value for the co_cli field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_cli;

	/**
	 * The value for the contrib field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $contrib;

	/**
	 * The value for the fec_emis field.
	 * @var        string
	 */
	protected $fec_emis;

	/**
	 * The value for the fec_venc field.
	 * @var        string
	 */
	protected $fec_venc;

	/**
	 * The value for the observa field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $observa;

	/**
	 * The value for the doc_orig field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $doc_orig;

	/**
	 * The value for the nro_orig field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $nro_orig;

	/**
	 * The value for the co_ban field.
	 * Note: this column has a database default value of: '(\'0\')'
	 * @var        string
	 */
	protected $co_ban;

	/**
	 * The value for the nro_che field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $nro_che;

	/**
	 * The value for the co_ven field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_ven;

	/**
	 * The value for the tipo field.
	 * Note: this column has a database default value of: '(\'1\')'
	 * @var        string
	 */
	protected $tipo;

	/**
	 * The value for the tasa field.
	 * Note: this column has a database default value of: '1'
	 * @var        string
	 */
	protected $tasa;

	/**
	 * The value for the moneda field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $moneda;

	/**
	 * The value for the monto_imp field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_imp;

	/**
	 * The value for the monto_gen field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_gen;

	/**
	 * The value for the monto_a1 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_a1;

	/**
	 * The value for the monto_a2 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_a2;

	/**
	 * The value for the monto_bru field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_bru;

	/**
	 * The value for the descuentos field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $descuentos;

	/**
	 * The value for the monto_des field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_des;

	/**
	 * The value for the recargo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $recargo;

	/**
	 * The value for the monto_rec field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_rec;

	/**
	 * The value for the monto_otr field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_otr;

	/**
	 * The value for the monto_net field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_net;

	/**
	 * The value for the saldo field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $saldo;

	/**
	 * The value for the feccom field.
	 * @var        string
	 */
	protected $feccom;

	/**
	 * The value for the numcom field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $numcom;

	/**
	 * The value for the dis_cen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $dis_cen;

	/**
	 * The value for the comis1 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis1;

	/**
	 * The value for the comis2 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis2;

	/**
	 * The value for the comis3 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis3;

	/**
	 * The value for the comis4 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis4;

	/**
	 * The value for the adicional field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $adicional;

	/**
	 * The value for the campo1 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo1;

	/**
	 * The value for the campo2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo2;

	/**
	 * The value for the campo3 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo3;

	/**
	 * The value for the campo4 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo4;

	/**
	 * The value for the campo5 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo5;

	/**
	 * The value for the campo6 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo6;

	/**
	 * The value for the campo7 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo7;

	/**
	 * The value for the campo8 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo8;

	/**
	 * The value for the co_us_in field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_in;

	/**
	 * The value for the fe_us_in field.
	 * @var        string
	 */
	protected $fe_us_in;

	/**
	 * The value for the co_us_mo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_mo;

	/**
	 * The value for the fe_us_mo field.
	 * @var        string
	 */
	protected $fe_us_mo;

	/**
	 * The value for the co_us_el field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_el;

	/**
	 * The value for the fe_us_el field.
	 * @var        string
	 */
	protected $fe_us_el;

	/**
	 * The value for the revisado field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $revisado;

	/**
	 * The value for the trasnfe field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $trasnfe;

	/**
	 * The value for the numcon field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $numcon;

	/**
	 * The value for the co_sucu field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_sucu;

	/**
	 * The value for the rowguid field.
	 * Note: this column has a database default value of: '(newid())'
	 * @var        string
	 */
	protected $rowguid;

	/**
	 * The value for the mon_ilc field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $mon_ilc;

	/**
	 * The value for the otros1 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $otros1;

	/**
	 * The value for the otros2 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $otros2;

	/**
	 * The value for the otros3 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $otros3;

	/**
	 * The value for the reng_si field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $reng_si;

	/**
	 * The value for the comis5 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis5;

	/**
	 * The value for the comis6 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $comis6;

	/**
	 * The value for the row_id field.
	 * @var        string
	 */
	protected $row_id;

	/**
	 * The value for the aux01 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $aux01;

	/**
	 * The value for the aux02 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $aux02;

	/**
	 * The value for the salestax field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $salestax;

	/**
	 * The value for the origen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $origen;

	/**
	 * The value for the origen_d field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $origen_d;

	/**
	 * The value for the fec_reg field.
	 * @var        string
	 */
	protected $fec_reg;

	/**
	 * @var        Clientes
	 */
	protected $aClientes;

	/**
	 * @var        Vendedor
	 */
	protected $aVendedor;

	/**
	 * @var        Tabulado
	 */
	protected $aTabulado;

	/**
	 * @var        Moneda
	 */
	protected $aMonedaRelatedByMoneda;

	/**
	 * @var        Almacen
	 */
	protected $aAlmacen;

	/**
	 * @var        array RengCob[] Collection to store aggregation of RengCob objects.
	 */
	protected $collRengCobs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRengCobs.
	 */
	private $lastRengCobCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseDocumCc object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->anulado = false;
		$this->movi = 0;
		$this->aut = false;
		$this->num_control = 0;
		$this->co_cli = ' ';
		$this->contrib = false;
		$this->observa = ' ';
		$this->doc_orig = ' ';
		$this->nro_orig = 0;
		$this->co_ban = '(\'0\')';
		$this->nro_che = ' ';
		$this->co_ven = ' ';
		$this->tipo = '(\'1\')';
		$this->tasa = '1';
		$this->moneda = ' ';
		$this->monto_imp = '0';
		$this->monto_gen = '0';
		$this->monto_a1 = '0';
		$this->monto_a2 = '0';
		$this->monto_bru = '0';
		$this->descuentos = ' ';
		$this->monto_des = '0';
		$this->recargo = ' ';
		$this->monto_rec = '0';
		$this->monto_otr = '0';
		$this->monto_net = '0';
		$this->saldo = '0';
		$this->numcom = 0;
		$this->dis_cen = ' ';
		$this->comis1 = '0';
		$this->comis2 = '0';
		$this->comis3 = '0';
		$this->comis4 = '0';
		$this->adicional = '0';
		$this->campo1 = ' ';
		$this->campo2 = ' ';
		$this->campo3 = ' ';
		$this->campo4 = ' ';
		$this->campo5 = ' ';
		$this->campo6 = ' ';
		$this->campo7 = ' ';
		$this->campo8 = ' ';
		$this->co_us_in = ' ';
		$this->co_us_mo = ' ';
		$this->co_us_el = ' ';
		$this->revisado = ' ';
		$this->trasnfe = ' ';
		$this->numcon = ' ';
		$this->co_sucu = ' ';
		$this->rowguid = '(newid())';
		$this->mon_ilc = '0';
		$this->otros1 = '0';
		$this->otros2 = '0';
		$this->otros3 = '0';
		$this->reng_si = false;
		$this->comis5 = '0';
		$this->comis6 = '0';
		$this->aux01 = '0';
		$this->aux02 = ' ';
		$this->salestax = ' ';
		$this->origen = ' ';
		$this->origen_d = ' ';
	}

	/**
	 * Get the [tipo_doc] column value.
	 * 
	 * @return     string
	 */
	public function getTipoDoc()
	{
		return $this->tipo_doc;
	}

	/**
	 * Get the [nro_doc] column value.
	 * 
	 * @return     int
	 */
	public function getNroDoc()
	{
		return $this->nro_doc;
	}

	/**
	 * Get the [anulado] column value.
	 * 
	 * @return     boolean
	 */
	public function getAnulado()
	{
		return $this->anulado;
	}

	/**
	 * Get the [movi] column value.
	 * 
	 * @return     int
	 */
	public function getMovi()
	{
		return $this->movi;
	}

	/**
	 * Get the [aut] column value.
	 * 
	 * @return     boolean
	 */
	public function getAut()
	{
		return $this->aut;
	}

	/**
	 * Get the [num_control] column value.
	 * 
	 * @return     int
	 */
	public function getNumControl()
	{
		return $this->num_control;
	}

	/**
	 * Get the [co_cli] column value.
	 * 
	 * @return     string
	 */
	public function getCoCli()
	{
		return $this->co_cli;
	}

	/**
	 * Get the [contrib] column value.
	 * 
	 * @return     boolean
	 */
	public function getContrib()
	{
		return $this->contrib;
	}

	/**
	 * Get the [optionally formatted] temporal [fec_emis] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFecEmis($format = 'Y-m-d')
	{
		if ($this->fec_emis === null) {
			return null;
		}


		if ($this->fec_emis === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new MssqlDateTime($this->fec_emis);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->fec_emis, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fec_venc] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFecVenc($format = 'Y-m-d')
	{
		if ($this->fec_venc === null) {
			return null;
		}


		if ($this->fec_venc === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new MssqlDateTime($this->fec_venc);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->fec_venc, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [observa] column value.
	 * 
	 * @return     string
	 */
	public function getObserva()
	{
		return $this->observa;
	}

	/**
	 * Get the [doc_orig] column value.
	 * 
	 * @return     string
	 */
	public function getDocOrig()
	{
		return $this->doc_orig;
	}

	/**
	 * Get the [nro_orig] column value.
	 * 
	 * @return     int
	 */
	public function getNroOrig()
	{
		return $this->nro_orig;
	}

	/**
	 * Get the [co_ban] column value.
	 * 
	 * @return     string
	 */
	public function getCoBan()
	{
		return $this->co_ban;
	}

	/**
	 * Get the [nro_che] column value.
	 * 
	 * @return     string
	 */
	public function getNroChe()
	{
		return $this->nro_che;
	}

	/**
	 * Get the [co_ven] column value.
	 * 
	 * @return     string
	 */
	public function getCoVen()
	{
		return $this->co_ven;
	}

	/**
	 * Get the [tipo] column value.
	 * 
	 * @return     string
	 */
	public function getTipo()
	{
		return $this->tipo;
	}

	/**
	 * Get the [tasa] column value.
	 * 
	 * @return     string
	 */
	public function getTasa()
	{
		return $this->tasa;
	}

	/**
	 * Get the [moneda] column value.
	 * 
	 * @return     string
	 */
	public function getMoneda()
	{
		return $this->moneda;
	}

	/**
	 * Get the [monto_imp] column value.
	 * 
	 * @return     string
	 */
	public function getMontoImp()
	{
		return $this->monto_imp;
	}

	/**
	 * Get the [monto_gen] column value.
	 * 
	 * @return     string
	 */
	public function getMontoGen()
	{
		return $this->monto_gen;
	}

	/**
	 * Get the [monto_a1] column value.
	 * 
	 * @return     string
	 */
	public function getMontoA1()
	{
		return $this->monto_a1;
	}

	/**
	 * Get the [monto_a2] column value.
	 * 
	 * @return     string
	 */
	public function getMontoA2()
	{
		return $this->monto_a2;
	}

	/**
	 * Get the [monto_bru] column value.
	 * 
	 * @return     string
	 */
	public function getMontoBru()
	{
		return $this->monto_bru;
	}

	/**
	 * Get the [descuentos] column value.
	 * 
	 * @return     string
	 */
	public function getDescuentos()
	{
		return $this->descuentos;
	}

	/**
	 * Get the [monto_des] column value.
	 * 
	 * @return     string
	 */
	public function getMontoDes()
	{
		return $this->monto_des;
	}

	/**
	 * Get the [recargo] column value.
	 * 
	 * @return     string
	 */
	public function getRecargo()
	{
		return $this->recargo;
	}

	/**
	 * Get the [monto_rec] column value.
	 * 
	 * @return     string
	 */
	public function getMontoRec()
	{
		return $this->monto_rec;
	}

	/**
	 * Get the [monto_otr] column value.
	 * 
	 * @return     string
	 */
	public function getMontoOtr()
	{
		return $this->monto_otr;
	}

	/**
	 * Get the [monto_net] column value.
	 * 
	 * @return     string
	 */
	public function getMontoNet()
	{
		return $this->monto_net;
	}

	/**
	 * Get the [saldo] column value.
	 * 
	 * @return     string
	 */
	public function getSaldo()
	{
		return $this->saldo;
	}

	/**
	 * Get the [feccom] column value.
	 * 
	 * @return     string
	 */
	public function getFeccom()
	{
		return $this->feccom;
	}

	/**
	 * Get the [numcom] column value.
	 * 
	 * @return     int
	 */
	public function getNumcom()
	{
		return $this->numcom;
	}

	/**
	 * Get the [dis_cen] column value.
	 * 
	 * @return     string
	 */
	public function getDisCen()
	{
		return $this->dis_cen;
	}

	/**
	 * Get the [comis1] column value.
	 * 
	 * @return     string
	 */
	public function getComis1()
	{
		return $this->comis1;
	}

	/**
	 * Get the [comis2] column value.
	 * 
	 * @return     string
	 */
	public function getComis2()
	{
		return $this->comis2;
	}

	/**
	 * Get the [comis3] column value.
	 * 
	 * @return     string
	 */
	public function getComis3()
	{
		return $this->comis3;
	}

	/**
	 * Get the [comis4] column value.
	 * 
	 * @return     string
	 */
	public function getComis4()
	{
		return $this->comis4;
	}

	/**
	 * Get the [adicional] column value.
	 * 
	 * @return     string
	 */
	public function getAdicional()
	{
		return $this->adicional;
	}

	/**
	 * Get the [campo1] column value.
	 * 
	 * @return     string
	 */
	public function getCampo1()
	{
		return $this->campo1;
	}

	/**
	 * Get the [campo2] column value.
	 * 
	 * @return     string
	 */
	public function getCampo2()
	{
		return $this->campo2;
	}

	/**
	 * Get the [campo3] column value.
	 * 
	 * @return     string
	 */
	public function getCampo3()
	{
		return $this->campo3;
	}

	/**
	 * Get the [campo4] column value.
	 * 
	 * @return     string
	 */
	public function getCampo4()
	{
		return $this->campo4;
	}

	/**
	 * Get the [campo5] column value.
	 * 
	 * @return     string
	 */
	public function getCampo5()
	{
		return $this->campo5;
	}

	/**
	 * Get the [campo6] column value.
	 * 
	 * @return     string
	 */
	public function getCampo6()
	{
		return $this->campo6;
	}

	/**
	 * Get the [campo7] column value.
	 * 
	 * @return     string
	 */
	public function getCampo7()
	{
		return $this->campo7;
	}

	/**
	 * Get the [campo8] column value.
	 * 
	 * @return     string
	 */
	public function getCampo8()
	{
		return $this->campo8;
	}

	/**
	 * Get the [co_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsIn()
	{
		return $this->co_us_in;
	}

	/**
	 * Get the [fe_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsIn()
	{
		return $this->fe_us_in;
	}

	/**
	 * Get the [co_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsMo()
	{
		return $this->co_us_mo;
	}

	/**
	 * Get the [fe_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsMo()
	{
		return $this->fe_us_mo;
	}

	/**
	 * Get the [co_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsEl()
	{
		return $this->co_us_el;
	}

	/**
	 * Get the [fe_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsEl()
	{
		return $this->fe_us_el;
	}

	/**
	 * Get the [revisado] column value.
	 * 
	 * @return     string
	 */
	public function getRevisado()
	{
		return $this->revisado;
	}

	/**
	 * Get the [trasnfe] column value.
	 * 
	 * @return     string
	 */
	public function getTrasnfe()
	{
		return $this->trasnfe;
	}

	/**
	 * Get the [numcon] column value.
	 * 
	 * @return     string
	 */
	public function getNumcon()
	{
		return $this->numcon;
	}

	/**
	 * Get the [co_sucu] column value.
	 * 
	 * @return     string
	 */
	public function getCoSucu()
	{
		return $this->co_sucu;
	}

	/**
	 * Get the [rowguid] column value.
	 * 
	 * @return     string
	 */
	public function getRowguid()
	{
		return $this->rowguid;
	}

	/**
	 * Get the [mon_ilc] column value.
	 * 
	 * @return     string
	 */
	public function getMonIlc()
	{
		return $this->mon_ilc;
	}

	/**
	 * Get the [otros1] column value.
	 * 
	 * @return     string
	 */
	public function getOtros1()
	{
		return $this->otros1;
	}

	/**
	 * Get the [otros2] column value.
	 * 
	 * @return     string
	 */
	public function getOtros2()
	{
		return $this->otros2;
	}

	/**
	 * Get the [otros3] column value.
	 * 
	 * @return     string
	 */
	public function getOtros3()
	{
		return $this->otros3;
	}

	/**
	 * Get the [reng_si] column value.
	 * 
	 * @return     boolean
	 */
	public function getRengSi()
	{
		return $this->reng_si;
	}

	/**
	 * Get the [comis5] column value.
	 * 
	 * @return     string
	 */
	public function getComis5()
	{
		return $this->comis5;
	}

	/**
	 * Get the [comis6] column value.
	 * 
	 * @return     string
	 */
	public function getComis6()
	{
		return $this->comis6;
	}

	/**
	 * Get the [row_id] column value.
	 * 
	 * @return     string
	 */
	public function getRowId()
	{
		return $this->row_id;
	}

	/**
	 * Get the [aux01] column value.
	 * 
	 * @return     string
	 */
	public function getAux01()
	{
		return $this->aux01;
	}

	/**
	 * Get the [aux02] column value.
	 * 
	 * @return     string
	 */
	public function getAux02()
	{
		return $this->aux02;
	}

	/**
	 * Get the [salestax] column value.
	 * 
	 * @return     string
	 */
	public function getSalestax()
	{
		return $this->salestax;
	}

	/**
	 * Get the [origen] column value.
	 * 
	 * @return     string
	 */
	public function getOrigen()
	{
		return $this->origen;
	}

	/**
	 * Get the [origen_d] column value.
	 * 
	 * @return     string
	 */
	public function getOrigenD()
	{
		return $this->origen_d;
	}

	/**
	 * Get the [fec_reg] column value.
	 * 
	 * @return     string
	 */
	public function getFecReg()
	{
		return $this->fec_reg;
	}

	/**
	 * Set the value of [tipo_doc] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setTipoDoc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_doc !== $v) {
			$this->tipo_doc = $v;
			$this->modifiedColumns[] = DocumCcPeer::TIPO_DOC;
		}

		return $this;
	} // setTipoDoc()

	/**
	 * Set the value of [nro_doc] column.
	 * 
	 * @param      int $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setNroDoc($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nro_doc !== $v) {
			$this->nro_doc = $v;
			$this->modifiedColumns[] = DocumCcPeer::NRO_DOC;
		}

		return $this;
	} // setNroDoc()

	/**
	 * Set the value of [anulado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setAnulado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->anulado !== $v || $v === false) {
			$this->anulado = $v;
			$this->modifiedColumns[] = DocumCcPeer::ANULADO;
		}

		return $this;
	} // setAnulado()

	/**
	 * Set the value of [movi] column.
	 * 
	 * @param      int $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMovi($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->movi !== $v || $v === 0) {
			$this->movi = $v;
			$this->modifiedColumns[] = DocumCcPeer::MOVI;
		}

		return $this;
	} // setMovi()

	/**
	 * Set the value of [aut] column.
	 * 
	 * @param      boolean $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setAut($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->aut !== $v || $v === false) {
			$this->aut = $v;
			$this->modifiedColumns[] = DocumCcPeer::AUT;
		}

		return $this;
	} // setAut()

	/**
	 * Set the value of [num_control] column.
	 * 
	 * @param      int $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setNumControl($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->num_control !== $v || $v === 0) {
			$this->num_control = $v;
			$this->modifiedColumns[] = DocumCcPeer::NUM_CONTROL;
		}

		return $this;
	} // setNumControl()

	/**
	 * Set the value of [co_cli] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCoCli($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_cli !== $v || $v === ' ') {
			$this->co_cli = $v;
			$this->modifiedColumns[] = DocumCcPeer::CO_CLI;
		}

		if ($this->aClientes !== null && $this->aClientes->getCoCli() !== $v) {
			$this->aClientes = null;
		}

		return $this;
	} // setCoCli()

	/**
	 * Set the value of [contrib] column.
	 * 
	 * @param      boolean $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setContrib($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->contrib !== $v || $v === false) {
			$this->contrib = $v;
			$this->modifiedColumns[] = DocumCcPeer::CONTRIB;
		}

		return $this;
	} // setContrib()

	/**
	 * Sets the value of [fec_emis] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setFecEmis($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fec_emis !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fec_emis !== null && $tmpDt = new MssqlDateTime($this->fec_emis)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fec_emis = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = DocumCcPeer::FEC_EMIS;
			}
		} // if either are not null

		return $this;
	} // setFecEmis()

	/**
	 * Sets the value of [fec_venc] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setFecVenc($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fec_venc !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fec_venc !== null && $tmpDt = new MssqlDateTime($this->fec_venc)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fec_venc = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = DocumCcPeer::FEC_VENC;
			}
		} // if either are not null

		return $this;
	} // setFecVenc()

	/**
	 * Set the value of [observa] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setObserva($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observa !== $v || $v === ' ') {
			$this->observa = $v;
			$this->modifiedColumns[] = DocumCcPeer::OBSERVA;
		}

		return $this;
	} // setObserva()

	/**
	 * Set the value of [doc_orig] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setDocOrig($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->doc_orig !== $v || $v === ' ') {
			$this->doc_orig = $v;
			$this->modifiedColumns[] = DocumCcPeer::DOC_ORIG;
		}

		return $this;
	} // setDocOrig()

	/**
	 * Set the value of [nro_orig] column.
	 * 
	 * @param      int $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setNroOrig($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nro_orig !== $v || $v === 0) {
			$this->nro_orig = $v;
			$this->modifiedColumns[] = DocumCcPeer::NRO_ORIG;
		}

		return $this;
	} // setNroOrig()

	/**
	 * Set the value of [co_ban] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCoBan($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_ban !== $v || $v === '(\'0\')') {
			$this->co_ban = $v;
			$this->modifiedColumns[] = DocumCcPeer::CO_BAN;
		}

		return $this;
	} // setCoBan()

	/**
	 * Set the value of [nro_che] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setNroChe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nro_che !== $v || $v === ' ') {
			$this->nro_che = $v;
			$this->modifiedColumns[] = DocumCcPeer::NRO_CHE;
		}

		return $this;
	} // setNroChe()

	/**
	 * Set the value of [co_ven] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCoVen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_ven !== $v || $v === ' ') {
			$this->co_ven = $v;
			$this->modifiedColumns[] = DocumCcPeer::CO_VEN;
		}

		if ($this->aVendedor !== null && $this->aVendedor->getCoVen() !== $v) {
			$this->aVendedor = null;
		}

		return $this;
	} // setCoVen()

	/**
	 * Set the value of [tipo] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setTipo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo !== $v || $v === '(\'1\')') {
			$this->tipo = $v;
			$this->modifiedColumns[] = DocumCcPeer::TIPO;
		}

		if ($this->aTabulado !== null && $this->aTabulado->getTipo() !== $v) {
			$this->aTabulado = null;
		}

		return $this;
	} // setTipo()

	/**
	 * Set the value of [tasa] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setTasa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tasa !== $v || $v === '1') {
			$this->tasa = $v;
			$this->modifiedColumns[] = DocumCcPeer::TASA;
		}

		return $this;
	} // setTasa()

	/**
	 * Set the value of [moneda] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMoneda($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->moneda !== $v || $v === ' ') {
			$this->moneda = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONEDA;
		}

		if ($this->aMonedaRelatedByMoneda !== null && $this->aMonedaRelatedByMoneda->getCoMone() !== $v) {
			$this->aMonedaRelatedByMoneda = null;
		}

		return $this;
	} // setMoneda()

	/**
	 * Set the value of [monto_imp] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoImp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_imp !== $v || $v === '0') {
			$this->monto_imp = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_IMP;
		}

		return $this;
	} // setMontoImp()

	/**
	 * Set the value of [monto_gen] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoGen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_gen !== $v || $v === '0') {
			$this->monto_gen = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_GEN;
		}

		return $this;
	} // setMontoGen()

	/**
	 * Set the value of [monto_a1] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoA1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_a1 !== $v || $v === '0') {
			$this->monto_a1 = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_A1;
		}

		return $this;
	} // setMontoA1()

	/**
	 * Set the value of [monto_a2] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoA2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_a2 !== $v || $v === '0') {
			$this->monto_a2 = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_A2;
		}

		return $this;
	} // setMontoA2()

	/**
	 * Set the value of [monto_bru] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoBru($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_bru !== $v || $v === '0') {
			$this->monto_bru = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_BRU;
		}

		return $this;
	} // setMontoBru()

	/**
	 * Set the value of [descuentos] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setDescuentos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descuentos !== $v || $v === ' ') {
			$this->descuentos = $v;
			$this->modifiedColumns[] = DocumCcPeer::DESCUENTOS;
		}

		return $this;
	} // setDescuentos()

	/**
	 * Set the value of [monto_des] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoDes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_des !== $v || $v === '0') {
			$this->monto_des = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_DES;
		}

		return $this;
	} // setMontoDes()

	/**
	 * Set the value of [recargo] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setRecargo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->recargo !== $v || $v === ' ') {
			$this->recargo = $v;
			$this->modifiedColumns[] = DocumCcPeer::RECARGO;
		}

		return $this;
	} // setRecargo()

	/**
	 * Set the value of [monto_rec] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoRec($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_rec !== $v || $v === '0') {
			$this->monto_rec = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_REC;
		}

		return $this;
	} // setMontoRec()

	/**
	 * Set the value of [monto_otr] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoOtr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_otr !== $v || $v === '0') {
			$this->monto_otr = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_OTR;
		}

		return $this;
	} // setMontoOtr()

	/**
	 * Set the value of [monto_net] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMontoNet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_net !== $v || $v === '0') {
			$this->monto_net = $v;
			$this->modifiedColumns[] = DocumCcPeer::MONTO_NET;
		}

		return $this;
	} // setMontoNet()

	/**
	 * Set the value of [saldo] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setSaldo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->saldo !== $v || $v === '0') {
			$this->saldo = $v;
			$this->modifiedColumns[] = DocumCcPeer::SALDO;
		}

		return $this;
	} // setSaldo()

	/**
	 * Set the value of [feccom] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setFeccom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->feccom !== $v) {
			$this->feccom = $v;
			$this->modifiedColumns[] = DocumCcPeer::FECCOM;
		}

		return $this;
	} // setFeccom()

	/**
	 * Set the value of [numcom] column.
	 * 
	 * @param      int $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setNumcom($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->numcom !== $v || $v === 0) {
			$this->numcom = $v;
			$this->modifiedColumns[] = DocumCcPeer::NUMCOM;
		}

		return $this;
	} // setNumcom()

	/**
	 * Set the value of [dis_cen] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setDisCen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dis_cen !== $v || $v === ' ') {
			$this->dis_cen = $v;
			$this->modifiedColumns[] = DocumCcPeer::DIS_CEN;
		}

		return $this;
	} // setDisCen()

	/**
	 * Set the value of [comis1] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setComis1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis1 !== $v || $v === '0') {
			$this->comis1 = $v;
			$this->modifiedColumns[] = DocumCcPeer::COMIS1;
		}

		return $this;
	} // setComis1()

	/**
	 * Set the value of [comis2] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setComis2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis2 !== $v || $v === '0') {
			$this->comis2 = $v;
			$this->modifiedColumns[] = DocumCcPeer::COMIS2;
		}

		return $this;
	} // setComis2()

	/**
	 * Set the value of [comis3] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setComis3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis3 !== $v || $v === '0') {
			$this->comis3 = $v;
			$this->modifiedColumns[] = DocumCcPeer::COMIS3;
		}

		return $this;
	} // setComis3()

	/**
	 * Set the value of [comis4] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setComis4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis4 !== $v || $v === '0') {
			$this->comis4 = $v;
			$this->modifiedColumns[] = DocumCcPeer::COMIS4;
		}

		return $this;
	} // setComis4()

	/**
	 * Set the value of [adicional] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setAdicional($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->adicional !== $v || $v === '0') {
			$this->adicional = $v;
			$this->modifiedColumns[] = DocumCcPeer::ADICIONAL;
		}

		return $this;
	} // setAdicional()

	/**
	 * Set the value of [campo1] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCampo1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo1 !== $v || $v === ' ') {
			$this->campo1 = $v;
			$this->modifiedColumns[] = DocumCcPeer::CAMPO1;
		}

		return $this;
	} // setCampo1()

	/**
	 * Set the value of [campo2] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCampo2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo2 !== $v || $v === ' ') {
			$this->campo2 = $v;
			$this->modifiedColumns[] = DocumCcPeer::CAMPO2;
		}

		return $this;
	} // setCampo2()

	/**
	 * Set the value of [campo3] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCampo3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo3 !== $v || $v === ' ') {
			$this->campo3 = $v;
			$this->modifiedColumns[] = DocumCcPeer::CAMPO3;
		}

		return $this;
	} // setCampo3()

	/**
	 * Set the value of [campo4] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCampo4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo4 !== $v || $v === ' ') {
			$this->campo4 = $v;
			$this->modifiedColumns[] = DocumCcPeer::CAMPO4;
		}

		return $this;
	} // setCampo4()

	/**
	 * Set the value of [campo5] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCampo5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo5 !== $v || $v === ' ') {
			$this->campo5 = $v;
			$this->modifiedColumns[] = DocumCcPeer::CAMPO5;
		}

		return $this;
	} // setCampo5()

	/**
	 * Set the value of [campo6] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCampo6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo6 !== $v || $v === ' ') {
			$this->campo6 = $v;
			$this->modifiedColumns[] = DocumCcPeer::CAMPO6;
		}

		return $this;
	} // setCampo6()

	/**
	 * Set the value of [campo7] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCampo7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo7 !== $v || $v === ' ') {
			$this->campo7 = $v;
			$this->modifiedColumns[] = DocumCcPeer::CAMPO7;
		}

		return $this;
	} // setCampo7()

	/**
	 * Set the value of [campo8] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCampo8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo8 !== $v || $v === ' ') {
			$this->campo8 = $v;
			$this->modifiedColumns[] = DocumCcPeer::CAMPO8;
		}

		return $this;
	} // setCampo8()

	/**
	 * Set the value of [co_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCoUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_in !== $v || $v === ' ') {
			$this->co_us_in = $v;
			$this->modifiedColumns[] = DocumCcPeer::CO_US_IN;
		}

		return $this;
	} // setCoUsIn()

	/**
	 * Set the value of [fe_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setFeUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_in !== $v) {
			$this->fe_us_in = $v;
			$this->modifiedColumns[] = DocumCcPeer::FE_US_IN;
		}

		return $this;
	} // setFeUsIn()

	/**
	 * Set the value of [co_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCoUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_mo !== $v || $v === ' ') {
			$this->co_us_mo = $v;
			$this->modifiedColumns[] = DocumCcPeer::CO_US_MO;
		}

		return $this;
	} // setCoUsMo()

	/**
	 * Set the value of [fe_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setFeUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_mo !== $v) {
			$this->fe_us_mo = $v;
			$this->modifiedColumns[] = DocumCcPeer::FE_US_MO;
		}

		return $this;
	} // setFeUsMo()

	/**
	 * Set the value of [co_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCoUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_el !== $v || $v === ' ') {
			$this->co_us_el = $v;
			$this->modifiedColumns[] = DocumCcPeer::CO_US_EL;
		}

		return $this;
	} // setCoUsEl()

	/**
	 * Set the value of [fe_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setFeUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_el !== $v) {
			$this->fe_us_el = $v;
			$this->modifiedColumns[] = DocumCcPeer::FE_US_EL;
		}

		return $this;
	} // setFeUsEl()

	/**
	 * Set the value of [revisado] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setRevisado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->revisado !== $v || $v === ' ') {
			$this->revisado = $v;
			$this->modifiedColumns[] = DocumCcPeer::REVISADO;
		}

		return $this;
	} // setRevisado()

	/**
	 * Set the value of [trasnfe] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setTrasnfe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->trasnfe !== $v || $v === ' ') {
			$this->trasnfe = $v;
			$this->modifiedColumns[] = DocumCcPeer::TRASNFE;
		}

		return $this;
	} // setTrasnfe()

	/**
	 * Set the value of [numcon] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setNumcon($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numcon !== $v || $v === ' ') {
			$this->numcon = $v;
			$this->modifiedColumns[] = DocumCcPeer::NUMCON;
		}

		return $this;
	} // setNumcon()

	/**
	 * Set the value of [co_sucu] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setCoSucu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_sucu !== $v || $v === ' ') {
			$this->co_sucu = $v;
			$this->modifiedColumns[] = DocumCcPeer::CO_SUCU;
		}

		if ($this->aAlmacen !== null && $this->aAlmacen->getCoAlma() !== $v) {
			$this->aAlmacen = null;
		}

		return $this;
	} // setCoSucu()

	/**
	 * Set the value of [rowguid] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setRowguid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowguid !== $v || $v === '(newid())') {
			$this->rowguid = $v;
			$this->modifiedColumns[] = DocumCcPeer::ROWGUID;
		}

		return $this;
	} // setRowguid()

	/**
	 * Set the value of [mon_ilc] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setMonIlc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mon_ilc !== $v || $v === '0') {
			$this->mon_ilc = $v;
			$this->modifiedColumns[] = DocumCcPeer::MON_ILC;
		}

		return $this;
	} // setMonIlc()

	/**
	 * Set the value of [otros1] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setOtros1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otros1 !== $v || $v === '0') {
			$this->otros1 = $v;
			$this->modifiedColumns[] = DocumCcPeer::OTROS1;
		}

		return $this;
	} // setOtros1()

	/**
	 * Set the value of [otros2] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setOtros2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otros2 !== $v || $v === '0') {
			$this->otros2 = $v;
			$this->modifiedColumns[] = DocumCcPeer::OTROS2;
		}

		return $this;
	} // setOtros2()

	/**
	 * Set the value of [otros3] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setOtros3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otros3 !== $v || $v === '0') {
			$this->otros3 = $v;
			$this->modifiedColumns[] = DocumCcPeer::OTROS3;
		}

		return $this;
	} // setOtros3()

	/**
	 * Set the value of [reng_si] column.
	 * 
	 * @param      boolean $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setRengSi($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->reng_si !== $v || $v === false) {
			$this->reng_si = $v;
			$this->modifiedColumns[] = DocumCcPeer::RENG_SI;
		}

		return $this;
	} // setRengSi()

	/**
	 * Set the value of [comis5] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setComis5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis5 !== $v || $v === '0') {
			$this->comis5 = $v;
			$this->modifiedColumns[] = DocumCcPeer::COMIS5;
		}

		return $this;
	} // setComis5()

	/**
	 * Set the value of [comis6] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setComis6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comis6 !== $v || $v === '0') {
			$this->comis6 = $v;
			$this->modifiedColumns[] = DocumCcPeer::COMIS6;
		}

		return $this;
	} // setComis6()

	/**
	 * Set the value of [row_id] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setRowId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->row_id !== $v) {
			$this->row_id = $v;
			$this->modifiedColumns[] = DocumCcPeer::ROW_ID;
		}

		return $this;
	} // setRowId()

	/**
	 * Set the value of [aux01] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setAux01($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aux01 !== $v || $v === '0') {
			$this->aux01 = $v;
			$this->modifiedColumns[] = DocumCcPeer::AUX01;
		}

		return $this;
	} // setAux01()

	/**
	 * Set the value of [aux02] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setAux02($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aux02 !== $v || $v === ' ') {
			$this->aux02 = $v;
			$this->modifiedColumns[] = DocumCcPeer::AUX02;
		}

		return $this;
	} // setAux02()

	/**
	 * Set the value of [salestax] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setSalestax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salestax !== $v || $v === ' ') {
			$this->salestax = $v;
			$this->modifiedColumns[] = DocumCcPeer::SALESTAX;
		}

		return $this;
	} // setSalestax()

	/**
	 * Set the value of [origen] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setOrigen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->origen !== $v || $v === ' ') {
			$this->origen = $v;
			$this->modifiedColumns[] = DocumCcPeer::ORIGEN;
		}

		return $this;
	} // setOrigen()

	/**
	 * Set the value of [origen_d] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setOrigenD($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->origen_d !== $v || $v === ' ') {
			$this->origen_d = $v;
			$this->modifiedColumns[] = DocumCcPeer::ORIGEN_D;
		}

		return $this;
	} // setOrigenD()

	/**
	 * Set the value of [fec_reg] column.
	 * 
	 * @param      string $v new value
	 * @return     DocumCc The current object (for fluent API support)
	 */
	public function setFecReg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_reg !== $v) {
			$this->fec_reg = $v;
			$this->modifiedColumns[] = DocumCcPeer::FEC_REG;
		}

		return $this;
	} // setFecReg()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(DocumCcPeer::ANULADO,DocumCcPeer::MOVI,DocumCcPeer::AUT,DocumCcPeer::NUM_CONTROL,DocumCcPeer::CO_CLI,DocumCcPeer::CONTRIB,DocumCcPeer::OBSERVA,DocumCcPeer::DOC_ORIG,DocumCcPeer::NRO_ORIG,DocumCcPeer::CO_BAN,DocumCcPeer::NRO_CHE,DocumCcPeer::CO_VEN,DocumCcPeer::TIPO,DocumCcPeer::TASA,DocumCcPeer::MONEDA,DocumCcPeer::MONTO_IMP,DocumCcPeer::MONTO_GEN,DocumCcPeer::MONTO_A1,DocumCcPeer::MONTO_A2,DocumCcPeer::MONTO_BRU,DocumCcPeer::DESCUENTOS,DocumCcPeer::MONTO_DES,DocumCcPeer::RECARGO,DocumCcPeer::MONTO_REC,DocumCcPeer::MONTO_OTR,DocumCcPeer::MONTO_NET,DocumCcPeer::SALDO,DocumCcPeer::NUMCOM,DocumCcPeer::DIS_CEN,DocumCcPeer::COMIS1,DocumCcPeer::COMIS2,DocumCcPeer::COMIS3,DocumCcPeer::COMIS4,DocumCcPeer::ADICIONAL,DocumCcPeer::CAMPO1,DocumCcPeer::CAMPO2,DocumCcPeer::CAMPO3,DocumCcPeer::CAMPO4,DocumCcPeer::CAMPO5,DocumCcPeer::CAMPO6,DocumCcPeer::CAMPO7,DocumCcPeer::CAMPO8,DocumCcPeer::CO_US_IN,DocumCcPeer::CO_US_MO,DocumCcPeer::CO_US_EL,DocumCcPeer::REVISADO,DocumCcPeer::TRASNFE,DocumCcPeer::NUMCON,DocumCcPeer::CO_SUCU,DocumCcPeer::ROWGUID,DocumCcPeer::MON_ILC,DocumCcPeer::OTROS1,DocumCcPeer::OTROS2,DocumCcPeer::OTROS3,DocumCcPeer::RENG_SI,DocumCcPeer::COMIS5,DocumCcPeer::COMIS6,DocumCcPeer::AUX01,DocumCcPeer::AUX02,DocumCcPeer::SALESTAX,DocumCcPeer::ORIGEN,DocumCcPeer::ORIGEN_D))) {
				return false;
			}

			if ($this->anulado !== false) {
				return false;
			}

			if ($this->movi !== 0) {
				return false;
			}

			if ($this->aut !== false) {
				return false;
			}

			if ($this->num_control !== 0) {
				return false;
			}

			if ($this->co_cli !== ' ') {
				return false;
			}

			if ($this->contrib !== false) {
				return false;
			}

			if ($this->observa !== ' ') {
				return false;
			}

			if ($this->doc_orig !== ' ') {
				return false;
			}

			if ($this->nro_orig !== 0) {
				return false;
			}

			if ($this->co_ban !== '(\'0\')') {
				return false;
			}

			if ($this->nro_che !== ' ') {
				return false;
			}

			if ($this->co_ven !== ' ') {
				return false;
			}

			if ($this->tipo !== '(\'1\')') {
				return false;
			}

			if ($this->tasa !== '1') {
				return false;
			}

			if ($this->moneda !== ' ') {
				return false;
			}

			if ($this->monto_imp !== '0') {
				return false;
			}

			if ($this->monto_gen !== '0') {
				return false;
			}

			if ($this->monto_a1 !== '0') {
				return false;
			}

			if ($this->monto_a2 !== '0') {
				return false;
			}

			if ($this->monto_bru !== '0') {
				return false;
			}

			if ($this->descuentos !== ' ') {
				return false;
			}

			if ($this->monto_des !== '0') {
				return false;
			}

			if ($this->recargo !== ' ') {
				return false;
			}

			if ($this->monto_rec !== '0') {
				return false;
			}

			if ($this->monto_otr !== '0') {
				return false;
			}

			if ($this->monto_net !== '0') {
				return false;
			}

			if ($this->saldo !== '0') {
				return false;
			}

			if ($this->numcom !== 0) {
				return false;
			}

			if ($this->dis_cen !== ' ') {
				return false;
			}

			if ($this->comis1 !== '0') {
				return false;
			}

			if ($this->comis2 !== '0') {
				return false;
			}

			if ($this->comis3 !== '0') {
				return false;
			}

			if ($this->comis4 !== '0') {
				return false;
			}

			if ($this->adicional !== '0') {
				return false;
			}

			if ($this->campo1 !== ' ') {
				return false;
			}

			if ($this->campo2 !== ' ') {
				return false;
			}

			if ($this->campo3 !== ' ') {
				return false;
			}

			if ($this->campo4 !== ' ') {
				return false;
			}

			if ($this->campo5 !== ' ') {
				return false;
			}

			if ($this->campo6 !== ' ') {
				return false;
			}

			if ($this->campo7 !== ' ') {
				return false;
			}

			if ($this->campo8 !== ' ') {
				return false;
			}

			if ($this->co_us_in !== ' ') {
				return false;
			}

			if ($this->co_us_mo !== ' ') {
				return false;
			}

			if ($this->co_us_el !== ' ') {
				return false;
			}

			if ($this->revisado !== ' ') {
				return false;
			}

			if ($this->trasnfe !== ' ') {
				return false;
			}

			if ($this->numcon !== ' ') {
				return false;
			}

			if ($this->co_sucu !== ' ') {
				return false;
			}

			if ($this->rowguid !== '(newid())') {
				return false;
			}

			if ($this->mon_ilc !== '0') {
				return false;
			}

			if ($this->otros1 !== '0') {
				return false;
			}

			if ($this->otros2 !== '0') {
				return false;
			}

			if ($this->otros3 !== '0') {
				return false;
			}

			if ($this->reng_si !== false) {
				return false;
			}

			if ($this->comis5 !== '0') {
				return false;
			}

			if ($this->comis6 !== '0') {
				return false;
			}

			if ($this->aux01 !== '0') {
				return false;
			}

			if ($this->aux02 !== ' ') {
				return false;
			}

			if ($this->salestax !== ' ') {
				return false;
			}

			if ($this->origen !== ' ') {
				return false;
			}

			if ($this->origen_d !== ' ') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->tipo_doc = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->nro_doc = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->anulado = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->movi = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->aut = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
			$this->num_control = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->co_cli = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->contrib = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->fec_emis = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->fec_venc = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->observa = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->doc_orig = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->nro_orig = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->co_ban = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->nro_che = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->co_ven = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->tipo = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->tasa = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->moneda = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->monto_imp = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->monto_gen = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->monto_a1 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->monto_a2 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->monto_bru = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->descuentos = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->monto_des = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->recargo = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->monto_rec = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->monto_otr = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->monto_net = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->saldo = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->feccom = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->numcom = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->dis_cen = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->comis1 = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->comis2 = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->comis3 = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->comis4 = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->adicional = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->campo1 = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->campo2 = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->campo3 = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->campo4 = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->campo5 = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->campo6 = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->campo7 = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->campo8 = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->co_us_in = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->fe_us_in = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->co_us_mo = ($row[$startcol + 49] !== null) ? (string) $row[$startcol + 49] : null;
			$this->fe_us_mo = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
			$this->co_us_el = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
			$this->fe_us_el = ($row[$startcol + 52] !== null) ? (string) $row[$startcol + 52] : null;
			$this->revisado = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->trasnfe = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
			$this->numcon = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->co_sucu = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
			$this->rowguid = ($row[$startcol + 57] !== null) ? (string) $row[$startcol + 57] : null;
			$this->mon_ilc = ($row[$startcol + 58] !== null) ? (string) $row[$startcol + 58] : null;
			$this->otros1 = ($row[$startcol + 59] !== null) ? (string) $row[$startcol + 59] : null;
			$this->otros2 = ($row[$startcol + 60] !== null) ? (string) $row[$startcol + 60] : null;
			$this->otros3 = ($row[$startcol + 61] !== null) ? (string) $row[$startcol + 61] : null;
			$this->reng_si = ($row[$startcol + 62] !== null) ? (boolean) $row[$startcol + 62] : null;
			$this->comis5 = ($row[$startcol + 63] !== null) ? (string) $row[$startcol + 63] : null;
			$this->comis6 = ($row[$startcol + 64] !== null) ? (string) $row[$startcol + 64] : null;
			$this->row_id = ($row[$startcol + 65] !== null) ? (string) $row[$startcol + 65] : null;
			$this->aux01 = ($row[$startcol + 66] !== null) ? (string) $row[$startcol + 66] : null;
			$this->aux02 = ($row[$startcol + 67] !== null) ? (string) $row[$startcol + 67] : null;
			$this->salestax = ($row[$startcol + 68] !== null) ? (string) $row[$startcol + 68] : null;
			$this->origen = ($row[$startcol + 69] !== null) ? (string) $row[$startcol + 69] : null;
			$this->origen_d = ($row[$startcol + 70] !== null) ? (string) $row[$startcol + 70] : null;
			$this->fec_reg = ($row[$startcol + 71] !== null) ? (string) $row[$startcol + 71] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 72; // 72 = DocumCcPeer::NUM_COLUMNS - DocumCcPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating DocumCc object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aClientes !== null && $this->co_cli !== $this->aClientes->getCoCli()) {
			$this->aClientes = null;
		}
		if ($this->aVendedor !== null && $this->co_ven !== $this->aVendedor->getCoVen()) {
			$this->aVendedor = null;
		}
		if ($this->aTabulado !== null && $this->tipo !== $this->aTabulado->getTipo()) {
			$this->aTabulado = null;
		}
		if ($this->aMonedaRelatedByMoneda !== null && $this->moneda !== $this->aMonedaRelatedByMoneda->getCoMone()) {
			$this->aMonedaRelatedByMoneda = null;
		}
		if ($this->aAlmacen !== null && $this->co_sucu !== $this->aAlmacen->getCoAlma()) {
			$this->aAlmacen = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = DocumCcPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aClientes = null;
			$this->aVendedor = null;
			$this->aTabulado = null;
			$this->aMonedaRelatedByMoneda = null;
			$this->aAlmacen = null;
			$this->collRengCobs = null;
			$this->lastRengCobCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseDocumCc:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			DocumCcPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseDocumCc:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseDocumCc:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(DocumCcPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseDocumCc:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			DocumCcPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aClientes !== null) {
				if ($this->aClientes->isModified() || $this->aClientes->isNew()) {
					$affectedRows += $this->aClientes->save($con);
				}
				$this->setClientes($this->aClientes);
			}

			if ($this->aVendedor !== null) {
				if ($this->aVendedor->isModified() || $this->aVendedor->isNew()) {
					$affectedRows += $this->aVendedor->save($con);
				}
				$this->setVendedor($this->aVendedor);
			}

			if ($this->aTabulado !== null) {
				if ($this->aTabulado->isModified() || $this->aTabulado->isNew()) {
					$affectedRows += $this->aTabulado->save($con);
				}
				$this->setTabulado($this->aTabulado);
			}

			if ($this->aMonedaRelatedByMoneda !== null) {
				if ($this->aMonedaRelatedByMoneda->isModified() || $this->aMonedaRelatedByMoneda->isNew()) {
					$affectedRows += $this->aMonedaRelatedByMoneda->save($con);
				}
				$this->setMonedaRelatedByMoneda($this->aMonedaRelatedByMoneda);
			}

			if ($this->aAlmacen !== null) {
				if ($this->aAlmacen->isModified() || $this->aAlmacen->isNew()) {
					$affectedRows += $this->aAlmacen->save($con);
				}
				$this->setAlmacen($this->aAlmacen);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = DocumCcPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += DocumCcPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collRengCobs !== null) {
				foreach ($this->collRengCobs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aClientes !== null) {
				if (!$this->aClientes->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aClientes->getValidationFailures());
				}
			}

			if ($this->aVendedor !== null) {
				if (!$this->aVendedor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aVendedor->getValidationFailures());
				}
			}

			if ($this->aTabulado !== null) {
				if (!$this->aTabulado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTabulado->getValidationFailures());
				}
			}

			if ($this->aMonedaRelatedByMoneda !== null) {
				if (!$this->aMonedaRelatedByMoneda->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMonedaRelatedByMoneda->getValidationFailures());
				}
			}

			if ($this->aAlmacen !== null) {
				if (!$this->aAlmacen->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlmacen->getValidationFailures());
				}
			}


			if (($retval = DocumCcPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collRengCobs !== null) {
					foreach ($this->collRengCobs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = DocumCcPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getTipoDoc();
				break;
			case 1:
				return $this->getNroDoc();
				break;
			case 2:
				return $this->getAnulado();
				break;
			case 3:
				return $this->getMovi();
				break;
			case 4:
				return $this->getAut();
				break;
			case 5:
				return $this->getNumControl();
				break;
			case 6:
				return $this->getCoCli();
				break;
			case 7:
				return $this->getContrib();
				break;
			case 8:
				return $this->getFecEmis();
				break;
			case 9:
				return $this->getFecVenc();
				break;
			case 10:
				return $this->getObserva();
				break;
			case 11:
				return $this->getDocOrig();
				break;
			case 12:
				return $this->getNroOrig();
				break;
			case 13:
				return $this->getCoBan();
				break;
			case 14:
				return $this->getNroChe();
				break;
			case 15:
				return $this->getCoVen();
				break;
			case 16:
				return $this->getTipo();
				break;
			case 17:
				return $this->getTasa();
				break;
			case 18:
				return $this->getMoneda();
				break;
			case 19:
				return $this->getMontoImp();
				break;
			case 20:
				return $this->getMontoGen();
				break;
			case 21:
				return $this->getMontoA1();
				break;
			case 22:
				return $this->getMontoA2();
				break;
			case 23:
				return $this->getMontoBru();
				break;
			case 24:
				return $this->getDescuentos();
				break;
			case 25:
				return $this->getMontoDes();
				break;
			case 26:
				return $this->getRecargo();
				break;
			case 27:
				return $this->getMontoRec();
				break;
			case 28:
				return $this->getMontoOtr();
				break;
			case 29:
				return $this->getMontoNet();
				break;
			case 30:
				return $this->getSaldo();
				break;
			case 31:
				return $this->getFeccom();
				break;
			case 32:
				return $this->getNumcom();
				break;
			case 33:
				return $this->getDisCen();
				break;
			case 34:
				return $this->getComis1();
				break;
			case 35:
				return $this->getComis2();
				break;
			case 36:
				return $this->getComis3();
				break;
			case 37:
				return $this->getComis4();
				break;
			case 38:
				return $this->getAdicional();
				break;
			case 39:
				return $this->getCampo1();
				break;
			case 40:
				return $this->getCampo2();
				break;
			case 41:
				return $this->getCampo3();
				break;
			case 42:
				return $this->getCampo4();
				break;
			case 43:
				return $this->getCampo5();
				break;
			case 44:
				return $this->getCampo6();
				break;
			case 45:
				return $this->getCampo7();
				break;
			case 46:
				return $this->getCampo8();
				break;
			case 47:
				return $this->getCoUsIn();
				break;
			case 48:
				return $this->getFeUsIn();
				break;
			case 49:
				return $this->getCoUsMo();
				break;
			case 50:
				return $this->getFeUsMo();
				break;
			case 51:
				return $this->getCoUsEl();
				break;
			case 52:
				return $this->getFeUsEl();
				break;
			case 53:
				return $this->getRevisado();
				break;
			case 54:
				return $this->getTrasnfe();
				break;
			case 55:
				return $this->getNumcon();
				break;
			case 56:
				return $this->getCoSucu();
				break;
			case 57:
				return $this->getRowguid();
				break;
			case 58:
				return $this->getMonIlc();
				break;
			case 59:
				return $this->getOtros1();
				break;
			case 60:
				return $this->getOtros2();
				break;
			case 61:
				return $this->getOtros3();
				break;
			case 62:
				return $this->getRengSi();
				break;
			case 63:
				return $this->getComis5();
				break;
			case 64:
				return $this->getComis6();
				break;
			case 65:
				return $this->getRowId();
				break;
			case 66:
				return $this->getAux01();
				break;
			case 67:
				return $this->getAux02();
				break;
			case 68:
				return $this->getSalestax();
				break;
			case 69:
				return $this->getOrigen();
				break;
			case 70:
				return $this->getOrigenD();
				break;
			case 71:
				return $this->getFecReg();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = DocumCcPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getTipoDoc(),
			$keys[1] => $this->getNroDoc(),
			$keys[2] => $this->getAnulado(),
			$keys[3] => $this->getMovi(),
			$keys[4] => $this->getAut(),
			$keys[5] => $this->getNumControl(),
			$keys[6] => $this->getCoCli(),
			$keys[7] => $this->getContrib(),
			$keys[8] => $this->getFecEmis(),
			$keys[9] => $this->getFecVenc(),
			$keys[10] => $this->getObserva(),
			$keys[11] => $this->getDocOrig(),
			$keys[12] => $this->getNroOrig(),
			$keys[13] => $this->getCoBan(),
			$keys[14] => $this->getNroChe(),
			$keys[15] => $this->getCoVen(),
			$keys[16] => $this->getTipo(),
			$keys[17] => $this->getTasa(),
			$keys[18] => $this->getMoneda(),
			$keys[19] => $this->getMontoImp(),
			$keys[20] => $this->getMontoGen(),
			$keys[21] => $this->getMontoA1(),
			$keys[22] => $this->getMontoA2(),
			$keys[23] => $this->getMontoBru(),
			$keys[24] => $this->getDescuentos(),
			$keys[25] => $this->getMontoDes(),
			$keys[26] => $this->getRecargo(),
			$keys[27] => $this->getMontoRec(),
			$keys[28] => $this->getMontoOtr(),
			$keys[29] => $this->getMontoNet(),
			$keys[30] => $this->getSaldo(),
			$keys[31] => $this->getFeccom(),
			$keys[32] => $this->getNumcom(),
			$keys[33] => $this->getDisCen(),
			$keys[34] => $this->getComis1(),
			$keys[35] => $this->getComis2(),
			$keys[36] => $this->getComis3(),
			$keys[37] => $this->getComis4(),
			$keys[38] => $this->getAdicional(),
			$keys[39] => $this->getCampo1(),
			$keys[40] => $this->getCampo2(),
			$keys[41] => $this->getCampo3(),
			$keys[42] => $this->getCampo4(),
			$keys[43] => $this->getCampo5(),
			$keys[44] => $this->getCampo6(),
			$keys[45] => $this->getCampo7(),
			$keys[46] => $this->getCampo8(),
			$keys[47] => $this->getCoUsIn(),
			$keys[48] => $this->getFeUsIn(),
			$keys[49] => $this->getCoUsMo(),
			$keys[50] => $this->getFeUsMo(),
			$keys[51] => $this->getCoUsEl(),
			$keys[52] => $this->getFeUsEl(),
			$keys[53] => $this->getRevisado(),
			$keys[54] => $this->getTrasnfe(),
			$keys[55] => $this->getNumcon(),
			$keys[56] => $this->getCoSucu(),
			$keys[57] => $this->getRowguid(),
			$keys[58] => $this->getMonIlc(),
			$keys[59] => $this->getOtros1(),
			$keys[60] => $this->getOtros2(),
			$keys[61] => $this->getOtros3(),
			$keys[62] => $this->getRengSi(),
			$keys[63] => $this->getComis5(),
			$keys[64] => $this->getComis6(),
			$keys[65] => $this->getRowId(),
			$keys[66] => $this->getAux01(),
			$keys[67] => $this->getAux02(),
			$keys[68] => $this->getSalestax(),
			$keys[69] => $this->getOrigen(),
			$keys[70] => $this->getOrigenD(),
			$keys[71] => $this->getFecReg(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = DocumCcPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setTipoDoc($value);
				break;
			case 1:
				$this->setNroDoc($value);
				break;
			case 2:
				$this->setAnulado($value);
				break;
			case 3:
				$this->setMovi($value);
				break;
			case 4:
				$this->setAut($value);
				break;
			case 5:
				$this->setNumControl($value);
				break;
			case 6:
				$this->setCoCli($value);
				break;
			case 7:
				$this->setContrib($value);
				break;
			case 8:
				$this->setFecEmis($value);
				break;
			case 9:
				$this->setFecVenc($value);
				break;
			case 10:
				$this->setObserva($value);
				break;
			case 11:
				$this->setDocOrig($value);
				break;
			case 12:
				$this->setNroOrig($value);
				break;
			case 13:
				$this->setCoBan($value);
				break;
			case 14:
				$this->setNroChe($value);
				break;
			case 15:
				$this->setCoVen($value);
				break;
			case 16:
				$this->setTipo($value);
				break;
			case 17:
				$this->setTasa($value);
				break;
			case 18:
				$this->setMoneda($value);
				break;
			case 19:
				$this->setMontoImp($value);
				break;
			case 20:
				$this->setMontoGen($value);
				break;
			case 21:
				$this->setMontoA1($value);
				break;
			case 22:
				$this->setMontoA2($value);
				break;
			case 23:
				$this->setMontoBru($value);
				break;
			case 24:
				$this->setDescuentos($value);
				break;
			case 25:
				$this->setMontoDes($value);
				break;
			case 26:
				$this->setRecargo($value);
				break;
			case 27:
				$this->setMontoRec($value);
				break;
			case 28:
				$this->setMontoOtr($value);
				break;
			case 29:
				$this->setMontoNet($value);
				break;
			case 30:
				$this->setSaldo($value);
				break;
			case 31:
				$this->setFeccom($value);
				break;
			case 32:
				$this->setNumcom($value);
				break;
			case 33:
				$this->setDisCen($value);
				break;
			case 34:
				$this->setComis1($value);
				break;
			case 35:
				$this->setComis2($value);
				break;
			case 36:
				$this->setComis3($value);
				break;
			case 37:
				$this->setComis4($value);
				break;
			case 38:
				$this->setAdicional($value);
				break;
			case 39:
				$this->setCampo1($value);
				break;
			case 40:
				$this->setCampo2($value);
				break;
			case 41:
				$this->setCampo3($value);
				break;
			case 42:
				$this->setCampo4($value);
				break;
			case 43:
				$this->setCampo5($value);
				break;
			case 44:
				$this->setCampo6($value);
				break;
			case 45:
				$this->setCampo7($value);
				break;
			case 46:
				$this->setCampo8($value);
				break;
			case 47:
				$this->setCoUsIn($value);
				break;
			case 48:
				$this->setFeUsIn($value);
				break;
			case 49:
				$this->setCoUsMo($value);
				break;
			case 50:
				$this->setFeUsMo($value);
				break;
			case 51:
				$this->setCoUsEl($value);
				break;
			case 52:
				$this->setFeUsEl($value);
				break;
			case 53:
				$this->setRevisado($value);
				break;
			case 54:
				$this->setTrasnfe($value);
				break;
			case 55:
				$this->setNumcon($value);
				break;
			case 56:
				$this->setCoSucu($value);
				break;
			case 57:
				$this->setRowguid($value);
				break;
			case 58:
				$this->setMonIlc($value);
				break;
			case 59:
				$this->setOtros1($value);
				break;
			case 60:
				$this->setOtros2($value);
				break;
			case 61:
				$this->setOtros3($value);
				break;
			case 62:
				$this->setRengSi($value);
				break;
			case 63:
				$this->setComis5($value);
				break;
			case 64:
				$this->setComis6($value);
				break;
			case 65:
				$this->setRowId($value);
				break;
			case 66:
				$this->setAux01($value);
				break;
			case 67:
				$this->setAux02($value);
				break;
			case 68:
				$this->setSalestax($value);
				break;
			case 69:
				$this->setOrigen($value);
				break;
			case 70:
				$this->setOrigenD($value);
				break;
			case 71:
				$this->setFecReg($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = DocumCcPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setTipoDoc($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNroDoc($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAnulado($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setMovi($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAut($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNumControl($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCoCli($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setContrib($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setFecEmis($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setFecVenc($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setObserva($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDocOrig($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setNroOrig($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCoBan($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setNroChe($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCoVen($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setTipo($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTasa($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMoneda($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setMontoImp($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setMontoGen($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setMontoA1($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setMontoA2($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setMontoBru($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setDescuentos($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setMontoDes($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setRecargo($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setMontoRec($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setMontoOtr($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setMontoNet($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setSaldo($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setFeccom($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setNumcom($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setDisCen($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setComis1($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setComis2($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setComis3($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setComis4($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setAdicional($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setCampo1($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setCampo2($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setCampo3($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setCampo4($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setCampo5($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setCampo6($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setCampo7($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setCampo8($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setCoUsIn($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setFeUsIn($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setCoUsMo($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setFeUsMo($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setCoUsEl($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setFeUsEl($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setRevisado($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setTrasnfe($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setNumcon($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setCoSucu($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setRowguid($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setMonIlc($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setOtros1($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setOtros2($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setOtros3($arr[$keys[61]]);
		if (array_key_exists($keys[62], $arr)) $this->setRengSi($arr[$keys[62]]);
		if (array_key_exists($keys[63], $arr)) $this->setComis5($arr[$keys[63]]);
		if (array_key_exists($keys[64], $arr)) $this->setComis6($arr[$keys[64]]);
		if (array_key_exists($keys[65], $arr)) $this->setRowId($arr[$keys[65]]);
		if (array_key_exists($keys[66], $arr)) $this->setAux01($arr[$keys[66]]);
		if (array_key_exists($keys[67], $arr)) $this->setAux02($arr[$keys[67]]);
		if (array_key_exists($keys[68], $arr)) $this->setSalestax($arr[$keys[68]]);
		if (array_key_exists($keys[69], $arr)) $this->setOrigen($arr[$keys[69]]);
		if (array_key_exists($keys[70], $arr)) $this->setOrigenD($arr[$keys[70]]);
		if (array_key_exists($keys[71], $arr)) $this->setFecReg($arr[$keys[71]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(DocumCcPeer::DATABASE_NAME);

		if ($this->isColumnModified(DocumCcPeer::TIPO_DOC)) $criteria->add(DocumCcPeer::TIPO_DOC, $this->tipo_doc);
		if ($this->isColumnModified(DocumCcPeer::NRO_DOC)) $criteria->add(DocumCcPeer::NRO_DOC, $this->nro_doc);
		if ($this->isColumnModified(DocumCcPeer::ANULADO)) $criteria->add(DocumCcPeer::ANULADO, $this->anulado);
		if ($this->isColumnModified(DocumCcPeer::MOVI)) $criteria->add(DocumCcPeer::MOVI, $this->movi);
		if ($this->isColumnModified(DocumCcPeer::AUT)) $criteria->add(DocumCcPeer::AUT, $this->aut);
		if ($this->isColumnModified(DocumCcPeer::NUM_CONTROL)) $criteria->add(DocumCcPeer::NUM_CONTROL, $this->num_control);
		if ($this->isColumnModified(DocumCcPeer::CO_CLI)) $criteria->add(DocumCcPeer::CO_CLI, $this->co_cli);
		if ($this->isColumnModified(DocumCcPeer::CONTRIB)) $criteria->add(DocumCcPeer::CONTRIB, $this->contrib);
		if ($this->isColumnModified(DocumCcPeer::FEC_EMIS)) $criteria->add(DocumCcPeer::FEC_EMIS, $this->fec_emis);
		if ($this->isColumnModified(DocumCcPeer::FEC_VENC)) $criteria->add(DocumCcPeer::FEC_VENC, $this->fec_venc);
		if ($this->isColumnModified(DocumCcPeer::OBSERVA)) $criteria->add(DocumCcPeer::OBSERVA, $this->observa);
		if ($this->isColumnModified(DocumCcPeer::DOC_ORIG)) $criteria->add(DocumCcPeer::DOC_ORIG, $this->doc_orig);
		if ($this->isColumnModified(DocumCcPeer::NRO_ORIG)) $criteria->add(DocumCcPeer::NRO_ORIG, $this->nro_orig);
		if ($this->isColumnModified(DocumCcPeer::CO_BAN)) $criteria->add(DocumCcPeer::CO_BAN, $this->co_ban);
		if ($this->isColumnModified(DocumCcPeer::NRO_CHE)) $criteria->add(DocumCcPeer::NRO_CHE, $this->nro_che);
		if ($this->isColumnModified(DocumCcPeer::CO_VEN)) $criteria->add(DocumCcPeer::CO_VEN, $this->co_ven);
		if ($this->isColumnModified(DocumCcPeer::TIPO)) $criteria->add(DocumCcPeer::TIPO, $this->tipo);
		if ($this->isColumnModified(DocumCcPeer::TASA)) $criteria->add(DocumCcPeer::TASA, $this->tasa);
		if ($this->isColumnModified(DocumCcPeer::MONEDA)) $criteria->add(DocumCcPeer::MONEDA, $this->moneda);
		if ($this->isColumnModified(DocumCcPeer::MONTO_IMP)) $criteria->add(DocumCcPeer::MONTO_IMP, $this->monto_imp);
		if ($this->isColumnModified(DocumCcPeer::MONTO_GEN)) $criteria->add(DocumCcPeer::MONTO_GEN, $this->monto_gen);
		if ($this->isColumnModified(DocumCcPeer::MONTO_A1)) $criteria->add(DocumCcPeer::MONTO_A1, $this->monto_a1);
		if ($this->isColumnModified(DocumCcPeer::MONTO_A2)) $criteria->add(DocumCcPeer::MONTO_A2, $this->monto_a2);
		if ($this->isColumnModified(DocumCcPeer::MONTO_BRU)) $criteria->add(DocumCcPeer::MONTO_BRU, $this->monto_bru);
		if ($this->isColumnModified(DocumCcPeer::DESCUENTOS)) $criteria->add(DocumCcPeer::DESCUENTOS, $this->descuentos);
		if ($this->isColumnModified(DocumCcPeer::MONTO_DES)) $criteria->add(DocumCcPeer::MONTO_DES, $this->monto_des);
		if ($this->isColumnModified(DocumCcPeer::RECARGO)) $criteria->add(DocumCcPeer::RECARGO, $this->recargo);
		if ($this->isColumnModified(DocumCcPeer::MONTO_REC)) $criteria->add(DocumCcPeer::MONTO_REC, $this->monto_rec);
		if ($this->isColumnModified(DocumCcPeer::MONTO_OTR)) $criteria->add(DocumCcPeer::MONTO_OTR, $this->monto_otr);
		if ($this->isColumnModified(DocumCcPeer::MONTO_NET)) $criteria->add(DocumCcPeer::MONTO_NET, $this->monto_net);
		if ($this->isColumnModified(DocumCcPeer::SALDO)) $criteria->add(DocumCcPeer::SALDO, $this->saldo);
		if ($this->isColumnModified(DocumCcPeer::FECCOM)) $criteria->add(DocumCcPeer::FECCOM, $this->feccom);
		if ($this->isColumnModified(DocumCcPeer::NUMCOM)) $criteria->add(DocumCcPeer::NUMCOM, $this->numcom);
		if ($this->isColumnModified(DocumCcPeer::DIS_CEN)) $criteria->add(DocumCcPeer::DIS_CEN, $this->dis_cen);
		if ($this->isColumnModified(DocumCcPeer::COMIS1)) $criteria->add(DocumCcPeer::COMIS1, $this->comis1);
		if ($this->isColumnModified(DocumCcPeer::COMIS2)) $criteria->add(DocumCcPeer::COMIS2, $this->comis2);
		if ($this->isColumnModified(DocumCcPeer::COMIS3)) $criteria->add(DocumCcPeer::COMIS3, $this->comis3);
		if ($this->isColumnModified(DocumCcPeer::COMIS4)) $criteria->add(DocumCcPeer::COMIS4, $this->comis4);
		if ($this->isColumnModified(DocumCcPeer::ADICIONAL)) $criteria->add(DocumCcPeer::ADICIONAL, $this->adicional);
		if ($this->isColumnModified(DocumCcPeer::CAMPO1)) $criteria->add(DocumCcPeer::CAMPO1, $this->campo1);
		if ($this->isColumnModified(DocumCcPeer::CAMPO2)) $criteria->add(DocumCcPeer::CAMPO2, $this->campo2);
		if ($this->isColumnModified(DocumCcPeer::CAMPO3)) $criteria->add(DocumCcPeer::CAMPO3, $this->campo3);
		if ($this->isColumnModified(DocumCcPeer::CAMPO4)) $criteria->add(DocumCcPeer::CAMPO4, $this->campo4);
		if ($this->isColumnModified(DocumCcPeer::CAMPO5)) $criteria->add(DocumCcPeer::CAMPO5, $this->campo5);
		if ($this->isColumnModified(DocumCcPeer::CAMPO6)) $criteria->add(DocumCcPeer::CAMPO6, $this->campo6);
		if ($this->isColumnModified(DocumCcPeer::CAMPO7)) $criteria->add(DocumCcPeer::CAMPO7, $this->campo7);
		if ($this->isColumnModified(DocumCcPeer::CAMPO8)) $criteria->add(DocumCcPeer::CAMPO8, $this->campo8);
		if ($this->isColumnModified(DocumCcPeer::CO_US_IN)) $criteria->add(DocumCcPeer::CO_US_IN, $this->co_us_in);
		if ($this->isColumnModified(DocumCcPeer::FE_US_IN)) $criteria->add(DocumCcPeer::FE_US_IN, $this->fe_us_in);
		if ($this->isColumnModified(DocumCcPeer::CO_US_MO)) $criteria->add(DocumCcPeer::CO_US_MO, $this->co_us_mo);
		if ($this->isColumnModified(DocumCcPeer::FE_US_MO)) $criteria->add(DocumCcPeer::FE_US_MO, $this->fe_us_mo);
		if ($this->isColumnModified(DocumCcPeer::CO_US_EL)) $criteria->add(DocumCcPeer::CO_US_EL, $this->co_us_el);
		if ($this->isColumnModified(DocumCcPeer::FE_US_EL)) $criteria->add(DocumCcPeer::FE_US_EL, $this->fe_us_el);
		if ($this->isColumnModified(DocumCcPeer::REVISADO)) $criteria->add(DocumCcPeer::REVISADO, $this->revisado);
		if ($this->isColumnModified(DocumCcPeer::TRASNFE)) $criteria->add(DocumCcPeer::TRASNFE, $this->trasnfe);
		if ($this->isColumnModified(DocumCcPeer::NUMCON)) $criteria->add(DocumCcPeer::NUMCON, $this->numcon);
		if ($this->isColumnModified(DocumCcPeer::CO_SUCU)) $criteria->add(DocumCcPeer::CO_SUCU, $this->co_sucu);
		if ($this->isColumnModified(DocumCcPeer::ROWGUID)) $criteria->add(DocumCcPeer::ROWGUID, $this->rowguid);
		if ($this->isColumnModified(DocumCcPeer::MON_ILC)) $criteria->add(DocumCcPeer::MON_ILC, $this->mon_ilc);
		if ($this->isColumnModified(DocumCcPeer::OTROS1)) $criteria->add(DocumCcPeer::OTROS1, $this->otros1);
		if ($this->isColumnModified(DocumCcPeer::OTROS2)) $criteria->add(DocumCcPeer::OTROS2, $this->otros2);
		if ($this->isColumnModified(DocumCcPeer::OTROS3)) $criteria->add(DocumCcPeer::OTROS3, $this->otros3);
		if ($this->isColumnModified(DocumCcPeer::RENG_SI)) $criteria->add(DocumCcPeer::RENG_SI, $this->reng_si);
		if ($this->isColumnModified(DocumCcPeer::COMIS5)) $criteria->add(DocumCcPeer::COMIS5, $this->comis5);
		if ($this->isColumnModified(DocumCcPeer::COMIS6)) $criteria->add(DocumCcPeer::COMIS6, $this->comis6);
		if ($this->isColumnModified(DocumCcPeer::ROW_ID)) $criteria->add(DocumCcPeer::ROW_ID, $this->row_id);
		if ($this->isColumnModified(DocumCcPeer::AUX01)) $criteria->add(DocumCcPeer::AUX01, $this->aux01);
		if ($this->isColumnModified(DocumCcPeer::AUX02)) $criteria->add(DocumCcPeer::AUX02, $this->aux02);
		if ($this->isColumnModified(DocumCcPeer::SALESTAX)) $criteria->add(DocumCcPeer::SALESTAX, $this->salestax);
		if ($this->isColumnModified(DocumCcPeer::ORIGEN)) $criteria->add(DocumCcPeer::ORIGEN, $this->origen);
		if ($this->isColumnModified(DocumCcPeer::ORIGEN_D)) $criteria->add(DocumCcPeer::ORIGEN_D, $this->origen_d);
		if ($this->isColumnModified(DocumCcPeer::FEC_REG)) $criteria->add(DocumCcPeer::FEC_REG, $this->fec_reg);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(DocumCcPeer::DATABASE_NAME);

		$criteria->add(DocumCcPeer::TIPO_DOC, $this->tipo_doc);
		$criteria->add(DocumCcPeer::NRO_DOC, $this->nro_doc);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getTipoDoc();

		$pks[1] = $this->getNroDoc();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setTipoDoc($keys[0]);

		$this->setNroDoc($keys[1]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of DocumCc (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTipoDoc($this->tipo_doc);

		$copyObj->setNroDoc($this->nro_doc);

		$copyObj->setAnulado($this->anulado);

		$copyObj->setMovi($this->movi);

		$copyObj->setAut($this->aut);

		$copyObj->setNumControl($this->num_control);

		$copyObj->setCoCli($this->co_cli);

		$copyObj->setContrib($this->contrib);

		$copyObj->setFecEmis($this->fec_emis);

		$copyObj->setFecVenc($this->fec_venc);

		$copyObj->setObserva($this->observa);

		$copyObj->setDocOrig($this->doc_orig);

		$copyObj->setNroOrig($this->nro_orig);

		$copyObj->setCoBan($this->co_ban);

		$copyObj->setNroChe($this->nro_che);

		$copyObj->setCoVen($this->co_ven);

		$copyObj->setTipo($this->tipo);

		$copyObj->setTasa($this->tasa);

		$copyObj->setMoneda($this->moneda);

		$copyObj->setMontoImp($this->monto_imp);

		$copyObj->setMontoGen($this->monto_gen);

		$copyObj->setMontoA1($this->monto_a1);

		$copyObj->setMontoA2($this->monto_a2);

		$copyObj->setMontoBru($this->monto_bru);

		$copyObj->setDescuentos($this->descuentos);

		$copyObj->setMontoDes($this->monto_des);

		$copyObj->setRecargo($this->recargo);

		$copyObj->setMontoRec($this->monto_rec);

		$copyObj->setMontoOtr($this->monto_otr);

		$copyObj->setMontoNet($this->monto_net);

		$copyObj->setSaldo($this->saldo);

		$copyObj->setFeccom($this->feccom);

		$copyObj->setNumcom($this->numcom);

		$copyObj->setDisCen($this->dis_cen);

		$copyObj->setComis1($this->comis1);

		$copyObj->setComis2($this->comis2);

		$copyObj->setComis3($this->comis3);

		$copyObj->setComis4($this->comis4);

		$copyObj->setAdicional($this->adicional);

		$copyObj->setCampo1($this->campo1);

		$copyObj->setCampo2($this->campo2);

		$copyObj->setCampo3($this->campo3);

		$copyObj->setCampo4($this->campo4);

		$copyObj->setCampo5($this->campo5);

		$copyObj->setCampo6($this->campo6);

		$copyObj->setCampo7($this->campo7);

		$copyObj->setCampo8($this->campo8);

		$copyObj->setCoUsIn($this->co_us_in);

		$copyObj->setFeUsIn($this->fe_us_in);

		$copyObj->setCoUsMo($this->co_us_mo);

		$copyObj->setFeUsMo($this->fe_us_mo);

		$copyObj->setCoUsEl($this->co_us_el);

		$copyObj->setFeUsEl($this->fe_us_el);

		$copyObj->setRevisado($this->revisado);

		$copyObj->setTrasnfe($this->trasnfe);

		$copyObj->setNumcon($this->numcon);

		$copyObj->setCoSucu($this->co_sucu);

		$copyObj->setRowguid($this->rowguid);

		$copyObj->setMonIlc($this->mon_ilc);

		$copyObj->setOtros1($this->otros1);

		$copyObj->setOtros2($this->otros2);

		$copyObj->setOtros3($this->otros3);

		$copyObj->setRengSi($this->reng_si);

		$copyObj->setComis5($this->comis5);

		$copyObj->setComis6($this->comis6);

		$copyObj->setRowId($this->row_id);

		$copyObj->setAux01($this->aux01);

		$copyObj->setAux02($this->aux02);

		$copyObj->setSalestax($this->salestax);

		$copyObj->setOrigen($this->origen);

		$copyObj->setOrigenD($this->origen_d);

		$copyObj->setFecReg($this->fec_reg);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getRengCobs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRengCob($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     DocumCc Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     DocumCcPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new DocumCcPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Clientes object.
	 *
	 * @param      Clientes $v
	 * @return     DocumCc The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setClientes(Clientes $v = null)
	{
		if ($v === null) {
			$this->setCoCli(' ');
		} else {
			$this->setCoCli($v->getCoCli());
		}

		$this->aClientes = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Clientes object, it will not be re-added.
		if ($v !== null) {
			$v->addDocumCc($this);
		}

		return $this;
	}


	/**
	 * Get the associated Clientes object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Clientes The associated Clientes object.
	 * @throws     PropelException
	 */
	public function getClientes(PropelPDO $con = null)
	{
		if ($this->aClientes === null && (($this->co_cli !== "" && $this->co_cli !== null))) {
			$c = new Criteria(ClientesPeer::DATABASE_NAME);
			$c->add(ClientesPeer::CO_CLI, $this->co_cli);
			$this->aClientes = ClientesPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aClientes->addDocumCcs($this);
			 */
		}
		return $this->aClientes;
	}

	/**
	 * Declares an association between this object and a Vendedor object.
	 *
	 * @param      Vendedor $v
	 * @return     DocumCc The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setVendedor(Vendedor $v = null)
	{
		if ($v === null) {
			$this->setCoVen(' ');
		} else {
			$this->setCoVen($v->getCoVen());
		}

		$this->aVendedor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Vendedor object, it will not be re-added.
		if ($v !== null) {
			$v->addDocumCc($this);
		}

		return $this;
	}


	/**
	 * Get the associated Vendedor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Vendedor The associated Vendedor object.
	 * @throws     PropelException
	 */
	public function getVendedor(PropelPDO $con = null)
	{
		if ($this->aVendedor === null && (($this->co_ven !== "" && $this->co_ven !== null))) {
			$c = new Criteria(VendedorPeer::DATABASE_NAME);
			$c->add(VendedorPeer::CO_VEN, $this->co_ven);
			$this->aVendedor = VendedorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aVendedor->addDocumCcs($this);
			 */
		}
		return $this->aVendedor;
	}

	/**
	 * Declares an association between this object and a Tabulado object.
	 *
	 * @param      Tabulado $v
	 * @return     DocumCc The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTabulado(Tabulado $v = null)
	{
		if ($v === null) {
			$this->setTipo('(\'1\')');
		} else {
			$this->setTipo($v->getTipo());
		}

		$this->aTabulado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tabulado object, it will not be re-added.
		if ($v !== null) {
			$v->addDocumCc($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tabulado object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tabulado The associated Tabulado object.
	 * @throws     PropelException
	 */
	public function getTabulado(PropelPDO $con = null)
	{
		if ($this->aTabulado === null && (($this->tipo !== "" && $this->tipo !== null))) {
			$c = new Criteria(TabuladoPeer::DATABASE_NAME);
			$c->add(TabuladoPeer::TIPO, $this->tipo);
			$this->aTabulado = TabuladoPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTabulado->addDocumCcs($this);
			 */
		}
		return $this->aTabulado;
	}

	/**
	 * Declares an association between this object and a Moneda object.
	 *
	 * @param      Moneda $v
	 * @return     DocumCc The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMonedaRelatedByMoneda(Moneda $v = null)
	{
		if ($v === null) {
			$this->setMoneda(' ');
		} else {
			$this->setMoneda($v->getCoMone());
		}

		$this->aMonedaRelatedByMoneda = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Moneda object, it will not be re-added.
		if ($v !== null) {
			$v->addDocumCc($this);
		}

		return $this;
	}


	/**
	 * Get the associated Moneda object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Moneda The associated Moneda object.
	 * @throws     PropelException
	 */
	public function getMonedaRelatedByMoneda(PropelPDO $con = null)
	{
		if ($this->aMonedaRelatedByMoneda === null && (($this->moneda !== "" && $this->moneda !== null))) {
			$c = new Criteria(MonedaPeer::DATABASE_NAME);
			$c->add(MonedaPeer::CO_MONE, $this->moneda);
			$this->aMonedaRelatedByMoneda = MonedaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMonedaRelatedByMoneda->addDocumCcs($this);
			 */
		}
		return $this->aMonedaRelatedByMoneda;
	}

	/**
	 * Declares an association between this object and a Almacen object.
	 *
	 * @param      Almacen $v
	 * @return     DocumCc The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlmacen(Almacen $v = null)
	{
		if ($v === null) {
			$this->setCoSucu(' ');
		} else {
			$this->setCoSucu($v->getCoAlma());
		}

		$this->aAlmacen = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Almacen object, it will not be re-added.
		if ($v !== null) {
			$v->addDocumCc($this);
		}

		return $this;
	}


	/**
	 * Get the associated Almacen object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Almacen The associated Almacen object.
	 * @throws     PropelException
	 */
	public function getAlmacen(PropelPDO $con = null)
	{
		if ($this->aAlmacen === null && (($this->co_sucu !== "" && $this->co_sucu !== null))) {
			$c = new Criteria(AlmacenPeer::DATABASE_NAME);
			$c->add(AlmacenPeer::CO_ALMA, $this->co_sucu);
			$this->aAlmacen = AlmacenPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAlmacen->addDocumCcs($this);
			 */
		}
		return $this->aAlmacen;
	}

	/**
	 * Clears out the collRengCobs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRengCobs()
	 */
	public function clearRengCobs()
	{
		$this->collRengCobs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRengCobs collection (array).
	 *
	 * By default this just sets the collRengCobs collection to an empty array (like clearcollRengCobs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRengCobs()
	{
		$this->collRengCobs = array();
	}

	/**
	 * Gets an array of RengCob objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this DocumCc has previously been saved, it will retrieve
	 * related RengCobs from storage. If this DocumCc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RengCob[]
	 * @throws     PropelException
	 */
	public function getRengCobs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(DocumCcPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRengCobs === null) {
			if ($this->isNew()) {
			   $this->collRengCobs = array();
			} else {

				$criteria->add(RengCobPeer::DOC_NUM, $this->nro_doc);

				RengCobPeer::addSelectColumns($criteria);
				$this->collRengCobs = RengCobPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RengCobPeer::DOC_NUM, $this->nro_doc);

				RengCobPeer::addSelectColumns($criteria);
				if (!isset($this->lastRengCobCriteria) || !$this->lastRengCobCriteria->equals($criteria)) {
					$this->collRengCobs = RengCobPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRengCobCriteria = $criteria;
		return $this->collRengCobs;
	}

	/**
	 * Returns the number of related RengCob objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RengCob objects.
	 * @throws     PropelException
	 */
	public function countRengCobs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(DocumCcPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRengCobs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RengCobPeer::DOC_NUM, $this->nro_doc);

				$count = RengCobPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RengCobPeer::DOC_NUM, $this->nro_doc);

				if (!isset($this->lastRengCobCriteria) || !$this->lastRengCobCriteria->equals($criteria)) {
					$count = RengCobPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRengCobs);
				}
			} else {
				$count = count($this->collRengCobs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RengCob object to this object
	 * through the RengCob foreign key attribute.
	 *
	 * @param      RengCob $l RengCob
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRengCob(RengCob $l)
	{
		if ($this->collRengCobs === null) {
			$this->initRengCobs();
		}
		if (!in_array($l, $this->collRengCobs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRengCobs, $l);
			$l->setDocumCc($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collRengCobs) {
				foreach ((array) $this->collRengCobs as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collRengCobs = null;
			$this->aClientes = null;
			$this->aVendedor = null;
			$this->aTabulado = null;
			$this->aMonedaRelatedByMoneda = null;
			$this->aAlmacen = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseDocumCc:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseDocumCc::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseDocumCc
