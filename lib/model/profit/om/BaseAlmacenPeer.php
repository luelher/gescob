<?php

/**
 * Base static class for performing query and update operations on the 'almacen' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Mon Dec  7 22:53:42 2009
 *
 * @package    lib.model.profit.om
 */
abstract class BaseAlmacenPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'profit';

	/** the table name for this class */
	const TABLE_NAME = 'almacen';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.profit.Almacen';

	/** The total number of columns. */
	const NUM_COLUMNS = 168;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the CO_ALMA field */
	const CO_ALMA = 'almacen.CO_ALMA';

	/** the column name for the ALMA_DES field */
	const ALMA_DES = 'almacen.ALMA_DES';

	/** the column name for the NRO_FACT field */
	const NRO_FACT = 'almacen.NRO_FACT';

	/** the column name for the NUM_FAC_INI field */
	const NUM_FAC_INI = 'almacen.NUM_FAC_INI';

	/** the column name for the NUM_FAC_FIN field */
	const NUM_FAC_FIN = 'almacen.NUM_FAC_FIN';

	/** the column name for the CAMPO1 field */
	const CAMPO1 = 'almacen.CAMPO1';

	/** the column name for the CAMPO2 field */
	const CAMPO2 = 'almacen.CAMPO2';

	/** the column name for the CAMPO3 field */
	const CAMPO3 = 'almacen.CAMPO3';

	/** the column name for the CAMPO4 field */
	const CAMPO4 = 'almacen.CAMPO4';

	/** the column name for the CO_US_IN field */
	const CO_US_IN = 'almacen.CO_US_IN';

	/** the column name for the FE_US_IN field */
	const FE_US_IN = 'almacen.FE_US_IN';

	/** the column name for the CO_US_MO field */
	const CO_US_MO = 'almacen.CO_US_MO';

	/** the column name for the FE_US_MO field */
	const FE_US_MO = 'almacen.FE_US_MO';

	/** the column name for the CO_US_EL field */
	const CO_US_EL = 'almacen.CO_US_EL';

	/** the column name for the FE_US_EL field */
	const FE_US_EL = 'almacen.FE_US_EL';

	/** the column name for the REVISADO field */
	const REVISADO = 'almacen.REVISADO';

	/** the column name for the TRASNFE field */
	const TRASNFE = 'almacen.TRASNFE';

	/** the column name for the CO_SUCU field */
	const CO_SUCU = 'almacen.CO_SUCU';

	/** the column name for the ROWGUID field */
	const ROWGUID = 'almacen.ROWGUID';

	/** the column name for the NC_NUM field */
	const NC_NUM = 'almacen.NC_NUM';

	/** the column name for the ND_NUM field */
	const ND_NUM = 'almacen.ND_NUM';

	/** the column name for the AJUS_NUM field */
	const AJUS_NUM = 'almacen.AJUS_NUM';

	/** the column name for the TRAS_NUM field */
	const TRAS_NUM = 'almacen.TRAS_NUM';

	/** the column name for the FISI_NUM field */
	const FISI_NUM = 'almacen.FISI_NUM';

	/** the column name for the NUM_KIT field */
	const NUM_KIT = 'almacen.NUM_KIT';

	/** the column name for the GENK_NUM field */
	const GENK_NUM = 'almacen.GENK_NUM';

	/** the column name for the FACT_NUM field */
	const FACT_NUM = 'almacen.FACT_NUM';

	/** the column name for the PED_NUM field */
	const PED_NUM = 'almacen.PED_NUM';

	/** the column name for the COTC_NUM field */
	const COTC_NUM = 'almacen.COTC_NUM';

	/** the column name for the DEVC_NUM field */
	const DEVC_NUM = 'almacen.DEVC_NUM';

	/** the column name for the NDE_NUM field */
	const NDE_NUM = 'almacen.NDE_NUM';

	/** the column name for the NDD_NUM field */
	const NDD_NUM = 'almacen.NDD_NUM';

	/** the column name for the POST_NUM field */
	const POST_NUM = 'almacen.POST_NUM';

	/** the column name for the CFXG_NUM field */
	const CFXG_NUM = 'almacen.CFXG_NUM';

	/** the column name for the CHDV_NUM field */
	const CHDV_NUM = 'almacen.CHDV_NUM';

	/** the column name for the GIRO_NUM field */
	const GIRO_NUM = 'almacen.GIRO_NUM';

	/** the column name for the RETEN_NUM field */
	const RETEN_NUM = 'almacen.RETEN_NUM';

	/** the column name for the CB_NUM field */
	const CB_NUM = 'almacen.CB_NUM';

	/** the column name for the MOVB_NUM field */
	const MOVB_NUM = 'almacen.MOVB_NUM';

	/** the column name for the MOVC_NUM field */
	const MOVC_NUM = 'almacen.MOVC_NUM';

	/** the column name for the ORDP_NUM field */
	const ORDP_NUM = 'almacen.ORDP_NUM';

	/** the column name for the DEPC_NUM field */
	const DEPC_NUM = 'almacen.DEPC_NUM';

	/** the column name for the COMP_NUM field */
	const COMP_NUM = 'almacen.COMP_NUM';

	/** the column name for the ORD_NUM field */
	const ORD_NUM = 'almacen.ORD_NUM';

	/** the column name for the COTP_NUM field */
	const COTP_NUM = 'almacen.COTP_NUM';

	/** the column name for the DEVP_NUM field */
	const DEVP_NUM = 'almacen.DEVP_NUM';

	/** the column name for the NDR_NUM field */
	const NDR_NUM = 'almacen.NDR_NUM';

	/** the column name for the POSTCPPNUM field */
	const POSTCPPNUM = 'almacen.POSTCPPNUM';

	/** the column name for the CCXG_NUM field */
	const CCXG_NUM = 'almacen.CCXG_NUM';

	/** the column name for the CHDVCPPNUM field */
	const CHDVCPPNUM = 'almacen.CHDVCPPNUM';

	/** the column name for the GIROCPPNUM field */
	const GIROCPPNUM = 'almacen.GIROCPPNUM';

	/** the column name for the NCCPP_NUM field */
	const NCCPP_NUM = 'almacen.NCCPP_NUM';

	/** the column name for the NDCPP_NUM field */
	const NDCPP_NUM = 'almacen.NDCPP_NUM';

	/** the column name for the RETENCPPNUM field */
	const RETENCPPNUM = 'almacen.RETENCPPNUM';

	/** the column name for the PG_NUM field */
	const PG_NUM = 'almacen.PG_NUM';

	/** the column name for the AJU_POSM field */
	const AJU_POSM = 'almacen.AJU_POSM';

	/** the column name for the AJU_POSA field */
	const AJU_POSA = 'almacen.AJU_POSA';

	/** the column name for the AJU_NEGM field */
	const AJU_NEGM = 'almacen.AJU_NEGM';

	/** the column name for the AJU_NEGA field */
	const AJU_NEGA = 'almacen.AJU_NEGA';

	/** the column name for the AJU_POSMC field */
	const AJU_POSMC = 'almacen.AJU_POSMC';

	/** the column name for the AJU_POSAC field */
	const AJU_POSAC = 'almacen.AJU_POSAC';

	/** the column name for the AJU_NEGMC field */
	const AJU_NEGMC = 'almacen.AJU_NEGMC';

	/** the column name for the AJU_NEGAC field */
	const AJU_NEGAC = 'almacen.AJU_NEGAC';

	/** the column name for the PVENTA field */
	const PVENTA = 'almacen.PVENTA';

	/** the column name for the TURNOSIC field */
	const TURNOSIC = 'almacen.TURNOSIC';

	/** the column name for the PLV_NUM field */
	const PLV_NUM = 'almacen.PLV_NUM';

	/** the column name for the PLC_NUM field */
	const PLC_NUM = 'almacen.PLC_NUM';

	/** the column name for the TABISLR field */
	const TABISLR = 'almacen.TABISLR';

	/** the column name for the IMP_NUM field */
	const IMP_NUM = 'almacen.IMP_NUM';

	/** the column name for the RMA_CLI field */
	const RMA_CLI = 'almacen.RMA_CLI';

	/** the column name for the RMA_PROV field */
	const RMA_PROV = 'almacen.RMA_PROV';

	/** the column name for the RMA_ENTC field */
	const RMA_ENTC = 'almacen.RMA_ENTC';

	/** the column name for the RMA_ENTP field */
	const RMA_ENTP = 'almacen.RMA_ENTP';

	/** the column name for the RMA_REGS field */
	const RMA_REGS = 'almacen.RMA_REGS';

	/** the column name for the FACT_S1 field */
	const FACT_S1 = 'almacen.FACT_S1';

	/** the column name for the FACT_S2 field */
	const FACT_S2 = 'almacen.FACT_S2';

	/** the column name for the FACT_S3 field */
	const FACT_S3 = 'almacen.FACT_S3';

	/** the column name for the FACT_S4 field */
	const FACT_S4 = 'almacen.FACT_S4';

	/** the column name for the FACT_S5 field */
	const FACT_S5 = 'almacen.FACT_S5';

	/** the column name for the NDE_S1 field */
	const NDE_S1 = 'almacen.NDE_S1';

	/** the column name for the NDE_S2 field */
	const NDE_S2 = 'almacen.NDE_S2';

	/** the column name for the NDE_S3 field */
	const NDE_S3 = 'almacen.NDE_S3';

	/** the column name for the NDE_S4 field */
	const NDE_S4 = 'almacen.NDE_S4';

	/** the column name for the NDE_S5 field */
	const NDE_S5 = 'almacen.NDE_S5';

	/** the column name for the NC_S1 field */
	const NC_S1 = 'almacen.NC_S1';

	/** the column name for the NC_S2 field */
	const NC_S2 = 'almacen.NC_S2';

	/** the column name for the NC_S3 field */
	const NC_S3 = 'almacen.NC_S3';

	/** the column name for the NC_S4 field */
	const NC_S4 = 'almacen.NC_S4';

	/** the column name for the NC_S5 field */
	const NC_S5 = 'almacen.NC_S5';

	/** the column name for the ND_S1 field */
	const ND_S1 = 'almacen.ND_S1';

	/** the column name for the ND_S2 field */
	const ND_S2 = 'almacen.ND_S2';

	/** the column name for the ND_S3 field */
	const ND_S3 = 'almacen.ND_S3';

	/** the column name for the ND_S4 field */
	const ND_S4 = 'almacen.ND_S4';

	/** the column name for the ND_S5 field */
	const ND_S5 = 'almacen.ND_S5';

	/** the column name for the FACT_F1 field */
	const FACT_F1 = 'almacen.FACT_F1';

	/** the column name for the FACT_F2 field */
	const FACT_F2 = 'almacen.FACT_F2';

	/** the column name for the FACT_F3 field */
	const FACT_F3 = 'almacen.FACT_F3';

	/** the column name for the FACT_F4 field */
	const FACT_F4 = 'almacen.FACT_F4';

	/** the column name for the NDE_F1 field */
	const NDE_F1 = 'almacen.NDE_F1';

	/** the column name for the NDE_F2 field */
	const NDE_F2 = 'almacen.NDE_F2';

	/** the column name for the NDE_F3 field */
	const NDE_F3 = 'almacen.NDE_F3';

	/** the column name for the NDE_F4 field */
	const NDE_F4 = 'almacen.NDE_F4';

	/** the column name for the NC_F1 field */
	const NC_F1 = 'almacen.NC_F1';

	/** the column name for the NC_F2 field */
	const NC_F2 = 'almacen.NC_F2';

	/** the column name for the NC_F3 field */
	const NC_F3 = 'almacen.NC_F3';

	/** the column name for the NC_F4 field */
	const NC_F4 = 'almacen.NC_F4';

	/** the column name for the ND_F1 field */
	const ND_F1 = 'almacen.ND_F1';

	/** the column name for the ND_F2 field */
	const ND_F2 = 'almacen.ND_F2';

	/** the column name for the ND_F3 field */
	const ND_F3 = 'almacen.ND_F3';

	/** the column name for the ND_F4 field */
	const ND_F4 = 'almacen.ND_F4';

	/** the column name for the FACT_P1 field */
	const FACT_P1 = 'almacen.FACT_P1';

	/** the column name for the FACT_P2 field */
	const FACT_P2 = 'almacen.FACT_P2';

	/** the column name for the FACT_P3 field */
	const FACT_P3 = 'almacen.FACT_P3';

	/** the column name for the FACT_P4 field */
	const FACT_P4 = 'almacen.FACT_P4';

	/** the column name for the FACT_P5 field */
	const FACT_P5 = 'almacen.FACT_P5';

	/** the column name for the NDE_P1 field */
	const NDE_P1 = 'almacen.NDE_P1';

	/** the column name for the NDE_P2 field */
	const NDE_P2 = 'almacen.NDE_P2';

	/** the column name for the NDE_P3 field */
	const NDE_P3 = 'almacen.NDE_P3';

	/** the column name for the NDE_P4 field */
	const NDE_P4 = 'almacen.NDE_P4';

	/** the column name for the NDE_P5 field */
	const NDE_P5 = 'almacen.NDE_P5';

	/** the column name for the NC_P1 field */
	const NC_P1 = 'almacen.NC_P1';

	/** the column name for the NC_P2 field */
	const NC_P2 = 'almacen.NC_P2';

	/** the column name for the NC_P3 field */
	const NC_P3 = 'almacen.NC_P3';

	/** the column name for the NC_P4 field */
	const NC_P4 = 'almacen.NC_P4';

	/** the column name for the NC_P5 field */
	const NC_P5 = 'almacen.NC_P5';

	/** the column name for the ND_P1 field */
	const ND_P1 = 'almacen.ND_P1';

	/** the column name for the ND_P2 field */
	const ND_P2 = 'almacen.ND_P2';

	/** the column name for the ND_P3 field */
	const ND_P3 = 'almacen.ND_P3';

	/** the column name for the ND_P4 field */
	const ND_P4 = 'almacen.ND_P4';

	/** the column name for the ND_P5 field */
	const ND_P5 = 'almacen.ND_P5';

	/** the column name for the FACT_NUM2 field */
	const FACT_NUM2 = 'almacen.FACT_NUM2';

	/** the column name for the FACT_NUM3 field */
	const FACT_NUM3 = 'almacen.FACT_NUM3';

	/** the column name for the FACT_NUM4 field */
	const FACT_NUM4 = 'almacen.FACT_NUM4';

	/** the column name for the FACT_NUM5 field */
	const FACT_NUM5 = 'almacen.FACT_NUM5';

	/** the column name for the NDE_NUM2 field */
	const NDE_NUM2 = 'almacen.NDE_NUM2';

	/** the column name for the NDE_NUM3 field */
	const NDE_NUM3 = 'almacen.NDE_NUM3';

	/** the column name for the NDE_NUM4 field */
	const NDE_NUM4 = 'almacen.NDE_NUM4';

	/** the column name for the NDE_NUM5 field */
	const NDE_NUM5 = 'almacen.NDE_NUM5';

	/** the column name for the NC_NUM2 field */
	const NC_NUM2 = 'almacen.NC_NUM2';

	/** the column name for the NC_NUM3 field */
	const NC_NUM3 = 'almacen.NC_NUM3';

	/** the column name for the NC_NUM4 field */
	const NC_NUM4 = 'almacen.NC_NUM4';

	/** the column name for the NC_NUM5 field */
	const NC_NUM5 = 'almacen.NC_NUM5';

	/** the column name for the ND_NUM2 field */
	const ND_NUM2 = 'almacen.ND_NUM2';

	/** the column name for the ND_NUM3 field */
	const ND_NUM3 = 'almacen.ND_NUM3';

	/** the column name for the ND_NUM4 field */
	const ND_NUM4 = 'almacen.ND_NUM4';

	/** the column name for the ND_NUM5 field */
	const ND_NUM5 = 'almacen.ND_NUM5';

	/** the column name for the SERIE2 field */
	const SERIE2 = 'almacen.SERIE2';

	/** the column name for the SERIE3 field */
	const SERIE3 = 'almacen.SERIE3';

	/** the column name for the SERIE4 field */
	const SERIE4 = 'almacen.SERIE4';

	/** the column name for the SERIE5 field */
	const SERIE5 = 'almacen.SERIE5';

	/** the column name for the EMP_NUM field */
	const EMP_NUM = 'almacen.EMP_NUM';

	/** the column name for the DMC_NUM field */
	const DMC_NUM = 'almacen.DMC_NUM';

	/** the column name for the TAX_NUM field */
	const TAX_NUM = 'almacen.TAX_NUM';

	/** the column name for the CED_NUM field */
	const CED_NUM = 'almacen.CED_NUM';

	/** the column name for the ENT_NUM field */
	const ENT_NUM = 'almacen.ENT_NUM';

	/** the column name for the CIE_NUM field */
	const CIE_NUM = 'almacen.CIE_NUM';

	/** the column name for the ODP_NUM field */
	const ODP_NUM = 'almacen.ODP_NUM';

	/** the column name for the REQ_NUM field */
	const REQ_NUM = 'almacen.REQ_NUM';

	/** the column name for the DEV_NUM field */
	const DEV_NUM = 'almacen.DEV_NUM';

	/** the column name for the EXP_NUM field */
	const EXP_NUM = 'almacen.EXP_NUM';

	/** the column name for the INP_NUM field */
	const INP_NUM = 'almacen.INP_NUM';

	/** the column name for the COST_NUM field */
	const COST_NUM = 'almacen.COST_NUM';

	/** the column name for the PAR_NUM field */
	const PAR_NUM = 'almacen.PAR_NUM';

	/** the column name for the ESC_NUM field */
	const ESC_NUM = 'almacen.ESC_NUM';

	/** the column name for the PLA_NUM field */
	const PLA_NUM = 'almacen.PLA_NUM';

	/** the column name for the MEN_NUM field */
	const MEN_NUM = 'almacen.MEN_NUM';

	/** the column name for the DIST_NUM field */
	const DIST_NUM = 'almacen.DIST_NUM';

	/** the column name for the EXP_NUMI field */
	const EXP_NUMI = 'almacen.EXP_NUMI';

	/**
	 * An identiy map to hold any loaded instances of Almacen objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Almacen[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('CoAlma', 'AlmaDes', 'NroFact', 'NumFacIni', 'NumFacFin', 'Campo1', 'Campo2', 'Campo3', 'Campo4', 'CoUsIn', 'FeUsIn', 'CoUsMo', 'FeUsMo', 'CoUsEl', 'FeUsEl', 'Revisado', 'Trasnfe', 'CoSucu', 'Rowguid', 'NcNum', 'NdNum', 'AjusNum', 'TrasNum', 'FisiNum', 'NumKit', 'GenkNum', 'FactNum', 'PedNum', 'CotcNum', 'DevcNum', 'NdeNum', 'NddNum', 'PostNum', 'CfxgNum', 'ChdvNum', 'GiroNum', 'RetenNum', 'CbNum', 'MovbNum', 'MovcNum', 'OrdpNum', 'DepcNum', 'CompNum', 'OrdNum', 'CotpNum', 'DevpNum', 'NdrNum', 'Postcppnum', 'CcxgNum', 'Chdvcppnum', 'Girocppnum', 'NccppNum', 'NdcppNum', 'Retencppnum', 'PgNum', 'AjuPosm', 'AjuPosa', 'AjuNegm', 'AjuNega', 'AjuPosmc', 'AjuPosac', 'AjuNegmc', 'AjuNegac', 'Pventa', 'Turnosic', 'PlvNum', 'PlcNum', 'Tabislr', 'ImpNum', 'RmaCli', 'RmaProv', 'RmaEntc', 'RmaEntp', 'RmaRegs', 'FactS1', 'FactS2', 'FactS3', 'FactS4', 'FactS5', 'NdeS1', 'NdeS2', 'NdeS3', 'NdeS4', 'NdeS5', 'NcS1', 'NcS2', 'NcS3', 'NcS4', 'NcS5', 'NdS1', 'NdS2', 'NdS3', 'NdS4', 'NdS5', 'FactF1', 'FactF2', 'FactF3', 'FactF4', 'NdeF1', 'NdeF2', 'NdeF3', 'NdeF4', 'NcF1', 'NcF2', 'NcF3', 'NcF4', 'NdF1', 'NdF2', 'NdF3', 'NdF4', 'FactP1', 'FactP2', 'FactP3', 'FactP4', 'FactP5', 'NdeP1', 'NdeP2', 'NdeP3', 'NdeP4', 'NdeP5', 'NcP1', 'NcP2', 'NcP3', 'NcP4', 'NcP5', 'NdP1', 'NdP2', 'NdP3', 'NdP4', 'NdP5', 'FactNum2', 'FactNum3', 'FactNum4', 'FactNum5', 'NdeNum2', 'NdeNum3', 'NdeNum4', 'NdeNum5', 'NcNum2', 'NcNum3', 'NcNum4', 'NcNum5', 'NdNum2', 'NdNum3', 'NdNum4', 'NdNum5', 'Serie2', 'Serie3', 'Serie4', 'Serie5', 'EmpNum', 'DmcNum', 'TaxNum', 'CedNum', 'EntNum', 'CieNum', 'OdpNum', 'ReqNum', 'DevNum', 'ExpNum', 'InpNum', 'CostNum', 'ParNum', 'EscNum', 'PlaNum', 'MenNum', 'DistNum', 'ExpNumi', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coAlma', 'almaDes', 'nroFact', 'numFacIni', 'numFacFin', 'campo1', 'campo2', 'campo3', 'campo4', 'coUsIn', 'feUsIn', 'coUsMo', 'feUsMo', 'coUsEl', 'feUsEl', 'revisado', 'trasnfe', 'coSucu', 'rowguid', 'ncNum', 'ndNum', 'ajusNum', 'trasNum', 'fisiNum', 'numKit', 'genkNum', 'factNum', 'pedNum', 'cotcNum', 'devcNum', 'ndeNum', 'nddNum', 'postNum', 'cfxgNum', 'chdvNum', 'giroNum', 'retenNum', 'cbNum', 'movbNum', 'movcNum', 'ordpNum', 'depcNum', 'compNum', 'ordNum', 'cotpNum', 'devpNum', 'ndrNum', 'postcppnum', 'ccxgNum', 'chdvcppnum', 'girocppnum', 'nccppNum', 'ndcppNum', 'retencppnum', 'pgNum', 'ajuPosm', 'ajuPosa', 'ajuNegm', 'ajuNega', 'ajuPosmc', 'ajuPosac', 'ajuNegmc', 'ajuNegac', 'pventa', 'turnosic', 'plvNum', 'plcNum', 'tabislr', 'impNum', 'rmaCli', 'rmaProv', 'rmaEntc', 'rmaEntp', 'rmaRegs', 'factS1', 'factS2', 'factS3', 'factS4', 'factS5', 'ndeS1', 'ndeS2', 'ndeS3', 'ndeS4', 'ndeS5', 'ncS1', 'ncS2', 'ncS3', 'ncS4', 'ncS5', 'ndS1', 'ndS2', 'ndS3', 'ndS4', 'ndS5', 'factF1', 'factF2', 'factF3', 'factF4', 'ndeF1', 'ndeF2', 'ndeF3', 'ndeF4', 'ncF1', 'ncF2', 'ncF3', 'ncF4', 'ndF1', 'ndF2', 'ndF3', 'ndF4', 'factP1', 'factP2', 'factP3', 'factP4', 'factP5', 'ndeP1', 'ndeP2', 'ndeP3', 'ndeP4', 'ndeP5', 'ncP1', 'ncP2', 'ncP3', 'ncP4', 'ncP5', 'ndP1', 'ndP2', 'ndP3', 'ndP4', 'ndP5', 'factNum2', 'factNum3', 'factNum4', 'factNum5', 'ndeNum2', 'ndeNum3', 'ndeNum4', 'ndeNum5', 'ncNum2', 'ncNum3', 'ncNum4', 'ncNum5', 'ndNum2', 'ndNum3', 'ndNum4', 'ndNum5', 'serie2', 'serie3', 'serie4', 'serie5', 'empNum', 'dmcNum', 'taxNum', 'cedNum', 'entNum', 'cieNum', 'odpNum', 'reqNum', 'devNum', 'expNum', 'inpNum', 'costNum', 'parNum', 'escNum', 'plaNum', 'menNum', 'distNum', 'expNumi', ),
		BasePeer::TYPE_COLNAME => array (self::CO_ALMA, self::ALMA_DES, self::NRO_FACT, self::NUM_FAC_INI, self::NUM_FAC_FIN, self::CAMPO1, self::CAMPO2, self::CAMPO3, self::CAMPO4, self::CO_US_IN, self::FE_US_IN, self::CO_US_MO, self::FE_US_MO, self::CO_US_EL, self::FE_US_EL, self::REVISADO, self::TRASNFE, self::CO_SUCU, self::ROWGUID, self::NC_NUM, self::ND_NUM, self::AJUS_NUM, self::TRAS_NUM, self::FISI_NUM, self::NUM_KIT, self::GENK_NUM, self::FACT_NUM, self::PED_NUM, self::COTC_NUM, self::DEVC_NUM, self::NDE_NUM, self::NDD_NUM, self::POST_NUM, self::CFXG_NUM, self::CHDV_NUM, self::GIRO_NUM, self::RETEN_NUM, self::CB_NUM, self::MOVB_NUM, self::MOVC_NUM, self::ORDP_NUM, self::DEPC_NUM, self::COMP_NUM, self::ORD_NUM, self::COTP_NUM, self::DEVP_NUM, self::NDR_NUM, self::POSTCPPNUM, self::CCXG_NUM, self::CHDVCPPNUM, self::GIROCPPNUM, self::NCCPP_NUM, self::NDCPP_NUM, self::RETENCPPNUM, self::PG_NUM, self::AJU_POSM, self::AJU_POSA, self::AJU_NEGM, self::AJU_NEGA, self::AJU_POSMC, self::AJU_POSAC, self::AJU_NEGMC, self::AJU_NEGAC, self::PVENTA, self::TURNOSIC, self::PLV_NUM, self::PLC_NUM, self::TABISLR, self::IMP_NUM, self::RMA_CLI, self::RMA_PROV, self::RMA_ENTC, self::RMA_ENTP, self::RMA_REGS, self::FACT_S1, self::FACT_S2, self::FACT_S3, self::FACT_S4, self::FACT_S5, self::NDE_S1, self::NDE_S2, self::NDE_S3, self::NDE_S4, self::NDE_S5, self::NC_S1, self::NC_S2, self::NC_S3, self::NC_S4, self::NC_S5, self::ND_S1, self::ND_S2, self::ND_S3, self::ND_S4, self::ND_S5, self::FACT_F1, self::FACT_F2, self::FACT_F3, self::FACT_F4, self::NDE_F1, self::NDE_F2, self::NDE_F3, self::NDE_F4, self::NC_F1, self::NC_F2, self::NC_F3, self::NC_F4, self::ND_F1, self::ND_F2, self::ND_F3, self::ND_F4, self::FACT_P1, self::FACT_P2, self::FACT_P3, self::FACT_P4, self::FACT_P5, self::NDE_P1, self::NDE_P2, self::NDE_P3, self::NDE_P4, self::NDE_P5, self::NC_P1, self::NC_P2, self::NC_P3, self::NC_P4, self::NC_P5, self::ND_P1, self::ND_P2, self::ND_P3, self::ND_P4, self::ND_P5, self::FACT_NUM2, self::FACT_NUM3, self::FACT_NUM4, self::FACT_NUM5, self::NDE_NUM2, self::NDE_NUM3, self::NDE_NUM4, self::NDE_NUM5, self::NC_NUM2, self::NC_NUM3, self::NC_NUM4, self::NC_NUM5, self::ND_NUM2, self::ND_NUM3, self::ND_NUM4, self::ND_NUM5, self::SERIE2, self::SERIE3, self::SERIE4, self::SERIE5, self::EMP_NUM, self::DMC_NUM, self::TAX_NUM, self::CED_NUM, self::ENT_NUM, self::CIE_NUM, self::ODP_NUM, self::REQ_NUM, self::DEV_NUM, self::EXP_NUM, self::INP_NUM, self::COST_NUM, self::PAR_NUM, self::ESC_NUM, self::PLA_NUM, self::MEN_NUM, self::DIST_NUM, self::EXP_NUMI, ),
		BasePeer::TYPE_FIELDNAME => array ('co_alma', 'alma_des', 'nro_fact', 'num_fac_ini', 'num_fac_fin', 'campo1', 'campo2', 'campo3', 'campo4', 'co_us_in', 'fe_us_in', 'co_us_mo', 'fe_us_mo', 'co_us_el', 'fe_us_el', 'revisado', 'trasnfe', 'co_sucu', 'rowguid', 'nc_num', 'nd_num', 'ajus_num', 'tras_num', 'fisi_num', 'num_kit', 'genk_num', 'fact_num', 'ped_num', 'cotc_num', 'devc_num', 'nde_num', 'ndd_num', 'post_num', 'cfxg_num', 'chdv_num', 'giro_num', 'reten_num', 'cb_num', 'movb_num', 'movc_num', 'ordp_num', 'depc_num', 'comp_num', 'ord_num', 'cotp_num', 'devp_num', 'ndr_num', 'postcppnum', 'ccxg_num', 'chdvcppnum', 'girocppnum', 'nccpp_num', 'ndcpp_num', 'retencppnum', 'pg_num', 'aju_posm', 'aju_posa', 'aju_negm', 'aju_nega', 'aju_posmc', 'aju_posac', 'aju_negmc', 'aju_negac', 'pventa', 'turnosic', 'plv_num', 'plc_num', 'tabislr', 'imp_num', 'rma_cli', 'rma_prov', 'rma_entc', 'rma_entp', 'rma_regs', 'fact_s1', 'fact_s2', 'fact_s3', 'fact_s4', 'fact_s5', 'nde_s1', 'nde_s2', 'nde_s3', 'nde_s4', 'nde_s5', 'nc_s1', 'nc_s2', 'nc_s3', 'nc_s4', 'nc_s5', 'nd_s1', 'nd_s2', 'nd_s3', 'nd_s4', 'nd_s5', 'fact_f1', 'fact_f2', 'fact_f3', 'fact_f4', 'nde_f1', 'nde_f2', 'nde_f3', 'nde_f4', 'nc_f1', 'nc_f2', 'nc_f3', 'nc_f4', 'nd_f1', 'nd_f2', 'nd_f3', 'nd_f4', 'fact_p1', 'fact_p2', 'fact_p3', 'fact_p4', 'fact_p5', 'nde_p1', 'nde_p2', 'nde_p3', 'nde_p4', 'nde_p5', 'nc_p1', 'nc_p2', 'nc_p3', 'nc_p4', 'nc_p5', 'nd_p1', 'nd_p2', 'nd_p3', 'nd_p4', 'nd_p5', 'fact_num2', 'fact_num3', 'fact_num4', 'fact_num5', 'nde_num2', 'nde_num3', 'nde_num4', 'nde_num5', 'nc_num2', 'nc_num3', 'nc_num4', 'nc_num5', 'nd_num2', 'nd_num3', 'nd_num4', 'nd_num5', 'serie2', 'serie3', 'serie4', 'serie5', 'emp_num', 'dmc_num', 'tax_num', 'ced_num', 'ent_num', 'cie_num', 'odp_num', 'req_num', 'dev_num', 'exp_num', 'inp_num', 'cost_num', 'par_num', 'esc_num', 'pla_num', 'men_num', 'dist_num', 'exp_numi', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('CoAlma' => 0, 'AlmaDes' => 1, 'NroFact' => 2, 'NumFacIni' => 3, 'NumFacFin' => 4, 'Campo1' => 5, 'Campo2' => 6, 'Campo3' => 7, 'Campo4' => 8, 'CoUsIn' => 9, 'FeUsIn' => 10, 'CoUsMo' => 11, 'FeUsMo' => 12, 'CoUsEl' => 13, 'FeUsEl' => 14, 'Revisado' => 15, 'Trasnfe' => 16, 'CoSucu' => 17, 'Rowguid' => 18, 'NcNum' => 19, 'NdNum' => 20, 'AjusNum' => 21, 'TrasNum' => 22, 'FisiNum' => 23, 'NumKit' => 24, 'GenkNum' => 25, 'FactNum' => 26, 'PedNum' => 27, 'CotcNum' => 28, 'DevcNum' => 29, 'NdeNum' => 30, 'NddNum' => 31, 'PostNum' => 32, 'CfxgNum' => 33, 'ChdvNum' => 34, 'GiroNum' => 35, 'RetenNum' => 36, 'CbNum' => 37, 'MovbNum' => 38, 'MovcNum' => 39, 'OrdpNum' => 40, 'DepcNum' => 41, 'CompNum' => 42, 'OrdNum' => 43, 'CotpNum' => 44, 'DevpNum' => 45, 'NdrNum' => 46, 'Postcppnum' => 47, 'CcxgNum' => 48, 'Chdvcppnum' => 49, 'Girocppnum' => 50, 'NccppNum' => 51, 'NdcppNum' => 52, 'Retencppnum' => 53, 'PgNum' => 54, 'AjuPosm' => 55, 'AjuPosa' => 56, 'AjuNegm' => 57, 'AjuNega' => 58, 'AjuPosmc' => 59, 'AjuPosac' => 60, 'AjuNegmc' => 61, 'AjuNegac' => 62, 'Pventa' => 63, 'Turnosic' => 64, 'PlvNum' => 65, 'PlcNum' => 66, 'Tabislr' => 67, 'ImpNum' => 68, 'RmaCli' => 69, 'RmaProv' => 70, 'RmaEntc' => 71, 'RmaEntp' => 72, 'RmaRegs' => 73, 'FactS1' => 74, 'FactS2' => 75, 'FactS3' => 76, 'FactS4' => 77, 'FactS5' => 78, 'NdeS1' => 79, 'NdeS2' => 80, 'NdeS3' => 81, 'NdeS4' => 82, 'NdeS5' => 83, 'NcS1' => 84, 'NcS2' => 85, 'NcS3' => 86, 'NcS4' => 87, 'NcS5' => 88, 'NdS1' => 89, 'NdS2' => 90, 'NdS3' => 91, 'NdS4' => 92, 'NdS5' => 93, 'FactF1' => 94, 'FactF2' => 95, 'FactF3' => 96, 'FactF4' => 97, 'NdeF1' => 98, 'NdeF2' => 99, 'NdeF3' => 100, 'NdeF4' => 101, 'NcF1' => 102, 'NcF2' => 103, 'NcF3' => 104, 'NcF4' => 105, 'NdF1' => 106, 'NdF2' => 107, 'NdF3' => 108, 'NdF4' => 109, 'FactP1' => 110, 'FactP2' => 111, 'FactP3' => 112, 'FactP4' => 113, 'FactP5' => 114, 'NdeP1' => 115, 'NdeP2' => 116, 'NdeP3' => 117, 'NdeP4' => 118, 'NdeP5' => 119, 'NcP1' => 120, 'NcP2' => 121, 'NcP3' => 122, 'NcP4' => 123, 'NcP5' => 124, 'NdP1' => 125, 'NdP2' => 126, 'NdP3' => 127, 'NdP4' => 128, 'NdP5' => 129, 'FactNum2' => 130, 'FactNum3' => 131, 'FactNum4' => 132, 'FactNum5' => 133, 'NdeNum2' => 134, 'NdeNum3' => 135, 'NdeNum4' => 136, 'NdeNum5' => 137, 'NcNum2' => 138, 'NcNum3' => 139, 'NcNum4' => 140, 'NcNum5' => 141, 'NdNum2' => 142, 'NdNum3' => 143, 'NdNum4' => 144, 'NdNum5' => 145, 'Serie2' => 146, 'Serie3' => 147, 'Serie4' => 148, 'Serie5' => 149, 'EmpNum' => 150, 'DmcNum' => 151, 'TaxNum' => 152, 'CedNum' => 153, 'EntNum' => 154, 'CieNum' => 155, 'OdpNum' => 156, 'ReqNum' => 157, 'DevNum' => 158, 'ExpNum' => 159, 'InpNum' => 160, 'CostNum' => 161, 'ParNum' => 162, 'EscNum' => 163, 'PlaNum' => 164, 'MenNum' => 165, 'DistNum' => 166, 'ExpNumi' => 167, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coAlma' => 0, 'almaDes' => 1, 'nroFact' => 2, 'numFacIni' => 3, 'numFacFin' => 4, 'campo1' => 5, 'campo2' => 6, 'campo3' => 7, 'campo4' => 8, 'coUsIn' => 9, 'feUsIn' => 10, 'coUsMo' => 11, 'feUsMo' => 12, 'coUsEl' => 13, 'feUsEl' => 14, 'revisado' => 15, 'trasnfe' => 16, 'coSucu' => 17, 'rowguid' => 18, 'ncNum' => 19, 'ndNum' => 20, 'ajusNum' => 21, 'trasNum' => 22, 'fisiNum' => 23, 'numKit' => 24, 'genkNum' => 25, 'factNum' => 26, 'pedNum' => 27, 'cotcNum' => 28, 'devcNum' => 29, 'ndeNum' => 30, 'nddNum' => 31, 'postNum' => 32, 'cfxgNum' => 33, 'chdvNum' => 34, 'giroNum' => 35, 'retenNum' => 36, 'cbNum' => 37, 'movbNum' => 38, 'movcNum' => 39, 'ordpNum' => 40, 'depcNum' => 41, 'compNum' => 42, 'ordNum' => 43, 'cotpNum' => 44, 'devpNum' => 45, 'ndrNum' => 46, 'postcppnum' => 47, 'ccxgNum' => 48, 'chdvcppnum' => 49, 'girocppnum' => 50, 'nccppNum' => 51, 'ndcppNum' => 52, 'retencppnum' => 53, 'pgNum' => 54, 'ajuPosm' => 55, 'ajuPosa' => 56, 'ajuNegm' => 57, 'ajuNega' => 58, 'ajuPosmc' => 59, 'ajuPosac' => 60, 'ajuNegmc' => 61, 'ajuNegac' => 62, 'pventa' => 63, 'turnosic' => 64, 'plvNum' => 65, 'plcNum' => 66, 'tabislr' => 67, 'impNum' => 68, 'rmaCli' => 69, 'rmaProv' => 70, 'rmaEntc' => 71, 'rmaEntp' => 72, 'rmaRegs' => 73, 'factS1' => 74, 'factS2' => 75, 'factS3' => 76, 'factS4' => 77, 'factS5' => 78, 'ndeS1' => 79, 'ndeS2' => 80, 'ndeS3' => 81, 'ndeS4' => 82, 'ndeS5' => 83, 'ncS1' => 84, 'ncS2' => 85, 'ncS3' => 86, 'ncS4' => 87, 'ncS5' => 88, 'ndS1' => 89, 'ndS2' => 90, 'ndS3' => 91, 'ndS4' => 92, 'ndS5' => 93, 'factF1' => 94, 'factF2' => 95, 'factF3' => 96, 'factF4' => 97, 'ndeF1' => 98, 'ndeF2' => 99, 'ndeF3' => 100, 'ndeF4' => 101, 'ncF1' => 102, 'ncF2' => 103, 'ncF3' => 104, 'ncF4' => 105, 'ndF1' => 106, 'ndF2' => 107, 'ndF3' => 108, 'ndF4' => 109, 'factP1' => 110, 'factP2' => 111, 'factP3' => 112, 'factP4' => 113, 'factP5' => 114, 'ndeP1' => 115, 'ndeP2' => 116, 'ndeP3' => 117, 'ndeP4' => 118, 'ndeP5' => 119, 'ncP1' => 120, 'ncP2' => 121, 'ncP3' => 122, 'ncP4' => 123, 'ncP5' => 124, 'ndP1' => 125, 'ndP2' => 126, 'ndP3' => 127, 'ndP4' => 128, 'ndP5' => 129, 'factNum2' => 130, 'factNum3' => 131, 'factNum4' => 132, 'factNum5' => 133, 'ndeNum2' => 134, 'ndeNum3' => 135, 'ndeNum4' => 136, 'ndeNum5' => 137, 'ncNum2' => 138, 'ncNum3' => 139, 'ncNum4' => 140, 'ncNum5' => 141, 'ndNum2' => 142, 'ndNum3' => 143, 'ndNum4' => 144, 'ndNum5' => 145, 'serie2' => 146, 'serie3' => 147, 'serie4' => 148, 'serie5' => 149, 'empNum' => 150, 'dmcNum' => 151, 'taxNum' => 152, 'cedNum' => 153, 'entNum' => 154, 'cieNum' => 155, 'odpNum' => 156, 'reqNum' => 157, 'devNum' => 158, 'expNum' => 159, 'inpNum' => 160, 'costNum' => 161, 'parNum' => 162, 'escNum' => 163, 'plaNum' => 164, 'menNum' => 165, 'distNum' => 166, 'expNumi' => 167, ),
		BasePeer::TYPE_COLNAME => array (self::CO_ALMA => 0, self::ALMA_DES => 1, self::NRO_FACT => 2, self::NUM_FAC_INI => 3, self::NUM_FAC_FIN => 4, self::CAMPO1 => 5, self::CAMPO2 => 6, self::CAMPO3 => 7, self::CAMPO4 => 8, self::CO_US_IN => 9, self::FE_US_IN => 10, self::CO_US_MO => 11, self::FE_US_MO => 12, self::CO_US_EL => 13, self::FE_US_EL => 14, self::REVISADO => 15, self::TRASNFE => 16, self::CO_SUCU => 17, self::ROWGUID => 18, self::NC_NUM => 19, self::ND_NUM => 20, self::AJUS_NUM => 21, self::TRAS_NUM => 22, self::FISI_NUM => 23, self::NUM_KIT => 24, self::GENK_NUM => 25, self::FACT_NUM => 26, self::PED_NUM => 27, self::COTC_NUM => 28, self::DEVC_NUM => 29, self::NDE_NUM => 30, self::NDD_NUM => 31, self::POST_NUM => 32, self::CFXG_NUM => 33, self::CHDV_NUM => 34, self::GIRO_NUM => 35, self::RETEN_NUM => 36, self::CB_NUM => 37, self::MOVB_NUM => 38, self::MOVC_NUM => 39, self::ORDP_NUM => 40, self::DEPC_NUM => 41, self::COMP_NUM => 42, self::ORD_NUM => 43, self::COTP_NUM => 44, self::DEVP_NUM => 45, self::NDR_NUM => 46, self::POSTCPPNUM => 47, self::CCXG_NUM => 48, self::CHDVCPPNUM => 49, self::GIROCPPNUM => 50, self::NCCPP_NUM => 51, self::NDCPP_NUM => 52, self::RETENCPPNUM => 53, self::PG_NUM => 54, self::AJU_POSM => 55, self::AJU_POSA => 56, self::AJU_NEGM => 57, self::AJU_NEGA => 58, self::AJU_POSMC => 59, self::AJU_POSAC => 60, self::AJU_NEGMC => 61, self::AJU_NEGAC => 62, self::PVENTA => 63, self::TURNOSIC => 64, self::PLV_NUM => 65, self::PLC_NUM => 66, self::TABISLR => 67, self::IMP_NUM => 68, self::RMA_CLI => 69, self::RMA_PROV => 70, self::RMA_ENTC => 71, self::RMA_ENTP => 72, self::RMA_REGS => 73, self::FACT_S1 => 74, self::FACT_S2 => 75, self::FACT_S3 => 76, self::FACT_S4 => 77, self::FACT_S5 => 78, self::NDE_S1 => 79, self::NDE_S2 => 80, self::NDE_S3 => 81, self::NDE_S4 => 82, self::NDE_S5 => 83, self::NC_S1 => 84, self::NC_S2 => 85, self::NC_S3 => 86, self::NC_S4 => 87, self::NC_S5 => 88, self::ND_S1 => 89, self::ND_S2 => 90, self::ND_S3 => 91, self::ND_S4 => 92, self::ND_S5 => 93, self::FACT_F1 => 94, self::FACT_F2 => 95, self::FACT_F3 => 96, self::FACT_F4 => 97, self::NDE_F1 => 98, self::NDE_F2 => 99, self::NDE_F3 => 100, self::NDE_F4 => 101, self::NC_F1 => 102, self::NC_F2 => 103, self::NC_F3 => 104, self::NC_F4 => 105, self::ND_F1 => 106, self::ND_F2 => 107, self::ND_F3 => 108, self::ND_F4 => 109, self::FACT_P1 => 110, self::FACT_P2 => 111, self::FACT_P3 => 112, self::FACT_P4 => 113, self::FACT_P5 => 114, self::NDE_P1 => 115, self::NDE_P2 => 116, self::NDE_P3 => 117, self::NDE_P4 => 118, self::NDE_P5 => 119, self::NC_P1 => 120, self::NC_P2 => 121, self::NC_P3 => 122, self::NC_P4 => 123, self::NC_P5 => 124, self::ND_P1 => 125, self::ND_P2 => 126, self::ND_P3 => 127, self::ND_P4 => 128, self::ND_P5 => 129, self::FACT_NUM2 => 130, self::FACT_NUM3 => 131, self::FACT_NUM4 => 132, self::FACT_NUM5 => 133, self::NDE_NUM2 => 134, self::NDE_NUM3 => 135, self::NDE_NUM4 => 136, self::NDE_NUM5 => 137, self::NC_NUM2 => 138, self::NC_NUM3 => 139, self::NC_NUM4 => 140, self::NC_NUM5 => 141, self::ND_NUM2 => 142, self::ND_NUM3 => 143, self::ND_NUM4 => 144, self::ND_NUM5 => 145, self::SERIE2 => 146, self::SERIE3 => 147, self::SERIE4 => 148, self::SERIE5 => 149, self::EMP_NUM => 150, self::DMC_NUM => 151, self::TAX_NUM => 152, self::CED_NUM => 153, self::ENT_NUM => 154, self::CIE_NUM => 155, self::ODP_NUM => 156, self::REQ_NUM => 157, self::DEV_NUM => 158, self::EXP_NUM => 159, self::INP_NUM => 160, self::COST_NUM => 161, self::PAR_NUM => 162, self::ESC_NUM => 163, self::PLA_NUM => 164, self::MEN_NUM => 165, self::DIST_NUM => 166, self::EXP_NUMI => 167, ),
		BasePeer::TYPE_FIELDNAME => array ('co_alma' => 0, 'alma_des' => 1, 'nro_fact' => 2, 'num_fac_ini' => 3, 'num_fac_fin' => 4, 'campo1' => 5, 'campo2' => 6, 'campo3' => 7, 'campo4' => 8, 'co_us_in' => 9, 'fe_us_in' => 10, 'co_us_mo' => 11, 'fe_us_mo' => 12, 'co_us_el' => 13, 'fe_us_el' => 14, 'revisado' => 15, 'trasnfe' => 16, 'co_sucu' => 17, 'rowguid' => 18, 'nc_num' => 19, 'nd_num' => 20, 'ajus_num' => 21, 'tras_num' => 22, 'fisi_num' => 23, 'num_kit' => 24, 'genk_num' => 25, 'fact_num' => 26, 'ped_num' => 27, 'cotc_num' => 28, 'devc_num' => 29, 'nde_num' => 30, 'ndd_num' => 31, 'post_num' => 32, 'cfxg_num' => 33, 'chdv_num' => 34, 'giro_num' => 35, 'reten_num' => 36, 'cb_num' => 37, 'movb_num' => 38, 'movc_num' => 39, 'ordp_num' => 40, 'depc_num' => 41, 'comp_num' => 42, 'ord_num' => 43, 'cotp_num' => 44, 'devp_num' => 45, 'ndr_num' => 46, 'postcppnum' => 47, 'ccxg_num' => 48, 'chdvcppnum' => 49, 'girocppnum' => 50, 'nccpp_num' => 51, 'ndcpp_num' => 52, 'retencppnum' => 53, 'pg_num' => 54, 'aju_posm' => 55, 'aju_posa' => 56, 'aju_negm' => 57, 'aju_nega' => 58, 'aju_posmc' => 59, 'aju_posac' => 60, 'aju_negmc' => 61, 'aju_negac' => 62, 'pventa' => 63, 'turnosic' => 64, 'plv_num' => 65, 'plc_num' => 66, 'tabislr' => 67, 'imp_num' => 68, 'rma_cli' => 69, 'rma_prov' => 70, 'rma_entc' => 71, 'rma_entp' => 72, 'rma_regs' => 73, 'fact_s1' => 74, 'fact_s2' => 75, 'fact_s3' => 76, 'fact_s4' => 77, 'fact_s5' => 78, 'nde_s1' => 79, 'nde_s2' => 80, 'nde_s3' => 81, 'nde_s4' => 82, 'nde_s5' => 83, 'nc_s1' => 84, 'nc_s2' => 85, 'nc_s3' => 86, 'nc_s4' => 87, 'nc_s5' => 88, 'nd_s1' => 89, 'nd_s2' => 90, 'nd_s3' => 91, 'nd_s4' => 92, 'nd_s5' => 93, 'fact_f1' => 94, 'fact_f2' => 95, 'fact_f3' => 96, 'fact_f4' => 97, 'nde_f1' => 98, 'nde_f2' => 99, 'nde_f3' => 100, 'nde_f4' => 101, 'nc_f1' => 102, 'nc_f2' => 103, 'nc_f3' => 104, 'nc_f4' => 105, 'nd_f1' => 106, 'nd_f2' => 107, 'nd_f3' => 108, 'nd_f4' => 109, 'fact_p1' => 110, 'fact_p2' => 111, 'fact_p3' => 112, 'fact_p4' => 113, 'fact_p5' => 114, 'nde_p1' => 115, 'nde_p2' => 116, 'nde_p3' => 117, 'nde_p4' => 118, 'nde_p5' => 119, 'nc_p1' => 120, 'nc_p2' => 121, 'nc_p3' => 122, 'nc_p4' => 123, 'nc_p5' => 124, 'nd_p1' => 125, 'nd_p2' => 126, 'nd_p3' => 127, 'nd_p4' => 128, 'nd_p5' => 129, 'fact_num2' => 130, 'fact_num3' => 131, 'fact_num4' => 132, 'fact_num5' => 133, 'nde_num2' => 134, 'nde_num3' => 135, 'nde_num4' => 136, 'nde_num5' => 137, 'nc_num2' => 138, 'nc_num3' => 139, 'nc_num4' => 140, 'nc_num5' => 141, 'nd_num2' => 142, 'nd_num3' => 143, 'nd_num4' => 144, 'nd_num5' => 145, 'serie2' => 146, 'serie3' => 147, 'serie4' => 148, 'serie5' => 149, 'emp_num' => 150, 'dmc_num' => 151, 'tax_num' => 152, 'ced_num' => 153, 'ent_num' => 154, 'cie_num' => 155, 'odp_num' => 156, 'req_num' => 157, 'dev_num' => 158, 'exp_num' => 159, 'inp_num' => 160, 'cost_num' => 161, 'par_num' => 162, 'esc_num' => 163, 'pla_num' => 164, 'men_num' => 165, 'dist_num' => 166, 'exp_numi' => 167, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new AlmacenMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. AlmacenPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(AlmacenPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(AlmacenPeer::CO_ALMA);

		$criteria->addSelectColumn(AlmacenPeer::ALMA_DES);

		$criteria->addSelectColumn(AlmacenPeer::NRO_FACT);

		$criteria->addSelectColumn(AlmacenPeer::NUM_FAC_INI);

		$criteria->addSelectColumn(AlmacenPeer::NUM_FAC_FIN);

		$criteria->addSelectColumn(AlmacenPeer::CAMPO1);

		$criteria->addSelectColumn(AlmacenPeer::CAMPO2);

		$criteria->addSelectColumn(AlmacenPeer::CAMPO3);

		$criteria->addSelectColumn(AlmacenPeer::CAMPO4);

		$criteria->addSelectColumn(AlmacenPeer::CO_US_IN);

		$criteria->addSelectColumn(AlmacenPeer::FE_US_IN);

		$criteria->addSelectColumn(AlmacenPeer::CO_US_MO);

		$criteria->addSelectColumn(AlmacenPeer::FE_US_MO);

		$criteria->addSelectColumn(AlmacenPeer::CO_US_EL);

		$criteria->addSelectColumn(AlmacenPeer::FE_US_EL);

		$criteria->addSelectColumn(AlmacenPeer::REVISADO);

		$criteria->addSelectColumn(AlmacenPeer::TRASNFE);

		$criteria->addSelectColumn(AlmacenPeer::CO_SUCU);

		$criteria->addSelectColumn(AlmacenPeer::ROWGUID);

		$criteria->addSelectColumn(AlmacenPeer::NC_NUM);

		$criteria->addSelectColumn(AlmacenPeer::ND_NUM);

		$criteria->addSelectColumn(AlmacenPeer::AJUS_NUM);

		$criteria->addSelectColumn(AlmacenPeer::TRAS_NUM);

		$criteria->addSelectColumn(AlmacenPeer::FISI_NUM);

		$criteria->addSelectColumn(AlmacenPeer::NUM_KIT);

		$criteria->addSelectColumn(AlmacenPeer::GENK_NUM);

		$criteria->addSelectColumn(AlmacenPeer::FACT_NUM);

		$criteria->addSelectColumn(AlmacenPeer::PED_NUM);

		$criteria->addSelectColumn(AlmacenPeer::COTC_NUM);

		$criteria->addSelectColumn(AlmacenPeer::DEVC_NUM);

		$criteria->addSelectColumn(AlmacenPeer::NDE_NUM);

		$criteria->addSelectColumn(AlmacenPeer::NDD_NUM);

		$criteria->addSelectColumn(AlmacenPeer::POST_NUM);

		$criteria->addSelectColumn(AlmacenPeer::CFXG_NUM);

		$criteria->addSelectColumn(AlmacenPeer::CHDV_NUM);

		$criteria->addSelectColumn(AlmacenPeer::GIRO_NUM);

		$criteria->addSelectColumn(AlmacenPeer::RETEN_NUM);

		$criteria->addSelectColumn(AlmacenPeer::CB_NUM);

		$criteria->addSelectColumn(AlmacenPeer::MOVB_NUM);

		$criteria->addSelectColumn(AlmacenPeer::MOVC_NUM);

		$criteria->addSelectColumn(AlmacenPeer::ORDP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::DEPC_NUM);

		$criteria->addSelectColumn(AlmacenPeer::COMP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::ORD_NUM);

		$criteria->addSelectColumn(AlmacenPeer::COTP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::DEVP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::NDR_NUM);

		$criteria->addSelectColumn(AlmacenPeer::POSTCPPNUM);

		$criteria->addSelectColumn(AlmacenPeer::CCXG_NUM);

		$criteria->addSelectColumn(AlmacenPeer::CHDVCPPNUM);

		$criteria->addSelectColumn(AlmacenPeer::GIROCPPNUM);

		$criteria->addSelectColumn(AlmacenPeer::NCCPP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::NDCPP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::RETENCPPNUM);

		$criteria->addSelectColumn(AlmacenPeer::PG_NUM);

		$criteria->addSelectColumn(AlmacenPeer::AJU_POSM);

		$criteria->addSelectColumn(AlmacenPeer::AJU_POSA);

		$criteria->addSelectColumn(AlmacenPeer::AJU_NEGM);

		$criteria->addSelectColumn(AlmacenPeer::AJU_NEGA);

		$criteria->addSelectColumn(AlmacenPeer::AJU_POSMC);

		$criteria->addSelectColumn(AlmacenPeer::AJU_POSAC);

		$criteria->addSelectColumn(AlmacenPeer::AJU_NEGMC);

		$criteria->addSelectColumn(AlmacenPeer::AJU_NEGAC);

		$criteria->addSelectColumn(AlmacenPeer::PVENTA);

		$criteria->addSelectColumn(AlmacenPeer::TURNOSIC);

		$criteria->addSelectColumn(AlmacenPeer::PLV_NUM);

		$criteria->addSelectColumn(AlmacenPeer::PLC_NUM);

		$criteria->addSelectColumn(AlmacenPeer::TABISLR);

		$criteria->addSelectColumn(AlmacenPeer::IMP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::RMA_CLI);

		$criteria->addSelectColumn(AlmacenPeer::RMA_PROV);

		$criteria->addSelectColumn(AlmacenPeer::RMA_ENTC);

		$criteria->addSelectColumn(AlmacenPeer::RMA_ENTP);

		$criteria->addSelectColumn(AlmacenPeer::RMA_REGS);

		$criteria->addSelectColumn(AlmacenPeer::FACT_S1);

		$criteria->addSelectColumn(AlmacenPeer::FACT_S2);

		$criteria->addSelectColumn(AlmacenPeer::FACT_S3);

		$criteria->addSelectColumn(AlmacenPeer::FACT_S4);

		$criteria->addSelectColumn(AlmacenPeer::FACT_S5);

		$criteria->addSelectColumn(AlmacenPeer::NDE_S1);

		$criteria->addSelectColumn(AlmacenPeer::NDE_S2);

		$criteria->addSelectColumn(AlmacenPeer::NDE_S3);

		$criteria->addSelectColumn(AlmacenPeer::NDE_S4);

		$criteria->addSelectColumn(AlmacenPeer::NDE_S5);

		$criteria->addSelectColumn(AlmacenPeer::NC_S1);

		$criteria->addSelectColumn(AlmacenPeer::NC_S2);

		$criteria->addSelectColumn(AlmacenPeer::NC_S3);

		$criteria->addSelectColumn(AlmacenPeer::NC_S4);

		$criteria->addSelectColumn(AlmacenPeer::NC_S5);

		$criteria->addSelectColumn(AlmacenPeer::ND_S1);

		$criteria->addSelectColumn(AlmacenPeer::ND_S2);

		$criteria->addSelectColumn(AlmacenPeer::ND_S3);

		$criteria->addSelectColumn(AlmacenPeer::ND_S4);

		$criteria->addSelectColumn(AlmacenPeer::ND_S5);

		$criteria->addSelectColumn(AlmacenPeer::FACT_F1);

		$criteria->addSelectColumn(AlmacenPeer::FACT_F2);

		$criteria->addSelectColumn(AlmacenPeer::FACT_F3);

		$criteria->addSelectColumn(AlmacenPeer::FACT_F4);

		$criteria->addSelectColumn(AlmacenPeer::NDE_F1);

		$criteria->addSelectColumn(AlmacenPeer::NDE_F2);

		$criteria->addSelectColumn(AlmacenPeer::NDE_F3);

		$criteria->addSelectColumn(AlmacenPeer::NDE_F4);

		$criteria->addSelectColumn(AlmacenPeer::NC_F1);

		$criteria->addSelectColumn(AlmacenPeer::NC_F2);

		$criteria->addSelectColumn(AlmacenPeer::NC_F3);

		$criteria->addSelectColumn(AlmacenPeer::NC_F4);

		$criteria->addSelectColumn(AlmacenPeer::ND_F1);

		$criteria->addSelectColumn(AlmacenPeer::ND_F2);

		$criteria->addSelectColumn(AlmacenPeer::ND_F3);

		$criteria->addSelectColumn(AlmacenPeer::ND_F4);

		$criteria->addSelectColumn(AlmacenPeer::FACT_P1);

		$criteria->addSelectColumn(AlmacenPeer::FACT_P2);

		$criteria->addSelectColumn(AlmacenPeer::FACT_P3);

		$criteria->addSelectColumn(AlmacenPeer::FACT_P4);

		$criteria->addSelectColumn(AlmacenPeer::FACT_P5);

		$criteria->addSelectColumn(AlmacenPeer::NDE_P1);

		$criteria->addSelectColumn(AlmacenPeer::NDE_P2);

		$criteria->addSelectColumn(AlmacenPeer::NDE_P3);

		$criteria->addSelectColumn(AlmacenPeer::NDE_P4);

		$criteria->addSelectColumn(AlmacenPeer::NDE_P5);

		$criteria->addSelectColumn(AlmacenPeer::NC_P1);

		$criteria->addSelectColumn(AlmacenPeer::NC_P2);

		$criteria->addSelectColumn(AlmacenPeer::NC_P3);

		$criteria->addSelectColumn(AlmacenPeer::NC_P4);

		$criteria->addSelectColumn(AlmacenPeer::NC_P5);

		$criteria->addSelectColumn(AlmacenPeer::ND_P1);

		$criteria->addSelectColumn(AlmacenPeer::ND_P2);

		$criteria->addSelectColumn(AlmacenPeer::ND_P3);

		$criteria->addSelectColumn(AlmacenPeer::ND_P4);

		$criteria->addSelectColumn(AlmacenPeer::ND_P5);

		$criteria->addSelectColumn(AlmacenPeer::FACT_NUM2);

		$criteria->addSelectColumn(AlmacenPeer::FACT_NUM3);

		$criteria->addSelectColumn(AlmacenPeer::FACT_NUM4);

		$criteria->addSelectColumn(AlmacenPeer::FACT_NUM5);

		$criteria->addSelectColumn(AlmacenPeer::NDE_NUM2);

		$criteria->addSelectColumn(AlmacenPeer::NDE_NUM3);

		$criteria->addSelectColumn(AlmacenPeer::NDE_NUM4);

		$criteria->addSelectColumn(AlmacenPeer::NDE_NUM5);

		$criteria->addSelectColumn(AlmacenPeer::NC_NUM2);

		$criteria->addSelectColumn(AlmacenPeer::NC_NUM3);

		$criteria->addSelectColumn(AlmacenPeer::NC_NUM4);

		$criteria->addSelectColumn(AlmacenPeer::NC_NUM5);

		$criteria->addSelectColumn(AlmacenPeer::ND_NUM2);

		$criteria->addSelectColumn(AlmacenPeer::ND_NUM3);

		$criteria->addSelectColumn(AlmacenPeer::ND_NUM4);

		$criteria->addSelectColumn(AlmacenPeer::ND_NUM5);

		$criteria->addSelectColumn(AlmacenPeer::SERIE2);

		$criteria->addSelectColumn(AlmacenPeer::SERIE3);

		$criteria->addSelectColumn(AlmacenPeer::SERIE4);

		$criteria->addSelectColumn(AlmacenPeer::SERIE5);

		$criteria->addSelectColumn(AlmacenPeer::EMP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::DMC_NUM);

		$criteria->addSelectColumn(AlmacenPeer::TAX_NUM);

		$criteria->addSelectColumn(AlmacenPeer::CED_NUM);

		$criteria->addSelectColumn(AlmacenPeer::ENT_NUM);

		$criteria->addSelectColumn(AlmacenPeer::CIE_NUM);

		$criteria->addSelectColumn(AlmacenPeer::ODP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::REQ_NUM);

		$criteria->addSelectColumn(AlmacenPeer::DEV_NUM);

		$criteria->addSelectColumn(AlmacenPeer::EXP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::INP_NUM);

		$criteria->addSelectColumn(AlmacenPeer::COST_NUM);

		$criteria->addSelectColumn(AlmacenPeer::PAR_NUM);

		$criteria->addSelectColumn(AlmacenPeer::ESC_NUM);

		$criteria->addSelectColumn(AlmacenPeer::PLA_NUM);

		$criteria->addSelectColumn(AlmacenPeer::MEN_NUM);

		$criteria->addSelectColumn(AlmacenPeer::DIST_NUM);

		$criteria->addSelectColumn(AlmacenPeer::EXP_NUMI);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlmacenPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlmacenPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(AlmacenPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseAlmacenPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseAlmacenPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Almacen
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = AlmacenPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return AlmacenPeer::populateObjects(AlmacenPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAlmacenPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseAlmacenPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(AlmacenPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			AlmacenPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Almacen $value A Almacen object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Almacen $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getCoAlma();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Almacen object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Almacen) {
				$key = (string) $value->getCoAlma();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Almacen object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Almacen Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = AlmacenPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = AlmacenPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = AlmacenPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				AlmacenPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return AlmacenPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a Almacen or Criteria object.
	 *
	 * @param      mixed $values Criteria or Almacen object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAlmacenPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseAlmacenPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(AlmacenPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Almacen object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseAlmacenPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseAlmacenPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Almacen or Criteria object.
	 *
	 * @param      mixed $values Criteria or Almacen object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAlmacenPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseAlmacenPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(AlmacenPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(AlmacenPeer::CO_ALMA);
			$selectCriteria->add(AlmacenPeer::CO_ALMA, $criteria->remove(AlmacenPeer::CO_ALMA), $comparison);

		} else { // $values is Almacen object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseAlmacenPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseAlmacenPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the almacen table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(AlmacenPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(AlmacenPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Almacen or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Almacen object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(AlmacenPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			AlmacenPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Almacen) {
			// invalidate the cache for this single object
			AlmacenPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(AlmacenPeer::CO_ALMA, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				AlmacenPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Almacen object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Almacen $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Almacen $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(AlmacenPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(AlmacenPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(AlmacenPeer::DATABASE_NAME, AlmacenPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = AlmacenPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      string $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Almacen
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = AlmacenPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(AlmacenPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(AlmacenPeer::DATABASE_NAME);
		$criteria->add(AlmacenPeer::CO_ALMA, $pk);

		$v = AlmacenPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(AlmacenPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(AlmacenPeer::DATABASE_NAME);
			$criteria->add(AlmacenPeer::CO_ALMA, $pks, Criteria::IN);
			$objs = AlmacenPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseAlmacenPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the AlmacenPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the AlmacenPeer class:
//
// Propel::getDatabaseMap(AlmacenPeer::DATABASE_NAME)->addTableBuilder(AlmacenPeer::TABLE_NAME, AlmacenPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseAlmacenPeer::DATABASE_NAME)->addTableBuilder(BaseAlmacenPeer::TABLE_NAME, BaseAlmacenPeer::getMapBuilder());

