<?php

/**
 * Base class that represents a row from the 'cobros' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Nov 25 23:58:33 2009
 *
 * @package    lib.model.profit.om
 */
abstract class BaseCobros extends BaseObject  implements Persistent {


  const PEER = 'CobrosPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CobrosPeer
	 */
	protected static $peer;

	/**
	 * The value for the cob_num field.
	 * @var        int
	 */
	protected $cob_num;

	/**
	 * The value for the recibo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $recibo;

	/**
	 * The value for the co_cli field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_cli;

	/**
	 * The value for the co_ven field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_ven;

	/**
	 * The value for the fec_cob field.
	 * @var        string
	 */
	protected $fec_cob;

	/**
	 * The value for the anulado field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $anulado;

	/**
	 * The value for the monto field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto;

	/**
	 * The value for the dppago field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $dppago;

	/**
	 * The value for the mont_ncr field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $mont_ncr;

	/**
	 * The value for the ncr field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $ncr;

	/**
	 * The value for the tcomi_porc field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tcomi_porc;

	/**
	 * The value for the tcomi_line field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tcomi_line;

	/**
	 * The value for the tcomi_art field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tcomi_art;

	/**
	 * The value for the tcomi_conc field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tcomi_conc;

	/**
	 * The value for the feccom field.
	 * @var        string
	 */
	protected $feccom;

	/**
	 * The value for the tasa field.
	 * Note: this column has a database default value of: '1'
	 * @var        string
	 */
	protected $tasa;

	/**
	 * The value for the moneda field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $moneda;

	/**
	 * The value for the numcom field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $numcom;

	/**
	 * The value for the dis_cen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $dis_cen;

	/**
	 * The value for the campo1 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo1;

	/**
	 * The value for the campo2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo2;

	/**
	 * The value for the campo3 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo3;

	/**
	 * The value for the campo4 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo4;

	/**
	 * The value for the campo5 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo5;

	/**
	 * The value for the campo6 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo6;

	/**
	 * The value for the campo7 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo7;

	/**
	 * The value for the campo8 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $campo8;

	/**
	 * The value for the co_us_in field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_in;

	/**
	 * The value for the fe_us_in field.
	 * @var        string
	 */
	protected $fe_us_in;

	/**
	 * The value for the co_us_mo field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_mo;

	/**
	 * The value for the fe_us_mo field.
	 * @var        string
	 */
	protected $fe_us_mo;

	/**
	 * The value for the co_us_el field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_us_el;

	/**
	 * The value for the fe_us_el field.
	 * @var        string
	 */
	protected $fe_us_el;

	/**
	 * The value for the recargo field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $recargo;

	/**
	 * The value for the adel_num field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $adel_num;

	/**
	 * The value for the revisado field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $revisado;

	/**
	 * The value for the trasnfe field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $trasnfe;

	/**
	 * The value for the co_sucu field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_sucu;

	/**
	 * The value for the rowguid field.
	 * Note: this column has a database default value of: '(newid())'
	 * @var        string
	 */
	protected $rowguid;

	/**
	 * The value for the descrip field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $descrip;

	/**
	 * The value for the num_dev field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $num_dev;

	/**
	 * The value for the devdinero field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $devdinero;

	/**
	 * The value for the num_turno field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $num_turno;

	/**
	 * The value for the aux01 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $aux01;

	/**
	 * The value for the aux02 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $aux02;

	/**
	 * The value for the origen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $origen;

	/**
	 * The value for the origen_d field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $origen_d;

	/**
	 * @var        Clientes
	 */
	protected $aClientes;

	/**
	 * @var        Vendedor
	 */
	protected $aVendedor;

	/**
	 * @var        Moneda
	 */
	protected $aMonedaRelatedByMoneda;

	/**
	 * @var        Almacen
	 */
	protected $aAlmacen;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCobros object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->recibo = ' ';
		$this->co_cli = ' ';
		$this->co_ven = ' ';
		$this->anulado = false;
		$this->monto = '0';
		$this->dppago = '0';
		$this->mont_ncr = '0';
		$this->ncr = 0;
		$this->tcomi_porc = '0';
		$this->tcomi_line = '0';
		$this->tcomi_art = '0';
		$this->tcomi_conc = '0';
		$this->tasa = '1';
		$this->moneda = ' ';
		$this->numcom = 0;
		$this->dis_cen = ' ';
		$this->campo1 = ' ';
		$this->campo2 = ' ';
		$this->campo3 = ' ';
		$this->campo4 = ' ';
		$this->campo5 = ' ';
		$this->campo6 = ' ';
		$this->campo7 = ' ';
		$this->campo8 = ' ';
		$this->co_us_in = ' ';
		$this->co_us_mo = ' ';
		$this->co_us_el = ' ';
		$this->recargo = false;
		$this->adel_num = 0;
		$this->revisado = ' ';
		$this->trasnfe = ' ';
		$this->co_sucu = ' ';
		$this->rowguid = '(newid())';
		$this->descrip = ' ';
		$this->num_dev = 0;
		$this->devdinero = false;
		$this->num_turno = 0;
		$this->aux01 = '0';
		$this->aux02 = ' ';
		$this->origen = ' ';
		$this->origen_d = ' ';
	}

	/**
	 * Get the [cob_num] column value.
	 * 
	 * @return     int
	 */
	public function getCobNum()
	{
		return $this->cob_num;
	}

	/**
	 * Get the [recibo] column value.
	 * 
	 * @return     string
	 */
	public function getRecibo()
	{
		return $this->recibo;
	}

	/**
	 * Get the [co_cli] column value.
	 * 
	 * @return     string
	 */
	public function getCoCli()
	{
		return $this->co_cli;
	}

	/**
	 * Get the [co_ven] column value.
	 * 
	 * @return     string
	 */
	public function getCoVen()
	{
		return $this->co_ven;
	}

	/**
	 * Get the [fec_cob] column value.
	 * 
	 * @return     string
	 */
	public function getFecCob()
	{
		return $this->fec_cob;
	}

	/**
	 * Get the [anulado] column value.
	 * 
	 * @return     boolean
	 */
	public function getAnulado()
	{
		return $this->anulado;
	}

	/**
	 * Get the [monto] column value.
	 * 
	 * @return     string
	 */
	public function getMonto()
	{
		return $this->monto;
	}

	/**
	 * Get the [dppago] column value.
	 * 
	 * @return     string
	 */
	public function getDppago()
	{
		return $this->dppago;
	}

	/**
	 * Get the [mont_ncr] column value.
	 * 
	 * @return     string
	 */
	public function getMontNcr()
	{
		return $this->mont_ncr;
	}

	/**
	 * Get the [ncr] column value.
	 * 
	 * @return     int
	 */
	public function getNcr()
	{
		return $this->ncr;
	}

	/**
	 * Get the [tcomi_porc] column value.
	 * 
	 * @return     string
	 */
	public function getTcomiPorc()
	{
		return $this->tcomi_porc;
	}

	/**
	 * Get the [tcomi_line] column value.
	 * 
	 * @return     string
	 */
	public function getTcomiLine()
	{
		return $this->tcomi_line;
	}

	/**
	 * Get the [tcomi_art] column value.
	 * 
	 * @return     string
	 */
	public function getTcomiArt()
	{
		return $this->tcomi_art;
	}

	/**
	 * Get the [tcomi_conc] column value.
	 * 
	 * @return     string
	 */
	public function getTcomiConc()
	{
		return $this->tcomi_conc;
	}

	/**
	 * Get the [feccom] column value.
	 * 
	 * @return     string
	 */
	public function getFeccom()
	{
		return $this->feccom;
	}

	/**
	 * Get the [tasa] column value.
	 * 
	 * @return     string
	 */
	public function getTasa()
	{
		return $this->tasa;
	}

	/**
	 * Get the [moneda] column value.
	 * 
	 * @return     string
	 */
	public function getMoneda()
	{
		return $this->moneda;
	}

	/**
	 * Get the [numcom] column value.
	 * 
	 * @return     int
	 */
	public function getNumcom()
	{
		return $this->numcom;
	}

	/**
	 * Get the [dis_cen] column value.
	 * 
	 * @return     string
	 */
	public function getDisCen()
	{
		return $this->dis_cen;
	}

	/**
	 * Get the [campo1] column value.
	 * 
	 * @return     string
	 */
	public function getCampo1()
	{
		return $this->campo1;
	}

	/**
	 * Get the [campo2] column value.
	 * 
	 * @return     string
	 */
	public function getCampo2()
	{
		return $this->campo2;
	}

	/**
	 * Get the [campo3] column value.
	 * 
	 * @return     string
	 */
	public function getCampo3()
	{
		return $this->campo3;
	}

	/**
	 * Get the [campo4] column value.
	 * 
	 * @return     string
	 */
	public function getCampo4()
	{
		return $this->campo4;
	}

	/**
	 * Get the [campo5] column value.
	 * 
	 * @return     string
	 */
	public function getCampo5()
	{
		return $this->campo5;
	}

	/**
	 * Get the [campo6] column value.
	 * 
	 * @return     string
	 */
	public function getCampo6()
	{
		return $this->campo6;
	}

	/**
	 * Get the [campo7] column value.
	 * 
	 * @return     string
	 */
	public function getCampo7()
	{
		return $this->campo7;
	}

	/**
	 * Get the [campo8] column value.
	 * 
	 * @return     string
	 */
	public function getCampo8()
	{
		return $this->campo8;
	}

	/**
	 * Get the [co_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsIn()
	{
		return $this->co_us_in;
	}

	/**
	 * Get the [fe_us_in] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsIn()
	{
		return $this->fe_us_in;
	}

	/**
	 * Get the [co_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsMo()
	{
		return $this->co_us_mo;
	}

	/**
	 * Get the [fe_us_mo] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsMo()
	{
		return $this->fe_us_mo;
	}

	/**
	 * Get the [co_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsEl()
	{
		return $this->co_us_el;
	}

	/**
	 * Get the [fe_us_el] column value.
	 * 
	 * @return     string
	 */
	public function getFeUsEl()
	{
		return $this->fe_us_el;
	}

	/**
	 * Get the [recargo] column value.
	 * 
	 * @return     boolean
	 */
	public function getRecargo()
	{
		return $this->recargo;
	}

	/**
	 * Get the [adel_num] column value.
	 * 
	 * @return     int
	 */
	public function getAdelNum()
	{
		return $this->adel_num;
	}

	/**
	 * Get the [revisado] column value.
	 * 
	 * @return     string
	 */
	public function getRevisado()
	{
		return $this->revisado;
	}

	/**
	 * Get the [trasnfe] column value.
	 * 
	 * @return     string
	 */
	public function getTrasnfe()
	{
		return $this->trasnfe;
	}

	/**
	 * Get the [co_sucu] column value.
	 * 
	 * @return     string
	 */
	public function getCoSucu()
	{
		return $this->co_sucu;
	}

	/**
	 * Get the [rowguid] column value.
	 * 
	 * @return     string
	 */
	public function getRowguid()
	{
		return $this->rowguid;
	}

	/**
	 * Get the [descrip] column value.
	 * 
	 * @return     string
	 */
	public function getDescrip()
	{
		return $this->descrip;
	}

	/**
	 * Get the [num_dev] column value.
	 * 
	 * @return     int
	 */
	public function getNumDev()
	{
		return $this->num_dev;
	}

	/**
	 * Get the [devdinero] column value.
	 * 
	 * @return     boolean
	 */
	public function getDevdinero()
	{
		return $this->devdinero;
	}

	/**
	 * Get the [num_turno] column value.
	 * 
	 * @return     int
	 */
	public function getNumTurno()
	{
		return $this->num_turno;
	}

	/**
	 * Get the [aux01] column value.
	 * 
	 * @return     string
	 */
	public function getAux01()
	{
		return $this->aux01;
	}

	/**
	 * Get the [aux02] column value.
	 * 
	 * @return     string
	 */
	public function getAux02()
	{
		return $this->aux02;
	}

	/**
	 * Get the [origen] column value.
	 * 
	 * @return     string
	 */
	public function getOrigen()
	{
		return $this->origen;
	}

	/**
	 * Get the [origen_d] column value.
	 * 
	 * @return     string
	 */
	public function getOrigenD()
	{
		return $this->origen_d;
	}

	/**
	 * Set the value of [cob_num] column.
	 * 
	 * @param      int $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCobNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cob_num !== $v) {
			$this->cob_num = $v;
			$this->modifiedColumns[] = CobrosPeer::COB_NUM;
		}

		return $this;
	} // setCobNum()

	/**
	 * Set the value of [recibo] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setRecibo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->recibo !== $v || $v === ' ') {
			$this->recibo = $v;
			$this->modifiedColumns[] = CobrosPeer::RECIBO;
		}

		return $this;
	} // setRecibo()

	/**
	 * Set the value of [co_cli] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCoCli($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_cli !== $v || $v === ' ') {
			$this->co_cli = $v;
			$this->modifiedColumns[] = CobrosPeer::CO_CLI;
		}

		if ($this->aClientes !== null && $this->aClientes->getCoCli() !== $v) {
			$this->aClientes = null;
		}

		return $this;
	} // setCoCli()

	/**
	 * Set the value of [co_ven] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCoVen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_ven !== $v || $v === ' ') {
			$this->co_ven = $v;
			$this->modifiedColumns[] = CobrosPeer::CO_VEN;
		}

		if ($this->aVendedor !== null && $this->aVendedor->getCoVen() !== $v) {
			$this->aVendedor = null;
		}

		return $this;
	} // setCoVen()

	/**
	 * Set the value of [fec_cob] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setFecCob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_cob !== $v) {
			$this->fec_cob = $v;
			$this->modifiedColumns[] = CobrosPeer::FEC_COB;
		}

		return $this;
	} // setFecCob()

	/**
	 * Set the value of [anulado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setAnulado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->anulado !== $v || $v === false) {
			$this->anulado = $v;
			$this->modifiedColumns[] = CobrosPeer::ANULADO;
		}

		return $this;
	} // setAnulado()

	/**
	 * Set the value of [monto] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setMonto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto !== $v || $v === '0') {
			$this->monto = $v;
			$this->modifiedColumns[] = CobrosPeer::MONTO;
		}

		return $this;
	} // setMonto()

	/**
	 * Set the value of [dppago] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setDppago($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dppago !== $v || $v === '0') {
			$this->dppago = $v;
			$this->modifiedColumns[] = CobrosPeer::DPPAGO;
		}

		return $this;
	} // setDppago()

	/**
	 * Set the value of [mont_ncr] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setMontNcr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mont_ncr !== $v || $v === '0') {
			$this->mont_ncr = $v;
			$this->modifiedColumns[] = CobrosPeer::MONT_NCR;
		}

		return $this;
	} // setMontNcr()

	/**
	 * Set the value of [ncr] column.
	 * 
	 * @param      int $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setNcr($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ncr !== $v || $v === 0) {
			$this->ncr = $v;
			$this->modifiedColumns[] = CobrosPeer::NCR;
		}

		return $this;
	} // setNcr()

	/**
	 * Set the value of [tcomi_porc] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setTcomiPorc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tcomi_porc !== $v || $v === '0') {
			$this->tcomi_porc = $v;
			$this->modifiedColumns[] = CobrosPeer::TCOMI_PORC;
		}

		return $this;
	} // setTcomiPorc()

	/**
	 * Set the value of [tcomi_line] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setTcomiLine($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tcomi_line !== $v || $v === '0') {
			$this->tcomi_line = $v;
			$this->modifiedColumns[] = CobrosPeer::TCOMI_LINE;
		}

		return $this;
	} // setTcomiLine()

	/**
	 * Set the value of [tcomi_art] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setTcomiArt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tcomi_art !== $v || $v === '0') {
			$this->tcomi_art = $v;
			$this->modifiedColumns[] = CobrosPeer::TCOMI_ART;
		}

		return $this;
	} // setTcomiArt()

	/**
	 * Set the value of [tcomi_conc] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setTcomiConc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tcomi_conc !== $v || $v === '0') {
			$this->tcomi_conc = $v;
			$this->modifiedColumns[] = CobrosPeer::TCOMI_CONC;
		}

		return $this;
	} // setTcomiConc()

	/**
	 * Set the value of [feccom] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setFeccom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->feccom !== $v) {
			$this->feccom = $v;
			$this->modifiedColumns[] = CobrosPeer::FECCOM;
		}

		return $this;
	} // setFeccom()

	/**
	 * Set the value of [tasa] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setTasa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tasa !== $v || $v === '1') {
			$this->tasa = $v;
			$this->modifiedColumns[] = CobrosPeer::TASA;
		}

		return $this;
	} // setTasa()

	/**
	 * Set the value of [moneda] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setMoneda($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->moneda !== $v || $v === ' ') {
			$this->moneda = $v;
			$this->modifiedColumns[] = CobrosPeer::MONEDA;
		}

		if ($this->aMonedaRelatedByMoneda !== null && $this->aMonedaRelatedByMoneda->getCoMone() !== $v) {
			$this->aMonedaRelatedByMoneda = null;
		}

		return $this;
	} // setMoneda()

	/**
	 * Set the value of [numcom] column.
	 * 
	 * @param      int $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setNumcom($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->numcom !== $v || $v === 0) {
			$this->numcom = $v;
			$this->modifiedColumns[] = CobrosPeer::NUMCOM;
		}

		return $this;
	} // setNumcom()

	/**
	 * Set the value of [dis_cen] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setDisCen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dis_cen !== $v || $v === ' ') {
			$this->dis_cen = $v;
			$this->modifiedColumns[] = CobrosPeer::DIS_CEN;
		}

		return $this;
	} // setDisCen()

	/**
	 * Set the value of [campo1] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCampo1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo1 !== $v || $v === ' ') {
			$this->campo1 = $v;
			$this->modifiedColumns[] = CobrosPeer::CAMPO1;
		}

		return $this;
	} // setCampo1()

	/**
	 * Set the value of [campo2] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCampo2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo2 !== $v || $v === ' ') {
			$this->campo2 = $v;
			$this->modifiedColumns[] = CobrosPeer::CAMPO2;
		}

		return $this;
	} // setCampo2()

	/**
	 * Set the value of [campo3] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCampo3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo3 !== $v || $v === ' ') {
			$this->campo3 = $v;
			$this->modifiedColumns[] = CobrosPeer::CAMPO3;
		}

		return $this;
	} // setCampo3()

	/**
	 * Set the value of [campo4] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCampo4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo4 !== $v || $v === ' ') {
			$this->campo4 = $v;
			$this->modifiedColumns[] = CobrosPeer::CAMPO4;
		}

		return $this;
	} // setCampo4()

	/**
	 * Set the value of [campo5] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCampo5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo5 !== $v || $v === ' ') {
			$this->campo5 = $v;
			$this->modifiedColumns[] = CobrosPeer::CAMPO5;
		}

		return $this;
	} // setCampo5()

	/**
	 * Set the value of [campo6] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCampo6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo6 !== $v || $v === ' ') {
			$this->campo6 = $v;
			$this->modifiedColumns[] = CobrosPeer::CAMPO6;
		}

		return $this;
	} // setCampo6()

	/**
	 * Set the value of [campo7] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCampo7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo7 !== $v || $v === ' ') {
			$this->campo7 = $v;
			$this->modifiedColumns[] = CobrosPeer::CAMPO7;
		}

		return $this;
	} // setCampo7()

	/**
	 * Set the value of [campo8] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCampo8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campo8 !== $v || $v === ' ') {
			$this->campo8 = $v;
			$this->modifiedColumns[] = CobrosPeer::CAMPO8;
		}

		return $this;
	} // setCampo8()

	/**
	 * Set the value of [co_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCoUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_in !== $v || $v === ' ') {
			$this->co_us_in = $v;
			$this->modifiedColumns[] = CobrosPeer::CO_US_IN;
		}

		return $this;
	} // setCoUsIn()

	/**
	 * Set the value of [fe_us_in] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setFeUsIn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_in !== $v) {
			$this->fe_us_in = $v;
			$this->modifiedColumns[] = CobrosPeer::FE_US_IN;
		}

		return $this;
	} // setFeUsIn()

	/**
	 * Set the value of [co_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCoUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_mo !== $v || $v === ' ') {
			$this->co_us_mo = $v;
			$this->modifiedColumns[] = CobrosPeer::CO_US_MO;
		}

		return $this;
	} // setCoUsMo()

	/**
	 * Set the value of [fe_us_mo] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setFeUsMo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_mo !== $v) {
			$this->fe_us_mo = $v;
			$this->modifiedColumns[] = CobrosPeer::FE_US_MO;
		}

		return $this;
	} // setFeUsMo()

	/**
	 * Set the value of [co_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCoUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_us_el !== $v || $v === ' ') {
			$this->co_us_el = $v;
			$this->modifiedColumns[] = CobrosPeer::CO_US_EL;
		}

		return $this;
	} // setCoUsEl()

	/**
	 * Set the value of [fe_us_el] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setFeUsEl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fe_us_el !== $v) {
			$this->fe_us_el = $v;
			$this->modifiedColumns[] = CobrosPeer::FE_US_EL;
		}

		return $this;
	} // setFeUsEl()

	/**
	 * Set the value of [recargo] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setRecargo($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->recargo !== $v || $v === false) {
			$this->recargo = $v;
			$this->modifiedColumns[] = CobrosPeer::RECARGO;
		}

		return $this;
	} // setRecargo()

	/**
	 * Set the value of [adel_num] column.
	 * 
	 * @param      int $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setAdelNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->adel_num !== $v || $v === 0) {
			$this->adel_num = $v;
			$this->modifiedColumns[] = CobrosPeer::ADEL_NUM;
		}

		return $this;
	} // setAdelNum()

	/**
	 * Set the value of [revisado] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setRevisado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->revisado !== $v || $v === ' ') {
			$this->revisado = $v;
			$this->modifiedColumns[] = CobrosPeer::REVISADO;
		}

		return $this;
	} // setRevisado()

	/**
	 * Set the value of [trasnfe] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setTrasnfe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->trasnfe !== $v || $v === ' ') {
			$this->trasnfe = $v;
			$this->modifiedColumns[] = CobrosPeer::TRASNFE;
		}

		return $this;
	} // setTrasnfe()

	/**
	 * Set the value of [co_sucu] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setCoSucu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_sucu !== $v || $v === ' ') {
			$this->co_sucu = $v;
			$this->modifiedColumns[] = CobrosPeer::CO_SUCU;
		}

		if ($this->aAlmacen !== null && $this->aAlmacen->getCoAlma() !== $v) {
			$this->aAlmacen = null;
		}

		return $this;
	} // setCoSucu()

	/**
	 * Set the value of [rowguid] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setRowguid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowguid !== $v || $v === '(newid())') {
			$this->rowguid = $v;
			$this->modifiedColumns[] = CobrosPeer::ROWGUID;
		}

		return $this;
	} // setRowguid()

	/**
	 * Set the value of [descrip] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setDescrip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descrip !== $v || $v === ' ') {
			$this->descrip = $v;
			$this->modifiedColumns[] = CobrosPeer::DESCRIP;
		}

		return $this;
	} // setDescrip()

	/**
	 * Set the value of [num_dev] column.
	 * 
	 * @param      int $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setNumDev($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->num_dev !== $v || $v === 0) {
			$this->num_dev = $v;
			$this->modifiedColumns[] = CobrosPeer::NUM_DEV;
		}

		return $this;
	} // setNumDev()

	/**
	 * Set the value of [devdinero] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setDevdinero($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->devdinero !== $v || $v === false) {
			$this->devdinero = $v;
			$this->modifiedColumns[] = CobrosPeer::DEVDINERO;
		}

		return $this;
	} // setDevdinero()

	/**
	 * Set the value of [num_turno] column.
	 * 
	 * @param      int $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setNumTurno($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->num_turno !== $v || $v === 0) {
			$this->num_turno = $v;
			$this->modifiedColumns[] = CobrosPeer::NUM_TURNO;
		}

		return $this;
	} // setNumTurno()

	/**
	 * Set the value of [aux01] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setAux01($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aux01 !== $v || $v === '0') {
			$this->aux01 = $v;
			$this->modifiedColumns[] = CobrosPeer::AUX01;
		}

		return $this;
	} // setAux01()

	/**
	 * Set the value of [aux02] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setAux02($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aux02 !== $v || $v === ' ') {
			$this->aux02 = $v;
			$this->modifiedColumns[] = CobrosPeer::AUX02;
		}

		return $this;
	} // setAux02()

	/**
	 * Set the value of [origen] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setOrigen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->origen !== $v || $v === ' ') {
			$this->origen = $v;
			$this->modifiedColumns[] = CobrosPeer::ORIGEN;
		}

		return $this;
	} // setOrigen()

	/**
	 * Set the value of [origen_d] column.
	 * 
	 * @param      string $v new value
	 * @return     Cobros The current object (for fluent API support)
	 */
	public function setOrigenD($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->origen_d !== $v || $v === ' ') {
			$this->origen_d = $v;
			$this->modifiedColumns[] = CobrosPeer::ORIGEN_D;
		}

		return $this;
	} // setOrigenD()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(CobrosPeer::RECIBO,CobrosPeer::CO_CLI,CobrosPeer::CO_VEN,CobrosPeer::ANULADO,CobrosPeer::MONTO,CobrosPeer::DPPAGO,CobrosPeer::MONT_NCR,CobrosPeer::NCR,CobrosPeer::TCOMI_PORC,CobrosPeer::TCOMI_LINE,CobrosPeer::TCOMI_ART,CobrosPeer::TCOMI_CONC,CobrosPeer::TASA,CobrosPeer::MONEDA,CobrosPeer::NUMCOM,CobrosPeer::DIS_CEN,CobrosPeer::CAMPO1,CobrosPeer::CAMPO2,CobrosPeer::CAMPO3,CobrosPeer::CAMPO4,CobrosPeer::CAMPO5,CobrosPeer::CAMPO6,CobrosPeer::CAMPO7,CobrosPeer::CAMPO8,CobrosPeer::CO_US_IN,CobrosPeer::CO_US_MO,CobrosPeer::CO_US_EL,CobrosPeer::RECARGO,CobrosPeer::ADEL_NUM,CobrosPeer::REVISADO,CobrosPeer::TRASNFE,CobrosPeer::CO_SUCU,CobrosPeer::ROWGUID,CobrosPeer::DESCRIP,CobrosPeer::NUM_DEV,CobrosPeer::DEVDINERO,CobrosPeer::NUM_TURNO,CobrosPeer::AUX01,CobrosPeer::AUX02,CobrosPeer::ORIGEN,CobrosPeer::ORIGEN_D))) {
				return false;
			}

			if ($this->recibo !== ' ') {
				return false;
			}

			if ($this->co_cli !== ' ') {
				return false;
			}

			if ($this->co_ven !== ' ') {
				return false;
			}

			if ($this->anulado !== false) {
				return false;
			}

			if ($this->monto !== '0') {
				return false;
			}

			if ($this->dppago !== '0') {
				return false;
			}

			if ($this->mont_ncr !== '0') {
				return false;
			}

			if ($this->ncr !== 0) {
				return false;
			}

			if ($this->tcomi_porc !== '0') {
				return false;
			}

			if ($this->tcomi_line !== '0') {
				return false;
			}

			if ($this->tcomi_art !== '0') {
				return false;
			}

			if ($this->tcomi_conc !== '0') {
				return false;
			}

			if ($this->tasa !== '1') {
				return false;
			}

			if ($this->moneda !== ' ') {
				return false;
			}

			if ($this->numcom !== 0) {
				return false;
			}

			if ($this->dis_cen !== ' ') {
				return false;
			}

			if ($this->campo1 !== ' ') {
				return false;
			}

			if ($this->campo2 !== ' ') {
				return false;
			}

			if ($this->campo3 !== ' ') {
				return false;
			}

			if ($this->campo4 !== ' ') {
				return false;
			}

			if ($this->campo5 !== ' ') {
				return false;
			}

			if ($this->campo6 !== ' ') {
				return false;
			}

			if ($this->campo7 !== ' ') {
				return false;
			}

			if ($this->campo8 !== ' ') {
				return false;
			}

			if ($this->co_us_in !== ' ') {
				return false;
			}

			if ($this->co_us_mo !== ' ') {
				return false;
			}

			if ($this->co_us_el !== ' ') {
				return false;
			}

			if ($this->recargo !== false) {
				return false;
			}

			if ($this->adel_num !== 0) {
				return false;
			}

			if ($this->revisado !== ' ') {
				return false;
			}

			if ($this->trasnfe !== ' ') {
				return false;
			}

			if ($this->co_sucu !== ' ') {
				return false;
			}

			if ($this->rowguid !== '(newid())') {
				return false;
			}

			if ($this->descrip !== ' ') {
				return false;
			}

			if ($this->num_dev !== 0) {
				return false;
			}

			if ($this->devdinero !== false) {
				return false;
			}

			if ($this->num_turno !== 0) {
				return false;
			}

			if ($this->aux01 !== '0') {
				return false;
			}

			if ($this->aux02 !== ' ') {
				return false;
			}

			if ($this->origen !== ' ') {
				return false;
			}

			if ($this->origen_d !== ' ') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cob_num = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->recibo = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->co_cli = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->co_ven = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->fec_cob = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->anulado = ($row[$startcol + 5] !== null) ? (boolean) $row[$startcol + 5] : null;
			$this->monto = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->dppago = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->mont_ncr = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->ncr = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->tcomi_porc = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->tcomi_line = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->tcomi_art = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->tcomi_conc = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->feccom = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->tasa = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->moneda = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->numcom = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->dis_cen = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->campo1 = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->campo2 = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->campo3 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->campo4 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->campo5 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->campo6 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->campo7 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->campo8 = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->co_us_in = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->fe_us_in = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->co_us_mo = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->fe_us_mo = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->co_us_el = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->fe_us_el = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->recargo = ($row[$startcol + 33] !== null) ? (boolean) $row[$startcol + 33] : null;
			$this->adel_num = ($row[$startcol + 34] !== null) ? (int) $row[$startcol + 34] : null;
			$this->revisado = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->trasnfe = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->co_sucu = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->rowguid = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->descrip = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->num_dev = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
			$this->devdinero = ($row[$startcol + 41] !== null) ? (boolean) $row[$startcol + 41] : null;
			$this->num_turno = ($row[$startcol + 42] !== null) ? (int) $row[$startcol + 42] : null;
			$this->aux01 = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->aux02 = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->origen = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->origen_d = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 47; // 47 = CobrosPeer::NUM_COLUMNS - CobrosPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Cobros object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aClientes !== null && $this->co_cli !== $this->aClientes->getCoCli()) {
			$this->aClientes = null;
		}
		if ($this->aVendedor !== null && $this->co_ven !== $this->aVendedor->getCoVen()) {
			$this->aVendedor = null;
		}
		if ($this->aMonedaRelatedByMoneda !== null && $this->moneda !== $this->aMonedaRelatedByMoneda->getCoMone()) {
			$this->aMonedaRelatedByMoneda = null;
		}
		if ($this->aAlmacen !== null && $this->co_sucu !== $this->aAlmacen->getCoAlma()) {
			$this->aAlmacen = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CobrosPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CobrosPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aClientes = null;
			$this->aVendedor = null;
			$this->aMonedaRelatedByMoneda = null;
			$this->aAlmacen = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCobros:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CobrosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CobrosPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCobros:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCobros:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CobrosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCobros:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CobrosPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aClientes !== null) {
				if ($this->aClientes->isModified() || $this->aClientes->isNew()) {
					$affectedRows += $this->aClientes->save($con);
				}
				$this->setClientes($this->aClientes);
			}

			if ($this->aVendedor !== null) {
				if ($this->aVendedor->isModified() || $this->aVendedor->isNew()) {
					$affectedRows += $this->aVendedor->save($con);
				}
				$this->setVendedor($this->aVendedor);
			}

			if ($this->aMonedaRelatedByMoneda !== null) {
				if ($this->aMonedaRelatedByMoneda->isModified() || $this->aMonedaRelatedByMoneda->isNew()) {
					$affectedRows += $this->aMonedaRelatedByMoneda->save($con);
				}
				$this->setMonedaRelatedByMoneda($this->aMonedaRelatedByMoneda);
			}

			if ($this->aAlmacen !== null) {
				if ($this->aAlmacen->isModified() || $this->aAlmacen->isNew()) {
					$affectedRows += $this->aAlmacen->save($con);
				}
				$this->setAlmacen($this->aAlmacen);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CobrosPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += CobrosPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aClientes !== null) {
				if (!$this->aClientes->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aClientes->getValidationFailures());
				}
			}

			if ($this->aVendedor !== null) {
				if (!$this->aVendedor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aVendedor->getValidationFailures());
				}
			}

			if ($this->aMonedaRelatedByMoneda !== null) {
				if (!$this->aMonedaRelatedByMoneda->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMonedaRelatedByMoneda->getValidationFailures());
				}
			}

			if ($this->aAlmacen !== null) {
				if (!$this->aAlmacen->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlmacen->getValidationFailures());
				}
			}


			if (($retval = CobrosPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CobrosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCobNum();
				break;
			case 1:
				return $this->getRecibo();
				break;
			case 2:
				return $this->getCoCli();
				break;
			case 3:
				return $this->getCoVen();
				break;
			case 4:
				return $this->getFecCob();
				break;
			case 5:
				return $this->getAnulado();
				break;
			case 6:
				return $this->getMonto();
				break;
			case 7:
				return $this->getDppago();
				break;
			case 8:
				return $this->getMontNcr();
				break;
			case 9:
				return $this->getNcr();
				break;
			case 10:
				return $this->getTcomiPorc();
				break;
			case 11:
				return $this->getTcomiLine();
				break;
			case 12:
				return $this->getTcomiArt();
				break;
			case 13:
				return $this->getTcomiConc();
				break;
			case 14:
				return $this->getFeccom();
				break;
			case 15:
				return $this->getTasa();
				break;
			case 16:
				return $this->getMoneda();
				break;
			case 17:
				return $this->getNumcom();
				break;
			case 18:
				return $this->getDisCen();
				break;
			case 19:
				return $this->getCampo1();
				break;
			case 20:
				return $this->getCampo2();
				break;
			case 21:
				return $this->getCampo3();
				break;
			case 22:
				return $this->getCampo4();
				break;
			case 23:
				return $this->getCampo5();
				break;
			case 24:
				return $this->getCampo6();
				break;
			case 25:
				return $this->getCampo7();
				break;
			case 26:
				return $this->getCampo8();
				break;
			case 27:
				return $this->getCoUsIn();
				break;
			case 28:
				return $this->getFeUsIn();
				break;
			case 29:
				return $this->getCoUsMo();
				break;
			case 30:
				return $this->getFeUsMo();
				break;
			case 31:
				return $this->getCoUsEl();
				break;
			case 32:
				return $this->getFeUsEl();
				break;
			case 33:
				return $this->getRecargo();
				break;
			case 34:
				return $this->getAdelNum();
				break;
			case 35:
				return $this->getRevisado();
				break;
			case 36:
				return $this->getTrasnfe();
				break;
			case 37:
				return $this->getCoSucu();
				break;
			case 38:
				return $this->getRowguid();
				break;
			case 39:
				return $this->getDescrip();
				break;
			case 40:
				return $this->getNumDev();
				break;
			case 41:
				return $this->getDevdinero();
				break;
			case 42:
				return $this->getNumTurno();
				break;
			case 43:
				return $this->getAux01();
				break;
			case 44:
				return $this->getAux02();
				break;
			case 45:
				return $this->getOrigen();
				break;
			case 46:
				return $this->getOrigenD();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CobrosPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCobNum(),
			$keys[1] => $this->getRecibo(),
			$keys[2] => $this->getCoCli(),
			$keys[3] => $this->getCoVen(),
			$keys[4] => $this->getFecCob(),
			$keys[5] => $this->getAnulado(),
			$keys[6] => $this->getMonto(),
			$keys[7] => $this->getDppago(),
			$keys[8] => $this->getMontNcr(),
			$keys[9] => $this->getNcr(),
			$keys[10] => $this->getTcomiPorc(),
			$keys[11] => $this->getTcomiLine(),
			$keys[12] => $this->getTcomiArt(),
			$keys[13] => $this->getTcomiConc(),
			$keys[14] => $this->getFeccom(),
			$keys[15] => $this->getTasa(),
			$keys[16] => $this->getMoneda(),
			$keys[17] => $this->getNumcom(),
			$keys[18] => $this->getDisCen(),
			$keys[19] => $this->getCampo1(),
			$keys[20] => $this->getCampo2(),
			$keys[21] => $this->getCampo3(),
			$keys[22] => $this->getCampo4(),
			$keys[23] => $this->getCampo5(),
			$keys[24] => $this->getCampo6(),
			$keys[25] => $this->getCampo7(),
			$keys[26] => $this->getCampo8(),
			$keys[27] => $this->getCoUsIn(),
			$keys[28] => $this->getFeUsIn(),
			$keys[29] => $this->getCoUsMo(),
			$keys[30] => $this->getFeUsMo(),
			$keys[31] => $this->getCoUsEl(),
			$keys[32] => $this->getFeUsEl(),
			$keys[33] => $this->getRecargo(),
			$keys[34] => $this->getAdelNum(),
			$keys[35] => $this->getRevisado(),
			$keys[36] => $this->getTrasnfe(),
			$keys[37] => $this->getCoSucu(),
			$keys[38] => $this->getRowguid(),
			$keys[39] => $this->getDescrip(),
			$keys[40] => $this->getNumDev(),
			$keys[41] => $this->getDevdinero(),
			$keys[42] => $this->getNumTurno(),
			$keys[43] => $this->getAux01(),
			$keys[44] => $this->getAux02(),
			$keys[45] => $this->getOrigen(),
			$keys[46] => $this->getOrigenD(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CobrosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCobNum($value);
				break;
			case 1:
				$this->setRecibo($value);
				break;
			case 2:
				$this->setCoCli($value);
				break;
			case 3:
				$this->setCoVen($value);
				break;
			case 4:
				$this->setFecCob($value);
				break;
			case 5:
				$this->setAnulado($value);
				break;
			case 6:
				$this->setMonto($value);
				break;
			case 7:
				$this->setDppago($value);
				break;
			case 8:
				$this->setMontNcr($value);
				break;
			case 9:
				$this->setNcr($value);
				break;
			case 10:
				$this->setTcomiPorc($value);
				break;
			case 11:
				$this->setTcomiLine($value);
				break;
			case 12:
				$this->setTcomiArt($value);
				break;
			case 13:
				$this->setTcomiConc($value);
				break;
			case 14:
				$this->setFeccom($value);
				break;
			case 15:
				$this->setTasa($value);
				break;
			case 16:
				$this->setMoneda($value);
				break;
			case 17:
				$this->setNumcom($value);
				break;
			case 18:
				$this->setDisCen($value);
				break;
			case 19:
				$this->setCampo1($value);
				break;
			case 20:
				$this->setCampo2($value);
				break;
			case 21:
				$this->setCampo3($value);
				break;
			case 22:
				$this->setCampo4($value);
				break;
			case 23:
				$this->setCampo5($value);
				break;
			case 24:
				$this->setCampo6($value);
				break;
			case 25:
				$this->setCampo7($value);
				break;
			case 26:
				$this->setCampo8($value);
				break;
			case 27:
				$this->setCoUsIn($value);
				break;
			case 28:
				$this->setFeUsIn($value);
				break;
			case 29:
				$this->setCoUsMo($value);
				break;
			case 30:
				$this->setFeUsMo($value);
				break;
			case 31:
				$this->setCoUsEl($value);
				break;
			case 32:
				$this->setFeUsEl($value);
				break;
			case 33:
				$this->setRecargo($value);
				break;
			case 34:
				$this->setAdelNum($value);
				break;
			case 35:
				$this->setRevisado($value);
				break;
			case 36:
				$this->setTrasnfe($value);
				break;
			case 37:
				$this->setCoSucu($value);
				break;
			case 38:
				$this->setRowguid($value);
				break;
			case 39:
				$this->setDescrip($value);
				break;
			case 40:
				$this->setNumDev($value);
				break;
			case 41:
				$this->setDevdinero($value);
				break;
			case 42:
				$this->setNumTurno($value);
				break;
			case 43:
				$this->setAux01($value);
				break;
			case 44:
				$this->setAux02($value);
				break;
			case 45:
				$this->setOrigen($value);
				break;
			case 46:
				$this->setOrigenD($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CobrosPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCobNum($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setRecibo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCoCli($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCoVen($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFecCob($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAnulado($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMonto($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDppago($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMontNcr($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setNcr($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTcomiPorc($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setTcomiLine($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTcomiArt($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setTcomiConc($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setFeccom($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTasa($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMoneda($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setNumcom($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDisCen($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCampo1($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCampo2($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCampo3($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCampo4($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCampo5($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setCampo6($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setCampo7($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setCampo8($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCoUsIn($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setFeUsIn($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setCoUsMo($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setFeUsMo($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setCoUsEl($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setFeUsEl($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setRecargo($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setAdelNum($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setRevisado($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setTrasnfe($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setCoSucu($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setRowguid($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setDescrip($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setNumDev($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setDevdinero($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setNumTurno($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setAux01($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setAux02($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setOrigen($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setOrigenD($arr[$keys[46]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CobrosPeer::DATABASE_NAME);

		if ($this->isColumnModified(CobrosPeer::COB_NUM)) $criteria->add(CobrosPeer::COB_NUM, $this->cob_num);
		if ($this->isColumnModified(CobrosPeer::RECIBO)) $criteria->add(CobrosPeer::RECIBO, $this->recibo);
		if ($this->isColumnModified(CobrosPeer::CO_CLI)) $criteria->add(CobrosPeer::CO_CLI, $this->co_cli);
		if ($this->isColumnModified(CobrosPeer::CO_VEN)) $criteria->add(CobrosPeer::CO_VEN, $this->co_ven);
		if ($this->isColumnModified(CobrosPeer::FEC_COB)) $criteria->add(CobrosPeer::FEC_COB, $this->fec_cob);
		if ($this->isColumnModified(CobrosPeer::ANULADO)) $criteria->add(CobrosPeer::ANULADO, $this->anulado);
		if ($this->isColumnModified(CobrosPeer::MONTO)) $criteria->add(CobrosPeer::MONTO, $this->monto);
		if ($this->isColumnModified(CobrosPeer::DPPAGO)) $criteria->add(CobrosPeer::DPPAGO, $this->dppago);
		if ($this->isColumnModified(CobrosPeer::MONT_NCR)) $criteria->add(CobrosPeer::MONT_NCR, $this->mont_ncr);
		if ($this->isColumnModified(CobrosPeer::NCR)) $criteria->add(CobrosPeer::NCR, $this->ncr);
		if ($this->isColumnModified(CobrosPeer::TCOMI_PORC)) $criteria->add(CobrosPeer::TCOMI_PORC, $this->tcomi_porc);
		if ($this->isColumnModified(CobrosPeer::TCOMI_LINE)) $criteria->add(CobrosPeer::TCOMI_LINE, $this->tcomi_line);
		if ($this->isColumnModified(CobrosPeer::TCOMI_ART)) $criteria->add(CobrosPeer::TCOMI_ART, $this->tcomi_art);
		if ($this->isColumnModified(CobrosPeer::TCOMI_CONC)) $criteria->add(CobrosPeer::TCOMI_CONC, $this->tcomi_conc);
		if ($this->isColumnModified(CobrosPeer::FECCOM)) $criteria->add(CobrosPeer::FECCOM, $this->feccom);
		if ($this->isColumnModified(CobrosPeer::TASA)) $criteria->add(CobrosPeer::TASA, $this->tasa);
		if ($this->isColumnModified(CobrosPeer::MONEDA)) $criteria->add(CobrosPeer::MONEDA, $this->moneda);
		if ($this->isColumnModified(CobrosPeer::NUMCOM)) $criteria->add(CobrosPeer::NUMCOM, $this->numcom);
		if ($this->isColumnModified(CobrosPeer::DIS_CEN)) $criteria->add(CobrosPeer::DIS_CEN, $this->dis_cen);
		if ($this->isColumnModified(CobrosPeer::CAMPO1)) $criteria->add(CobrosPeer::CAMPO1, $this->campo1);
		if ($this->isColumnModified(CobrosPeer::CAMPO2)) $criteria->add(CobrosPeer::CAMPO2, $this->campo2);
		if ($this->isColumnModified(CobrosPeer::CAMPO3)) $criteria->add(CobrosPeer::CAMPO3, $this->campo3);
		if ($this->isColumnModified(CobrosPeer::CAMPO4)) $criteria->add(CobrosPeer::CAMPO4, $this->campo4);
		if ($this->isColumnModified(CobrosPeer::CAMPO5)) $criteria->add(CobrosPeer::CAMPO5, $this->campo5);
		if ($this->isColumnModified(CobrosPeer::CAMPO6)) $criteria->add(CobrosPeer::CAMPO6, $this->campo6);
		if ($this->isColumnModified(CobrosPeer::CAMPO7)) $criteria->add(CobrosPeer::CAMPO7, $this->campo7);
		if ($this->isColumnModified(CobrosPeer::CAMPO8)) $criteria->add(CobrosPeer::CAMPO8, $this->campo8);
		if ($this->isColumnModified(CobrosPeer::CO_US_IN)) $criteria->add(CobrosPeer::CO_US_IN, $this->co_us_in);
		if ($this->isColumnModified(CobrosPeer::FE_US_IN)) $criteria->add(CobrosPeer::FE_US_IN, $this->fe_us_in);
		if ($this->isColumnModified(CobrosPeer::CO_US_MO)) $criteria->add(CobrosPeer::CO_US_MO, $this->co_us_mo);
		if ($this->isColumnModified(CobrosPeer::FE_US_MO)) $criteria->add(CobrosPeer::FE_US_MO, $this->fe_us_mo);
		if ($this->isColumnModified(CobrosPeer::CO_US_EL)) $criteria->add(CobrosPeer::CO_US_EL, $this->co_us_el);
		if ($this->isColumnModified(CobrosPeer::FE_US_EL)) $criteria->add(CobrosPeer::FE_US_EL, $this->fe_us_el);
		if ($this->isColumnModified(CobrosPeer::RECARGO)) $criteria->add(CobrosPeer::RECARGO, $this->recargo);
		if ($this->isColumnModified(CobrosPeer::ADEL_NUM)) $criteria->add(CobrosPeer::ADEL_NUM, $this->adel_num);
		if ($this->isColumnModified(CobrosPeer::REVISADO)) $criteria->add(CobrosPeer::REVISADO, $this->revisado);
		if ($this->isColumnModified(CobrosPeer::TRASNFE)) $criteria->add(CobrosPeer::TRASNFE, $this->trasnfe);
		if ($this->isColumnModified(CobrosPeer::CO_SUCU)) $criteria->add(CobrosPeer::CO_SUCU, $this->co_sucu);
		if ($this->isColumnModified(CobrosPeer::ROWGUID)) $criteria->add(CobrosPeer::ROWGUID, $this->rowguid);
		if ($this->isColumnModified(CobrosPeer::DESCRIP)) $criteria->add(CobrosPeer::DESCRIP, $this->descrip);
		if ($this->isColumnModified(CobrosPeer::NUM_DEV)) $criteria->add(CobrosPeer::NUM_DEV, $this->num_dev);
		if ($this->isColumnModified(CobrosPeer::DEVDINERO)) $criteria->add(CobrosPeer::DEVDINERO, $this->devdinero);
		if ($this->isColumnModified(CobrosPeer::NUM_TURNO)) $criteria->add(CobrosPeer::NUM_TURNO, $this->num_turno);
		if ($this->isColumnModified(CobrosPeer::AUX01)) $criteria->add(CobrosPeer::AUX01, $this->aux01);
		if ($this->isColumnModified(CobrosPeer::AUX02)) $criteria->add(CobrosPeer::AUX02, $this->aux02);
		if ($this->isColumnModified(CobrosPeer::ORIGEN)) $criteria->add(CobrosPeer::ORIGEN, $this->origen);
		if ($this->isColumnModified(CobrosPeer::ORIGEN_D)) $criteria->add(CobrosPeer::ORIGEN_D, $this->origen_d);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CobrosPeer::DATABASE_NAME);

		$criteria->add(CobrosPeer::COB_NUM, $this->cob_num);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getCobNum();
	}

	/**
	 * Generic method to set the primary key (cob_num column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCobNum($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Cobros (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCobNum($this->cob_num);

		$copyObj->setRecibo($this->recibo);

		$copyObj->setCoCli($this->co_cli);

		$copyObj->setCoVen($this->co_ven);

		$copyObj->setFecCob($this->fec_cob);

		$copyObj->setAnulado($this->anulado);

		$copyObj->setMonto($this->monto);

		$copyObj->setDppago($this->dppago);

		$copyObj->setMontNcr($this->mont_ncr);

		$copyObj->setNcr($this->ncr);

		$copyObj->setTcomiPorc($this->tcomi_porc);

		$copyObj->setTcomiLine($this->tcomi_line);

		$copyObj->setTcomiArt($this->tcomi_art);

		$copyObj->setTcomiConc($this->tcomi_conc);

		$copyObj->setFeccom($this->feccom);

		$copyObj->setTasa($this->tasa);

		$copyObj->setMoneda($this->moneda);

		$copyObj->setNumcom($this->numcom);

		$copyObj->setDisCen($this->dis_cen);

		$copyObj->setCampo1($this->campo1);

		$copyObj->setCampo2($this->campo2);

		$copyObj->setCampo3($this->campo3);

		$copyObj->setCampo4($this->campo4);

		$copyObj->setCampo5($this->campo5);

		$copyObj->setCampo6($this->campo6);

		$copyObj->setCampo7($this->campo7);

		$copyObj->setCampo8($this->campo8);

		$copyObj->setCoUsIn($this->co_us_in);

		$copyObj->setFeUsIn($this->fe_us_in);

		$copyObj->setCoUsMo($this->co_us_mo);

		$copyObj->setFeUsMo($this->fe_us_mo);

		$copyObj->setCoUsEl($this->co_us_el);

		$copyObj->setFeUsEl($this->fe_us_el);

		$copyObj->setRecargo($this->recargo);

		$copyObj->setAdelNum($this->adel_num);

		$copyObj->setRevisado($this->revisado);

		$copyObj->setTrasnfe($this->trasnfe);

		$copyObj->setCoSucu($this->co_sucu);

		$copyObj->setRowguid($this->rowguid);

		$copyObj->setDescrip($this->descrip);

		$copyObj->setNumDev($this->num_dev);

		$copyObj->setDevdinero($this->devdinero);

		$copyObj->setNumTurno($this->num_turno);

		$copyObj->setAux01($this->aux01);

		$copyObj->setAux02($this->aux02);

		$copyObj->setOrigen($this->origen);

		$copyObj->setOrigenD($this->origen_d);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Cobros Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CobrosPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CobrosPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Clientes object.
	 *
	 * @param      Clientes $v
	 * @return     Cobros The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setClientes(Clientes $v = null)
	{
		if ($v === null) {
			$this->setCoCli(' ');
		} else {
			$this->setCoCli($v->getCoCli());
		}

		$this->aClientes = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Clientes object, it will not be re-added.
		if ($v !== null) {
			$v->addCobros($this);
		}

		return $this;
	}


	/**
	 * Get the associated Clientes object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Clientes The associated Clientes object.
	 * @throws     PropelException
	 */
	public function getClientes(PropelPDO $con = null)
	{
		if ($this->aClientes === null && (($this->co_cli !== "" && $this->co_cli !== null))) {
			$c = new Criteria(ClientesPeer::DATABASE_NAME);
			$c->add(ClientesPeer::CO_CLI, $this->co_cli);
			$this->aClientes = ClientesPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aClientes->addCobross($this);
			 */
		}
		return $this->aClientes;
	}

	/**
	 * Declares an association between this object and a Vendedor object.
	 *
	 * @param      Vendedor $v
	 * @return     Cobros The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setVendedor(Vendedor $v = null)
	{
		if ($v === null) {
			$this->setCoVen(' ');
		} else {
			$this->setCoVen($v->getCoVen());
		}

		$this->aVendedor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Vendedor object, it will not be re-added.
		if ($v !== null) {
			$v->addCobros($this);
		}

		return $this;
	}


	/**
	 * Get the associated Vendedor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Vendedor The associated Vendedor object.
	 * @throws     PropelException
	 */
	public function getVendedor(PropelPDO $con = null)
	{
		if ($this->aVendedor === null && (($this->co_ven !== "" && $this->co_ven !== null))) {
			$c = new Criteria(VendedorPeer::DATABASE_NAME);
			$c->add(VendedorPeer::CO_VEN, $this->co_ven);
			$this->aVendedor = VendedorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aVendedor->addCobross($this);
			 */
		}
		return $this->aVendedor;
	}

	/**
	 * Declares an association between this object and a Moneda object.
	 *
	 * @param      Moneda $v
	 * @return     Cobros The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMonedaRelatedByMoneda(Moneda $v = null)
	{
		if ($v === null) {
			$this->setMoneda(' ');
		} else {
			$this->setMoneda($v->getCoMone());
		}

		$this->aMonedaRelatedByMoneda = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Moneda object, it will not be re-added.
		if ($v !== null) {
			$v->addCobros($this);
		}

		return $this;
	}


	/**
	 * Get the associated Moneda object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Moneda The associated Moneda object.
	 * @throws     PropelException
	 */
	public function getMonedaRelatedByMoneda(PropelPDO $con = null)
	{
		if ($this->aMonedaRelatedByMoneda === null && (($this->moneda !== "" && $this->moneda !== null))) {
			$c = new Criteria(MonedaPeer::DATABASE_NAME);
			$c->add(MonedaPeer::CO_MONE, $this->moneda);
			$this->aMonedaRelatedByMoneda = MonedaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMonedaRelatedByMoneda->addCobross($this);
			 */
		}
		return $this->aMonedaRelatedByMoneda;
	}

	/**
	 * Declares an association between this object and a Almacen object.
	 *
	 * @param      Almacen $v
	 * @return     Cobros The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlmacen(Almacen $v = null)
	{
		if ($v === null) {
			$this->setCoSucu(' ');
		} else {
			$this->setCoSucu($v->getCoAlma());
		}

		$this->aAlmacen = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Almacen object, it will not be re-added.
		if ($v !== null) {
			$v->addCobros($this);
		}

		return $this;
	}


	/**
	 * Get the associated Almacen object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Almacen The associated Almacen object.
	 * @throws     PropelException
	 */
	public function getAlmacen(PropelPDO $con = null)
	{
		if ($this->aAlmacen === null && (($this->co_sucu !== "" && $this->co_sucu !== null))) {
			$c = new Criteria(AlmacenPeer::DATABASE_NAME);
			$c->add(AlmacenPeer::CO_ALMA, $this->co_sucu);
			$this->aAlmacen = AlmacenPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAlmacen->addCobross($this);
			 */
		}
		return $this->aAlmacen;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aClientes = null;
			$this->aVendedor = null;
			$this->aMonedaRelatedByMoneda = null;
			$this->aAlmacen = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCobros:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCobros::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCobros
