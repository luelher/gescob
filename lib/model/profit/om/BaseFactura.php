<?php

/**
 * Base class that represents a row from the 'factura' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Mar  9 02:09:51 2010
 *
 * @package    lib.model.profit.om
 */
abstract class BaseFactura extends BaseObject  implements Persistent {


  const PEER = 'FacturaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FacturaPeer
	 */
	protected static $peer;

	/**
	 * The value for the fact_num field.
	 * @var        int
	 */
	protected $fact_num;

	/**
	 * The value for the contrib field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $contrib;

	/**
	 * The value for the nombre field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the rif field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $rif;

	/**
	 * The value for the nit field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $nit;

	/**
	 * The value for the num_control field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $num_control;

	/**
	 * The value for the status field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $status;

	/**
	 * The value for the comentario field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $comentario;

	/**
	 * The value for the descrip field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $descrip;

	/**
	 * The value for the saldo field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $saldo;

	/**
	 * The value for the fec_emis field.
	 * @var        string
	 */
	protected $fec_emis;

	/**
	 * The value for the fec_venc field.
	 * @var        string
	 */
	protected $fec_venc;

	/**
	 * The value for the co_cli field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_cli;

	/**
	 * The value for the co_ven field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_ven;

	/**
	 * The value for the co_tran field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_tran;

	/**
	 * The value for the dir_ent field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $dir_ent;

	/**
	 * The value for the forma_pag field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $forma_pag;

	/**
	 * The value for the tot_bruto field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tot_bruto;

	/**
	 * The value for the tot_neto field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tot_neto;

	/**
	 * The value for the glob_desc field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $glob_desc;

	/**
	 * The value for the tot_reca field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tot_reca;

	/**
	 * The value for the porc_gdesc field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $porc_gdesc;

	/**
	 * The value for the porc_reca field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $porc_reca;

	/**
	 * The value for the total_uc field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $total_uc;

	/**
	 * The value for the total_cp field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $total_cp;

	/**
	 * The value for the tot_flete field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tot_flete;

	/**
	 * The value for the monto_dev field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_dev;

	/**
	 * The value for the totklu field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $totklu;

	/**
	 * The value for the anulada field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $anulada;

	/**
	 * The value for the impresa field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $impresa;

	/**
	 * The value for the iva field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $iva;

	/**
	 * The value for the iva_dev field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $iva_dev;

	/**
	 * The value for the numcom field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $numcom;

	/**
	 * The value for the tasa field.
	 * Note: this column has a database default value of: '1'
	 * @var        string
	 */
	protected $tasa;

	/**
	 * The value for the dis_cen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $dis_cen;

	/**
	 * The value for the vuelto field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $vuelto;

	/**
	 * The value for the seriales field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $seriales;

	/**
	 * The value for the tasag field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tasag;

	/**
	 * The value for the tasag10 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tasag10;

	/**
	 * The value for the tasag20 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $tasag20;

	/**
	 * The value for the id field.
	 * Note: this column has a database default value of: -1
	 * @var        int
	 */
	protected $id;

	/**
	 * @var        Clientes
	 */
	protected $aClientes;

	/**
	 * @var        Vendedor
	 */
	protected $aVendedor;

	/**
	 * @var        Transpor
	 */
	protected $aTranspor;

	/**
	 * @var        Condicio
	 */
	protected $aCondicio;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseFactura object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->contrib = false;
		$this->nombre = ' ';
		$this->rif = ' ';
		$this->nit = ' ';
		$this->num_control = 0;
		$this->status = ' ';
		$this->comentario = ' ';
		$this->descrip = ' ';
		$this->saldo = '0';
		$this->co_cli = ' ';
		$this->co_ven = ' ';
		$this->co_tran = ' ';
		$this->dir_ent = ' ';
		$this->forma_pag = ' ';
		$this->tot_bruto = '0';
		$this->tot_neto = '0';
		$this->glob_desc = '0';
		$this->tot_reca = '0';
		$this->porc_gdesc = ' ';
		$this->porc_reca = ' ';
		$this->total_uc = '0';
		$this->total_cp = '0';
		$this->tot_flete = '0';
		$this->monto_dev = '0';
		$this->totklu = '0';
		$this->anulada = false;
		$this->impresa = false;
		$this->iva = '0';
		$this->iva_dev = '0';
		$this->numcom = 0;
		$this->tasa = '1';
		$this->dis_cen = ' ';
		$this->vuelto = '0';
		$this->seriales = 0;
		$this->tasag = '0';
		$this->tasag10 = '0';
		$this->tasag20 = '0';
		$this->id = -1;
	}

	/**
	 * Get the [fact_num] column value.
	 * 
	 * @return     int
	 */
	public function getFactNum()
	{
		return $this->fact_num;
	}

	/**
	 * Get the [contrib] column value.
	 * 
	 * @return     boolean
	 */
	public function getContrib()
	{
		return $this->contrib;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [rif] column value.
	 * 
	 * @return     string
	 */
	public function getRif()
	{
		return $this->rif;
	}

	/**
	 * Get the [nit] column value.
	 * 
	 * @return     string
	 */
	public function getNit()
	{
		return $this->nit;
	}

	/**
	 * Get the [num_control] column value.
	 * 
	 * @return     int
	 */
	public function getNumControl()
	{
		return $this->num_control;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [comentario] column value.
	 * 
	 * @return     string
	 */
	public function getComentario()
	{
		return $this->comentario;
	}

	/**
	 * Get the [descrip] column value.
	 * 
	 * @return     string
	 */
	public function getDescrip()
	{
		return $this->descrip;
	}

	/**
	 * Get the [saldo] column value.
	 * 
	 * @return     string
	 */
	public function getSaldo()
	{
		return $this->saldo;
	}

	/**
	 * Get the [fec_emis] column value.
	 * 
	 * @return     string
	 */
	public function getFecEmis()
	{
		return $this->fec_emis;
	}

	/**
	 * Get the [fec_venc] column value.
	 * 
	 * @return     string
	 */
	public function getFecVenc()
	{
		return $this->fec_venc;
	}

	/**
	 * Get the [co_cli] column value.
	 * 
	 * @return     string
	 */
	public function getCoCli()
	{
		return $this->co_cli;
	}

	/**
	 * Get the [co_ven] column value.
	 * 
	 * @return     string
	 */
	public function getCoVen()
	{
		return $this->co_ven;
	}

	/**
	 * Get the [co_tran] column value.
	 * 
	 * @return     string
	 */
	public function getCoTran()
	{
		return $this->co_tran;
	}

	/**
	 * Get the [dir_ent] column value.
	 * 
	 * @return     string
	 */
	public function getDirEnt()
	{
		return $this->dir_ent;
	}

	/**
	 * Get the [forma_pag] column value.
	 * 
	 * @return     string
	 */
	public function getFormaPag()
	{
		return $this->forma_pag;
	}

	/**
	 * Get the [tot_bruto] column value.
	 * 
	 * @return     string
	 */
	public function getTotBruto()
	{
		return $this->tot_bruto;
	}

	/**
	 * Get the [tot_neto] column value.
	 * 
	 * @return     string
	 */
	public function getTotNeto()
	{
		return $this->tot_neto;
	}

	/**
	 * Get the [glob_desc] column value.
	 * 
	 * @return     string
	 */
	public function getGlobDesc()
	{
		return $this->glob_desc;
	}

	/**
	 * Get the [tot_reca] column value.
	 * 
	 * @return     string
	 */
	public function getTotReca()
	{
		return $this->tot_reca;
	}

	/**
	 * Get the [porc_gdesc] column value.
	 * 
	 * @return     string
	 */
	public function getPorcGdesc()
	{
		return $this->porc_gdesc;
	}

	/**
	 * Get the [porc_reca] column value.
	 * 
	 * @return     string
	 */
	public function getPorcReca()
	{
		return $this->porc_reca;
	}

	/**
	 * Get the [total_uc] column value.
	 * 
	 * @return     string
	 */
	public function getTotalUc()
	{
		return $this->total_uc;
	}

	/**
	 * Get the [total_cp] column value.
	 * 
	 * @return     string
	 */
	public function getTotalCp()
	{
		return $this->total_cp;
	}

	/**
	 * Get the [tot_flete] column value.
	 * 
	 * @return     string
	 */
	public function getTotFlete()
	{
		return $this->tot_flete;
	}

	/**
	 * Get the [monto_dev] column value.
	 * 
	 * @return     string
	 */
	public function getMontoDev()
	{
		return $this->monto_dev;
	}

	/**
	 * Get the [totklu] column value.
	 * 
	 * @return     string
	 */
	public function getTotklu()
	{
		return $this->totklu;
	}

	/**
	 * Get the [anulada] column value.
	 * 
	 * @return     boolean
	 */
	public function getAnulada()
	{
		return $this->anulada;
	}

	/**
	 * Get the [impresa] column value.
	 * 
	 * @return     boolean
	 */
	public function getImpresa()
	{
		return $this->impresa;
	}

	/**
	 * Get the [iva] column value.
	 * 
	 * @return     string
	 */
	public function getIva()
	{
		return $this->iva;
	}

	/**
	 * Get the [iva_dev] column value.
	 * 
	 * @return     string
	 */
	public function getIvaDev()
	{
		return $this->iva_dev;
	}

	/**
	 * Get the [numcom] column value.
	 * 
	 * @return     int
	 */
	public function getNumcom()
	{
		return $this->numcom;
	}

	/**
	 * Get the [tasa] column value.
	 * 
	 * @return     string
	 */
	public function getTasa()
	{
		return $this->tasa;
	}

	/**
	 * Get the [dis_cen] column value.
	 * 
	 * @return     string
	 */
	public function getDisCen()
	{
		return $this->dis_cen;
	}

	/**
	 * Get the [vuelto] column value.
	 * 
	 * @return     string
	 */
	public function getVuelto()
	{
		return $this->vuelto;
	}

	/**
	 * Get the [seriales] column value.
	 * 
	 * @return     int
	 */
	public function getSeriales()
	{
		return $this->seriales;
	}

	/**
	 * Get the [tasag] column value.
	 * 
	 * @return     string
	 */
	public function getTasag()
	{
		return $this->tasag;
	}

	/**
	 * Get the [tasag10] column value.
	 * 
	 * @return     string
	 */
	public function getTasag10()
	{
		return $this->tasag10;
	}

	/**
	 * Get the [tasag20] column value.
	 * 
	 * @return     string
	 */
	public function getTasag20()
	{
		return $this->tasag20;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [fact_num] column.
	 * 
	 * @param      int $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setFactNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fact_num !== $v) {
			$this->fact_num = $v;
			$this->modifiedColumns[] = FacturaPeer::FACT_NUM;
		}

		return $this;
	} // setFactNum()

	/**
	 * Set the value of [contrib] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setContrib($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->contrib !== $v || $v === false) {
			$this->contrib = $v;
			$this->modifiedColumns[] = FacturaPeer::CONTRIB;
		}

		return $this;
	} // setContrib()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v || $v === ' ') {
			$this->nombre = $v;
			$this->modifiedColumns[] = FacturaPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [rif] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setRif($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rif !== $v || $v === ' ') {
			$this->rif = $v;
			$this->modifiedColumns[] = FacturaPeer::RIF;
		}

		return $this;
	} // setRif()

	/**
	 * Set the value of [nit] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setNit($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nit !== $v || $v === ' ') {
			$this->nit = $v;
			$this->modifiedColumns[] = FacturaPeer::NIT;
		}

		return $this;
	} // setNit()

	/**
	 * Set the value of [num_control] column.
	 * 
	 * @param      int $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setNumControl($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->num_control !== $v || $v === 0) {
			$this->num_control = $v;
			$this->modifiedColumns[] = FacturaPeer::NUM_CONTROL;
		}

		return $this;
	} // setNumControl()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v || $v === ' ') {
			$this->status = $v;
			$this->modifiedColumns[] = FacturaPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [comentario] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setComentario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comentario !== $v || $v === ' ') {
			$this->comentario = $v;
			$this->modifiedColumns[] = FacturaPeer::COMENTARIO;
		}

		return $this;
	} // setComentario()

	/**
	 * Set the value of [descrip] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setDescrip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descrip !== $v || $v === ' ') {
			$this->descrip = $v;
			$this->modifiedColumns[] = FacturaPeer::DESCRIP;
		}

		return $this;
	} // setDescrip()

	/**
	 * Set the value of [saldo] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setSaldo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->saldo !== $v || $v === '0') {
			$this->saldo = $v;
			$this->modifiedColumns[] = FacturaPeer::SALDO;
		}

		return $this;
	} // setSaldo()

	/**
	 * Set the value of [fec_emis] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setFecEmis($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_emis !== $v) {
			$this->fec_emis = $v;
			$this->modifiedColumns[] = FacturaPeer::FEC_EMIS;
		}

		return $this;
	} // setFecEmis()

	/**
	 * Set the value of [fec_venc] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setFecVenc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_venc !== $v) {
			$this->fec_venc = $v;
			$this->modifiedColumns[] = FacturaPeer::FEC_VENC;
		}

		return $this;
	} // setFecVenc()

	/**
	 * Set the value of [co_cli] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setCoCli($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_cli !== $v || $v === ' ') {
			$this->co_cli = $v;
			$this->modifiedColumns[] = FacturaPeer::CO_CLI;
		}

		if ($this->aClientes !== null && $this->aClientes->getCoCli() !== $v) {
			$this->aClientes = null;
		}

		return $this;
	} // setCoCli()

	/**
	 * Set the value of [co_ven] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setCoVen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_ven !== $v || $v === ' ') {
			$this->co_ven = $v;
			$this->modifiedColumns[] = FacturaPeer::CO_VEN;
		}

		if ($this->aVendedor !== null && $this->aVendedor->getCoVen() !== $v) {
			$this->aVendedor = null;
		}

		return $this;
	} // setCoVen()

	/**
	 * Set the value of [co_tran] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setCoTran($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_tran !== $v || $v === ' ') {
			$this->co_tran = $v;
			$this->modifiedColumns[] = FacturaPeer::CO_TRAN;
		}

		if ($this->aTranspor !== null && $this->aTranspor->getCoTran() !== $v) {
			$this->aTranspor = null;
		}

		return $this;
	} // setCoTran()

	/**
	 * Set the value of [dir_ent] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setDirEnt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dir_ent !== $v || $v === ' ') {
			$this->dir_ent = $v;
			$this->modifiedColumns[] = FacturaPeer::DIR_ENT;
		}

		return $this;
	} // setDirEnt()

	/**
	 * Set the value of [forma_pag] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setFormaPag($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->forma_pag !== $v || $v === ' ') {
			$this->forma_pag = $v;
			$this->modifiedColumns[] = FacturaPeer::FORMA_PAG;
		}

		if ($this->aCondicio !== null && $this->aCondicio->getCoCond() !== $v) {
			$this->aCondicio = null;
		}

		return $this;
	} // setFormaPag()

	/**
	 * Set the value of [tot_bruto] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTotBruto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tot_bruto !== $v || $v === '0') {
			$this->tot_bruto = $v;
			$this->modifiedColumns[] = FacturaPeer::TOT_BRUTO;
		}

		return $this;
	} // setTotBruto()

	/**
	 * Set the value of [tot_neto] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTotNeto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tot_neto !== $v || $v === '0') {
			$this->tot_neto = $v;
			$this->modifiedColumns[] = FacturaPeer::TOT_NETO;
		}

		return $this;
	} // setTotNeto()

	/**
	 * Set the value of [glob_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setGlobDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->glob_desc !== $v || $v === '0') {
			$this->glob_desc = $v;
			$this->modifiedColumns[] = FacturaPeer::GLOB_DESC;
		}

		return $this;
	} // setGlobDesc()

	/**
	 * Set the value of [tot_reca] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTotReca($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tot_reca !== $v || $v === '0') {
			$this->tot_reca = $v;
			$this->modifiedColumns[] = FacturaPeer::TOT_RECA;
		}

		return $this;
	} // setTotReca()

	/**
	 * Set the value of [porc_gdesc] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setPorcGdesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->porc_gdesc !== $v || $v === ' ') {
			$this->porc_gdesc = $v;
			$this->modifiedColumns[] = FacturaPeer::PORC_GDESC;
		}

		return $this;
	} // setPorcGdesc()

	/**
	 * Set the value of [porc_reca] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setPorcReca($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->porc_reca !== $v || $v === ' ') {
			$this->porc_reca = $v;
			$this->modifiedColumns[] = FacturaPeer::PORC_RECA;
		}

		return $this;
	} // setPorcReca()

	/**
	 * Set the value of [total_uc] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTotalUc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->total_uc !== $v || $v === '0') {
			$this->total_uc = $v;
			$this->modifiedColumns[] = FacturaPeer::TOTAL_UC;
		}

		return $this;
	} // setTotalUc()

	/**
	 * Set the value of [total_cp] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTotalCp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->total_cp !== $v || $v === '0') {
			$this->total_cp = $v;
			$this->modifiedColumns[] = FacturaPeer::TOTAL_CP;
		}

		return $this;
	} // setTotalCp()

	/**
	 * Set the value of [tot_flete] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTotFlete($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tot_flete !== $v || $v === '0') {
			$this->tot_flete = $v;
			$this->modifiedColumns[] = FacturaPeer::TOT_FLETE;
		}

		return $this;
	} // setTotFlete()

	/**
	 * Set the value of [monto_dev] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setMontoDev($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_dev !== $v || $v === '0') {
			$this->monto_dev = $v;
			$this->modifiedColumns[] = FacturaPeer::MONTO_DEV;
		}

		return $this;
	} // setMontoDev()

	/**
	 * Set the value of [totklu] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTotklu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->totklu !== $v || $v === '0') {
			$this->totklu = $v;
			$this->modifiedColumns[] = FacturaPeer::TOTKLU;
		}

		return $this;
	} // setTotklu()

	/**
	 * Set the value of [anulada] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setAnulada($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->anulada !== $v || $v === false) {
			$this->anulada = $v;
			$this->modifiedColumns[] = FacturaPeer::ANULADA;
		}

		return $this;
	} // setAnulada()

	/**
	 * Set the value of [impresa] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setImpresa($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->impresa !== $v || $v === false) {
			$this->impresa = $v;
			$this->modifiedColumns[] = FacturaPeer::IMPRESA;
		}

		return $this;
	} // setImpresa()

	/**
	 * Set the value of [iva] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setIva($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->iva !== $v || $v === '0') {
			$this->iva = $v;
			$this->modifiedColumns[] = FacturaPeer::IVA;
		}

		return $this;
	} // setIva()

	/**
	 * Set the value of [iva_dev] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setIvaDev($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->iva_dev !== $v || $v === '0') {
			$this->iva_dev = $v;
			$this->modifiedColumns[] = FacturaPeer::IVA_DEV;
		}

		return $this;
	} // setIvaDev()

	/**
	 * Set the value of [numcom] column.
	 * 
	 * @param      int $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setNumcom($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->numcom !== $v || $v === 0) {
			$this->numcom = $v;
			$this->modifiedColumns[] = FacturaPeer::NUMCOM;
		}

		return $this;
	} // setNumcom()

	/**
	 * Set the value of [tasa] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTasa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tasa !== $v || $v === '1') {
			$this->tasa = $v;
			$this->modifiedColumns[] = FacturaPeer::TASA;
		}

		return $this;
	} // setTasa()

	/**
	 * Set the value of [dis_cen] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setDisCen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dis_cen !== $v || $v === ' ') {
			$this->dis_cen = $v;
			$this->modifiedColumns[] = FacturaPeer::DIS_CEN;
		}

		return $this;
	} // setDisCen()

	/**
	 * Set the value of [vuelto] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setVuelto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vuelto !== $v || $v === '0') {
			$this->vuelto = $v;
			$this->modifiedColumns[] = FacturaPeer::VUELTO;
		}

		return $this;
	} // setVuelto()

	/**
	 * Set the value of [seriales] column.
	 * 
	 * @param      int $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setSeriales($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->seriales !== $v || $v === 0) {
			$this->seriales = $v;
			$this->modifiedColumns[] = FacturaPeer::SERIALES;
		}

		return $this;
	} // setSeriales()

	/**
	 * Set the value of [tasag] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTasag($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tasag !== $v || $v === '0') {
			$this->tasag = $v;
			$this->modifiedColumns[] = FacturaPeer::TASAG;
		}

		return $this;
	} // setTasag()

	/**
	 * Set the value of [tasag10] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTasag10($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tasag10 !== $v || $v === '0') {
			$this->tasag10 = $v;
			$this->modifiedColumns[] = FacturaPeer::TASAG10;
		}

		return $this;
	} // setTasag10()

	/**
	 * Set the value of [tasag20] column.
	 * 
	 * @param      string $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setTasag20($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tasag20 !== $v || $v === '0') {
			$this->tasag20 = $v;
			$this->modifiedColumns[] = FacturaPeer::TASAG20;
		}

		return $this;
	} // setTasag20()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Factura The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v || $v === -1) {
			$this->id = $v;
			$this->modifiedColumns[] = FacturaPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(FacturaPeer::CONTRIB,FacturaPeer::NOMBRE,FacturaPeer::RIF,FacturaPeer::NIT,FacturaPeer::NUM_CONTROL,FacturaPeer::STATUS,FacturaPeer::COMENTARIO,FacturaPeer::DESCRIP,FacturaPeer::SALDO,FacturaPeer::CO_CLI,FacturaPeer::CO_VEN,FacturaPeer::CO_TRAN,FacturaPeer::DIR_ENT,FacturaPeer::FORMA_PAG,FacturaPeer::TOT_BRUTO,FacturaPeer::TOT_NETO,FacturaPeer::GLOB_DESC,FacturaPeer::TOT_RECA,FacturaPeer::PORC_GDESC,FacturaPeer::PORC_RECA,FacturaPeer::TOTAL_UC,FacturaPeer::TOTAL_CP,FacturaPeer::TOT_FLETE,FacturaPeer::MONTO_DEV,FacturaPeer::TOTKLU,FacturaPeer::ANULADA,FacturaPeer::IMPRESA,FacturaPeer::IVA,FacturaPeer::IVA_DEV,FacturaPeer::NUMCOM,FacturaPeer::TASA,FacturaPeer::DIS_CEN,FacturaPeer::VUELTO,FacturaPeer::SERIALES,FacturaPeer::TASAG,FacturaPeer::TASAG10,FacturaPeer::TASAG20,FacturaPeer::ID))) {
				return false;
			}

			if ($this->contrib !== false) {
				return false;
			}

			if ($this->nombre !== ' ') {
				return false;
			}

			if ($this->rif !== ' ') {
				return false;
			}

			if ($this->nit !== ' ') {
				return false;
			}

			if ($this->num_control !== 0) {
				return false;
			}

			if ($this->status !== ' ') {
				return false;
			}

			if ($this->comentario !== ' ') {
				return false;
			}

			if ($this->descrip !== ' ') {
				return false;
			}

			if ($this->saldo !== '0') {
				return false;
			}

			if ($this->co_cli !== ' ') {
				return false;
			}

			if ($this->co_ven !== ' ') {
				return false;
			}

			if ($this->co_tran !== ' ') {
				return false;
			}

			if ($this->dir_ent !== ' ') {
				return false;
			}

			if ($this->forma_pag !== ' ') {
				return false;
			}

			if ($this->tot_bruto !== '0') {
				return false;
			}

			if ($this->tot_neto !== '0') {
				return false;
			}

			if ($this->glob_desc !== '0') {
				return false;
			}

			if ($this->tot_reca !== '0') {
				return false;
			}

			if ($this->porc_gdesc !== ' ') {
				return false;
			}

			if ($this->porc_reca !== ' ') {
				return false;
			}

			if ($this->total_uc !== '0') {
				return false;
			}

			if ($this->total_cp !== '0') {
				return false;
			}

			if ($this->tot_flete !== '0') {
				return false;
			}

			if ($this->monto_dev !== '0') {
				return false;
			}

			if ($this->totklu !== '0') {
				return false;
			}

			if ($this->anulada !== false) {
				return false;
			}

			if ($this->impresa !== false) {
				return false;
			}

			if ($this->iva !== '0') {
				return false;
			}

			if ($this->iva_dev !== '0') {
				return false;
			}

			if ($this->numcom !== 0) {
				return false;
			}

			if ($this->tasa !== '1') {
				return false;
			}

			if ($this->dis_cen !== ' ') {
				return false;
			}

			if ($this->vuelto !== '0') {
				return false;
			}

			if ($this->seriales !== 0) {
				return false;
			}

			if ($this->tasag !== '0') {
				return false;
			}

			if ($this->tasag10 !== '0') {
				return false;
			}

			if ($this->tasag20 !== '0') {
				return false;
			}

			if ($this->id !== -1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->fact_num = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->contrib = ($row[$startcol + 1] !== null) ? (boolean) $row[$startcol + 1] : null;
			$this->nombre = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->rif = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->nit = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->num_control = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->status = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->comentario = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->descrip = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->saldo = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->fec_emis = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->fec_venc = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->co_cli = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->co_ven = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->co_tran = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->dir_ent = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->forma_pag = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->tot_bruto = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->tot_neto = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->glob_desc = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->tot_reca = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->porc_gdesc = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->porc_reca = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->total_uc = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->total_cp = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->tot_flete = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->monto_dev = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->totklu = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->anulada = ($row[$startcol + 28] !== null) ? (boolean) $row[$startcol + 28] : null;
			$this->impresa = ($row[$startcol + 29] !== null) ? (boolean) $row[$startcol + 29] : null;
			$this->iva = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->iva_dev = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->numcom = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->tasa = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->dis_cen = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->vuelto = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->seriales = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->tasag = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->tasag10 = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->tasag20 = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->id = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 41; // 41 = FacturaPeer::NUM_COLUMNS - FacturaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Factura object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aClientes !== null && $this->co_cli !== $this->aClientes->getCoCli()) {
			$this->aClientes = null;
		}
		if ($this->aVendedor !== null && $this->co_ven !== $this->aVendedor->getCoVen()) {
			$this->aVendedor = null;
		}
		if ($this->aTranspor !== null && $this->co_tran !== $this->aTranspor->getCoTran()) {
			$this->aTranspor = null;
		}
		if ($this->aCondicio !== null && $this->forma_pag !== $this->aCondicio->getCoCond()) {
			$this->aCondicio = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FacturaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = FacturaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aClientes = null;
			$this->aVendedor = null;
			$this->aTranspor = null;
			$this->aCondicio = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseFactura:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FacturaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			FacturaPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseFactura:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseFactura:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FacturaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseFactura:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			FacturaPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aClientes !== null) {
				if ($this->aClientes->isModified() || $this->aClientes->isNew()) {
					$affectedRows += $this->aClientes->save($con);
				}
				$this->setClientes($this->aClientes);
			}

			if ($this->aVendedor !== null) {
				if ($this->aVendedor->isModified() || $this->aVendedor->isNew()) {
					$affectedRows += $this->aVendedor->save($con);
				}
				$this->setVendedor($this->aVendedor);
			}

			if ($this->aTranspor !== null) {
				if ($this->aTranspor->isModified() || $this->aTranspor->isNew()) {
					$affectedRows += $this->aTranspor->save($con);
				}
				$this->setTranspor($this->aTranspor);
			}

			if ($this->aCondicio !== null) {
				if ($this->aCondicio->isModified() || $this->aCondicio->isNew()) {
					$affectedRows += $this->aCondicio->save($con);
				}
				$this->setCondicio($this->aCondicio);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = FacturaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += FacturaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aClientes !== null) {
				if (!$this->aClientes->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aClientes->getValidationFailures());
				}
			}

			if ($this->aVendedor !== null) {
				if (!$this->aVendedor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aVendedor->getValidationFailures());
				}
			}

			if ($this->aTranspor !== null) {
				if (!$this->aTranspor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTranspor->getValidationFailures());
				}
			}

			if ($this->aCondicio !== null) {
				if (!$this->aCondicio->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCondicio->getValidationFailures());
				}
			}


			if (($retval = FacturaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FacturaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getFactNum();
				break;
			case 1:
				return $this->getContrib();
				break;
			case 2:
				return $this->getNombre();
				break;
			case 3:
				return $this->getRif();
				break;
			case 4:
				return $this->getNit();
				break;
			case 5:
				return $this->getNumControl();
				break;
			case 6:
				return $this->getStatus();
				break;
			case 7:
				return $this->getComentario();
				break;
			case 8:
				return $this->getDescrip();
				break;
			case 9:
				return $this->getSaldo();
				break;
			case 10:
				return $this->getFecEmis();
				break;
			case 11:
				return $this->getFecVenc();
				break;
			case 12:
				return $this->getCoCli();
				break;
			case 13:
				return $this->getCoVen();
				break;
			case 14:
				return $this->getCoTran();
				break;
			case 15:
				return $this->getDirEnt();
				break;
			case 16:
				return $this->getFormaPag();
				break;
			case 17:
				return $this->getTotBruto();
				break;
			case 18:
				return $this->getTotNeto();
				break;
			case 19:
				return $this->getGlobDesc();
				break;
			case 20:
				return $this->getTotReca();
				break;
			case 21:
				return $this->getPorcGdesc();
				break;
			case 22:
				return $this->getPorcReca();
				break;
			case 23:
				return $this->getTotalUc();
				break;
			case 24:
				return $this->getTotalCp();
				break;
			case 25:
				return $this->getTotFlete();
				break;
			case 26:
				return $this->getMontoDev();
				break;
			case 27:
				return $this->getTotklu();
				break;
			case 28:
				return $this->getAnulada();
				break;
			case 29:
				return $this->getImpresa();
				break;
			case 30:
				return $this->getIva();
				break;
			case 31:
				return $this->getIvaDev();
				break;
			case 32:
				return $this->getNumcom();
				break;
			case 33:
				return $this->getTasa();
				break;
			case 34:
				return $this->getDisCen();
				break;
			case 35:
				return $this->getVuelto();
				break;
			case 36:
				return $this->getSeriales();
				break;
			case 37:
				return $this->getTasag();
				break;
			case 38:
				return $this->getTasag10();
				break;
			case 39:
				return $this->getTasag20();
				break;
			case 40:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = FacturaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getFactNum(),
			$keys[1] => $this->getContrib(),
			$keys[2] => $this->getNombre(),
			$keys[3] => $this->getRif(),
			$keys[4] => $this->getNit(),
			$keys[5] => $this->getNumControl(),
			$keys[6] => $this->getStatus(),
			$keys[7] => $this->getComentario(),
			$keys[8] => $this->getDescrip(),
			$keys[9] => $this->getSaldo(),
			$keys[10] => $this->getFecEmis(),
			$keys[11] => $this->getFecVenc(),
			$keys[12] => $this->getCoCli(),
			$keys[13] => $this->getCoVen(),
			$keys[14] => $this->getCoTran(),
			$keys[15] => $this->getDirEnt(),
			$keys[16] => $this->getFormaPag(),
			$keys[17] => $this->getTotBruto(),
			$keys[18] => $this->getTotNeto(),
			$keys[19] => $this->getGlobDesc(),
			$keys[20] => $this->getTotReca(),
			$keys[21] => $this->getPorcGdesc(),
			$keys[22] => $this->getPorcReca(),
			$keys[23] => $this->getTotalUc(),
			$keys[24] => $this->getTotalCp(),
			$keys[25] => $this->getTotFlete(),
			$keys[26] => $this->getMontoDev(),
			$keys[27] => $this->getTotklu(),
			$keys[28] => $this->getAnulada(),
			$keys[29] => $this->getImpresa(),
			$keys[30] => $this->getIva(),
			$keys[31] => $this->getIvaDev(),
			$keys[32] => $this->getNumcom(),
			$keys[33] => $this->getTasa(),
			$keys[34] => $this->getDisCen(),
			$keys[35] => $this->getVuelto(),
			$keys[36] => $this->getSeriales(),
			$keys[37] => $this->getTasag(),
			$keys[38] => $this->getTasag10(),
			$keys[39] => $this->getTasag20(),
			$keys[40] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FacturaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setFactNum($value);
				break;
			case 1:
				$this->setContrib($value);
				break;
			case 2:
				$this->setNombre($value);
				break;
			case 3:
				$this->setRif($value);
				break;
			case 4:
				$this->setNit($value);
				break;
			case 5:
				$this->setNumControl($value);
				break;
			case 6:
				$this->setStatus($value);
				break;
			case 7:
				$this->setComentario($value);
				break;
			case 8:
				$this->setDescrip($value);
				break;
			case 9:
				$this->setSaldo($value);
				break;
			case 10:
				$this->setFecEmis($value);
				break;
			case 11:
				$this->setFecVenc($value);
				break;
			case 12:
				$this->setCoCli($value);
				break;
			case 13:
				$this->setCoVen($value);
				break;
			case 14:
				$this->setCoTran($value);
				break;
			case 15:
				$this->setDirEnt($value);
				break;
			case 16:
				$this->setFormaPag($value);
				break;
			case 17:
				$this->setTotBruto($value);
				break;
			case 18:
				$this->setTotNeto($value);
				break;
			case 19:
				$this->setGlobDesc($value);
				break;
			case 20:
				$this->setTotReca($value);
				break;
			case 21:
				$this->setPorcGdesc($value);
				break;
			case 22:
				$this->setPorcReca($value);
				break;
			case 23:
				$this->setTotalUc($value);
				break;
			case 24:
				$this->setTotalCp($value);
				break;
			case 25:
				$this->setTotFlete($value);
				break;
			case 26:
				$this->setMontoDev($value);
				break;
			case 27:
				$this->setTotklu($value);
				break;
			case 28:
				$this->setAnulada($value);
				break;
			case 29:
				$this->setImpresa($value);
				break;
			case 30:
				$this->setIva($value);
				break;
			case 31:
				$this->setIvaDev($value);
				break;
			case 32:
				$this->setNumcom($value);
				break;
			case 33:
				$this->setTasa($value);
				break;
			case 34:
				$this->setDisCen($value);
				break;
			case 35:
				$this->setVuelto($value);
				break;
			case 36:
				$this->setSeriales($value);
				break;
			case 37:
				$this->setTasag($value);
				break;
			case 38:
				$this->setTasag10($value);
				break;
			case 39:
				$this->setTasag20($value);
				break;
			case 40:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = FacturaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setFactNum($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setContrib($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNombre($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRif($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNit($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNumControl($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setStatus($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setComentario($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDescrip($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setSaldo($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFecEmis($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFecVenc($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCoCli($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCoVen($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCoTran($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDirEnt($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFormaPag($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTotBruto($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setTotNeto($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setGlobDesc($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setTotReca($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setPorcGdesc($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setPorcReca($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setTotalUc($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setTotalCp($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setTotFlete($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setMontoDev($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setTotklu($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setAnulada($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setImpresa($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setIva($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setIvaDev($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setNumcom($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setTasa($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setDisCen($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setVuelto($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setSeriales($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setTasag($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setTasag10($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setTasag20($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setId($arr[$keys[40]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FacturaPeer::DATABASE_NAME);

		if ($this->isColumnModified(FacturaPeer::FACT_NUM)) $criteria->add(FacturaPeer::FACT_NUM, $this->fact_num);
		if ($this->isColumnModified(FacturaPeer::CONTRIB)) $criteria->add(FacturaPeer::CONTRIB, $this->contrib);
		if ($this->isColumnModified(FacturaPeer::NOMBRE)) $criteria->add(FacturaPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(FacturaPeer::RIF)) $criteria->add(FacturaPeer::RIF, $this->rif);
		if ($this->isColumnModified(FacturaPeer::NIT)) $criteria->add(FacturaPeer::NIT, $this->nit);
		if ($this->isColumnModified(FacturaPeer::NUM_CONTROL)) $criteria->add(FacturaPeer::NUM_CONTROL, $this->num_control);
		if ($this->isColumnModified(FacturaPeer::STATUS)) $criteria->add(FacturaPeer::STATUS, $this->status);
		if ($this->isColumnModified(FacturaPeer::COMENTARIO)) $criteria->add(FacturaPeer::COMENTARIO, $this->comentario);
		if ($this->isColumnModified(FacturaPeer::DESCRIP)) $criteria->add(FacturaPeer::DESCRIP, $this->descrip);
		if ($this->isColumnModified(FacturaPeer::SALDO)) $criteria->add(FacturaPeer::SALDO, $this->saldo);
		if ($this->isColumnModified(FacturaPeer::FEC_EMIS)) $criteria->add(FacturaPeer::FEC_EMIS, $this->fec_emis);
		if ($this->isColumnModified(FacturaPeer::FEC_VENC)) $criteria->add(FacturaPeer::FEC_VENC, $this->fec_venc);
		if ($this->isColumnModified(FacturaPeer::CO_CLI)) $criteria->add(FacturaPeer::CO_CLI, $this->co_cli);
		if ($this->isColumnModified(FacturaPeer::CO_VEN)) $criteria->add(FacturaPeer::CO_VEN, $this->co_ven);
		if ($this->isColumnModified(FacturaPeer::CO_TRAN)) $criteria->add(FacturaPeer::CO_TRAN, $this->co_tran);
		if ($this->isColumnModified(FacturaPeer::DIR_ENT)) $criteria->add(FacturaPeer::DIR_ENT, $this->dir_ent);
		if ($this->isColumnModified(FacturaPeer::FORMA_PAG)) $criteria->add(FacturaPeer::FORMA_PAG, $this->forma_pag);
		if ($this->isColumnModified(FacturaPeer::TOT_BRUTO)) $criteria->add(FacturaPeer::TOT_BRUTO, $this->tot_bruto);
		if ($this->isColumnModified(FacturaPeer::TOT_NETO)) $criteria->add(FacturaPeer::TOT_NETO, $this->tot_neto);
		if ($this->isColumnModified(FacturaPeer::GLOB_DESC)) $criteria->add(FacturaPeer::GLOB_DESC, $this->glob_desc);
		if ($this->isColumnModified(FacturaPeer::TOT_RECA)) $criteria->add(FacturaPeer::TOT_RECA, $this->tot_reca);
		if ($this->isColumnModified(FacturaPeer::PORC_GDESC)) $criteria->add(FacturaPeer::PORC_GDESC, $this->porc_gdesc);
		if ($this->isColumnModified(FacturaPeer::PORC_RECA)) $criteria->add(FacturaPeer::PORC_RECA, $this->porc_reca);
		if ($this->isColumnModified(FacturaPeer::TOTAL_UC)) $criteria->add(FacturaPeer::TOTAL_UC, $this->total_uc);
		if ($this->isColumnModified(FacturaPeer::TOTAL_CP)) $criteria->add(FacturaPeer::TOTAL_CP, $this->total_cp);
		if ($this->isColumnModified(FacturaPeer::TOT_FLETE)) $criteria->add(FacturaPeer::TOT_FLETE, $this->tot_flete);
		if ($this->isColumnModified(FacturaPeer::MONTO_DEV)) $criteria->add(FacturaPeer::MONTO_DEV, $this->monto_dev);
		if ($this->isColumnModified(FacturaPeer::TOTKLU)) $criteria->add(FacturaPeer::TOTKLU, $this->totklu);
		if ($this->isColumnModified(FacturaPeer::ANULADA)) $criteria->add(FacturaPeer::ANULADA, $this->anulada);
		if ($this->isColumnModified(FacturaPeer::IMPRESA)) $criteria->add(FacturaPeer::IMPRESA, $this->impresa);
		if ($this->isColumnModified(FacturaPeer::IVA)) $criteria->add(FacturaPeer::IVA, $this->iva);
		if ($this->isColumnModified(FacturaPeer::IVA_DEV)) $criteria->add(FacturaPeer::IVA_DEV, $this->iva_dev);
		if ($this->isColumnModified(FacturaPeer::NUMCOM)) $criteria->add(FacturaPeer::NUMCOM, $this->numcom);
		if ($this->isColumnModified(FacturaPeer::TASA)) $criteria->add(FacturaPeer::TASA, $this->tasa);
		if ($this->isColumnModified(FacturaPeer::DIS_CEN)) $criteria->add(FacturaPeer::DIS_CEN, $this->dis_cen);
		if ($this->isColumnModified(FacturaPeer::VUELTO)) $criteria->add(FacturaPeer::VUELTO, $this->vuelto);
		if ($this->isColumnModified(FacturaPeer::SERIALES)) $criteria->add(FacturaPeer::SERIALES, $this->seriales);
		if ($this->isColumnModified(FacturaPeer::TASAG)) $criteria->add(FacturaPeer::TASAG, $this->tasag);
		if ($this->isColumnModified(FacturaPeer::TASAG10)) $criteria->add(FacturaPeer::TASAG10, $this->tasag10);
		if ($this->isColumnModified(FacturaPeer::TASAG20)) $criteria->add(FacturaPeer::TASAG20, $this->tasag20);
		if ($this->isColumnModified(FacturaPeer::ID)) $criteria->add(FacturaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FacturaPeer::DATABASE_NAME);

		$criteria->add(FacturaPeer::FACT_NUM, $this->fact_num);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getFactNum();
	}

	/**
	 * Generic method to set the primary key (fact_num column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setFactNum($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Factura (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFactNum($this->fact_num);

		$copyObj->setContrib($this->contrib);

		$copyObj->setNombre($this->nombre);

		$copyObj->setRif($this->rif);

		$copyObj->setNit($this->nit);

		$copyObj->setNumControl($this->num_control);

		$copyObj->setStatus($this->status);

		$copyObj->setComentario($this->comentario);

		$copyObj->setDescrip($this->descrip);

		$copyObj->setSaldo($this->saldo);

		$copyObj->setFecEmis($this->fec_emis);

		$copyObj->setFecVenc($this->fec_venc);

		$copyObj->setCoCli($this->co_cli);

		$copyObj->setCoVen($this->co_ven);

		$copyObj->setCoTran($this->co_tran);

		$copyObj->setDirEnt($this->dir_ent);

		$copyObj->setFormaPag($this->forma_pag);

		$copyObj->setTotBruto($this->tot_bruto);

		$copyObj->setTotNeto($this->tot_neto);

		$copyObj->setGlobDesc($this->glob_desc);

		$copyObj->setTotReca($this->tot_reca);

		$copyObj->setPorcGdesc($this->porc_gdesc);

		$copyObj->setPorcReca($this->porc_reca);

		$copyObj->setTotalUc($this->total_uc);

		$copyObj->setTotalCp($this->total_cp);

		$copyObj->setTotFlete($this->tot_flete);

		$copyObj->setMontoDev($this->monto_dev);

		$copyObj->setTotklu($this->totklu);

		$copyObj->setAnulada($this->anulada);

		$copyObj->setImpresa($this->impresa);

		$copyObj->setIva($this->iva);

		$copyObj->setIvaDev($this->iva_dev);

		$copyObj->setNumcom($this->numcom);

		$copyObj->setTasa($this->tasa);

		$copyObj->setDisCen($this->dis_cen);

		$copyObj->setVuelto($this->vuelto);

		$copyObj->setSeriales($this->seriales);

		$copyObj->setTasag($this->tasag);

		$copyObj->setTasag10($this->tasag10);

		$copyObj->setTasag20($this->tasag20);

		$copyObj->setId($this->id);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Factura Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FacturaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FacturaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Clientes object.
	 *
	 * @param      Clientes $v
	 * @return     Factura The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setClientes(Clientes $v = null)
	{
		if ($v === null) {
			$this->setCoCli(' ');
		} else {
			$this->setCoCli($v->getCoCli());
		}

		$this->aClientes = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Clientes object, it will not be re-added.
		if ($v !== null) {
			$v->addFactura($this);
		}

		return $this;
	}


	/**
	 * Get the associated Clientes object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Clientes The associated Clientes object.
	 * @throws     PropelException
	 */
	public function getClientes(PropelPDO $con = null)
	{
		if ($this->aClientes === null && (($this->co_cli !== "" && $this->co_cli !== null))) {
			$c = new Criteria(ClientesPeer::DATABASE_NAME);
			$c->add(ClientesPeer::CO_CLI, $this->co_cli);
			$this->aClientes = ClientesPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aClientes->addFacturas($this);
			 */
		}
		return $this->aClientes;
	}

	/**
	 * Declares an association between this object and a Vendedor object.
	 *
	 * @param      Vendedor $v
	 * @return     Factura The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setVendedor(Vendedor $v = null)
	{
		if ($v === null) {
			$this->setCoVen(' ');
		} else {
			$this->setCoVen($v->getCoVen());
		}

		$this->aVendedor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Vendedor object, it will not be re-added.
		if ($v !== null) {
			$v->addFactura($this);
		}

		return $this;
	}


	/**
	 * Get the associated Vendedor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Vendedor The associated Vendedor object.
	 * @throws     PropelException
	 */
	public function getVendedor(PropelPDO $con = null)
	{
		if ($this->aVendedor === null && (($this->co_ven !== "" && $this->co_ven !== null))) {
			$c = new Criteria(VendedorPeer::DATABASE_NAME);
			$c->add(VendedorPeer::CO_VEN, $this->co_ven);
			$this->aVendedor = VendedorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aVendedor->addFacturas($this);
			 */
		}
		return $this->aVendedor;
	}

	/**
	 * Declares an association between this object and a Transpor object.
	 *
	 * @param      Transpor $v
	 * @return     Factura The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTranspor(Transpor $v = null)
	{
		if ($v === null) {
			$this->setCoTran(' ');
		} else {
			$this->setCoTran($v->getCoTran());
		}

		$this->aTranspor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Transpor object, it will not be re-added.
		if ($v !== null) {
			$v->addFactura($this);
		}

		return $this;
	}


	/**
	 * Get the associated Transpor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Transpor The associated Transpor object.
	 * @throws     PropelException
	 */
	public function getTranspor(PropelPDO $con = null)
	{
		if ($this->aTranspor === null && (($this->co_tran !== "" && $this->co_tran !== null))) {
			$c = new Criteria(TransporPeer::DATABASE_NAME);
			$c->add(TransporPeer::CO_TRAN, $this->co_tran);
			$this->aTranspor = TransporPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTranspor->addFacturas($this);
			 */
		}
		return $this->aTranspor;
	}

	/**
	 * Declares an association between this object and a Condicio object.
	 *
	 * @param      Condicio $v
	 * @return     Factura The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCondicio(Condicio $v = null)
	{
		if ($v === null) {
			$this->setFormaPag(' ');
		} else {
			$this->setFormaPag($v->getCoCond());
		}

		$this->aCondicio = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Condicio object, it will not be re-added.
		if ($v !== null) {
			$v->addFactura($this);
		}

		return $this;
	}


	/**
	 * Get the associated Condicio object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Condicio The associated Condicio object.
	 * @throws     PropelException
	 */
	public function getCondicio(PropelPDO $con = null)
	{
		if ($this->aCondicio === null && (($this->forma_pag !== "" && $this->forma_pag !== null))) {
			$c = new Criteria(CondicioPeer::DATABASE_NAME);
			$c->add(CondicioPeer::CO_COND, $this->forma_pag);
			$this->aCondicio = CondicioPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCondicio->addFacturas($this);
			 */
		}
		return $this->aCondicio;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aClientes = null;
			$this->aVendedor = null;
			$this->aTranspor = null;
			$this->aCondicio = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseFactura:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseFactura::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseFactura
