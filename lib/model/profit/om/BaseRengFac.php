<?php

/**
 * Base class that represents a row from the 'reng_fac' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Nov 25 23:58:32 2009
 *
 * @package    lib.model.profit.om
 */
abstract class BaseRengFac extends BaseObject  implements Persistent {


  const PEER = 'RengFacPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RengFacPeer
	 */
	protected static $peer;

	/**
	 * The value for the fact_num field.
	 * @var        int
	 */
	protected $fact_num;

	/**
	 * The value for the reng_num field.
	 * @var        int
	 */
	protected $reng_num;

	/**
	 * The value for the dis_cen field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $dis_cen;

	/**
	 * The value for the tipo_doc field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tipo_doc;

	/**
	 * The value for the reng_doc field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $reng_doc;

	/**
	 * The value for the num_doc field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $num_doc;

	/**
	 * The value for the co_art field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_art;

	/**
	 * The value for the co_alma field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_alma;

	/**
	 * The value for the total_art field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $total_art;

	/**
	 * The value for the stotal_art field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $stotal_art;

	/**
	 * The value for the pendiente field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $pendiente;

	/**
	 * The value for the uni_venta field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $uni_venta;

	/**
	 * The value for the prec_vta field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $prec_vta;

	/**
	 * The value for the porc_desc field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $porc_desc;

	/**
	 * The value for the tipo_imp field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tipo_imp;

	/**
	 * The value for the isv field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $isv;

	/**
	 * The value for the reng_neto field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $reng_neto;

	/**
	 * The value for the cos_pro_un field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $cos_pro_un;

	/**
	 * The value for the ult_cos_un field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $ult_cos_un;

	/**
	 * The value for the ult_cos_om field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $ult_cos_om;

	/**
	 * The value for the cos_pro_om field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $cos_pro_om;

	/**
	 * The value for the total_dev field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $total_dev;

	/**
	 * The value for the monto_dev field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $monto_dev;

	/**
	 * The value for the prec_vta2 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $prec_vta2;

	/**
	 * The value for the anulado field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $anulado;

	/**
	 * The value for the des_art field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $des_art;

	/**
	 * The value for the seleccion field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $seleccion;

	/**
	 * The value for the cant_imp field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $cant_imp;

	/**
	 * The value for the comentario field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $comentario;

	/**
	 * The value for the rowguid field.
	 * Note: this column has a database default value of: '(newid())'
	 * @var        string
	 */
	protected $rowguid;

	/**
	 * The value for the total_uni field.
	 * Note: this column has a database default value of: '1'
	 * @var        string
	 */
	protected $total_uni;

	/**
	 * The value for the mon_ilc field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $mon_ilc;

	/**
	 * The value for the otros field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $otros;

	/**
	 * The value for the nro_lote field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $nro_lote;

	/**
	 * The value for the fec_lote field.
	 * @var        string
	 */
	protected $fec_lote;

	/**
	 * The value for the pendiente2 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $pendiente2;

	/**
	 * The value for the tipo_doc2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tipo_doc2;

	/**
	 * The value for the reng_doc2 field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $reng_doc2;

	/**
	 * The value for the num_doc2 field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $num_doc2;

	/**
	 * The value for the tipo_prec field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $tipo_prec;

	/**
	 * The value for the co_alma2 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $co_alma2;

	/**
	 * The value for the aux01 field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $aux01;

	/**
	 * The value for the aux02 field.
	 * Note: this column has a database default value of: ' '
	 * @var        string
	 */
	protected $aux02;

	/**
	 * The value for the cant_prod field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $cant_prod;

	/**
	 * The value for the imp_prod field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $imp_prod;

	/**
	 * @var        Art
	 */
	protected $aArt;

	/**
	 * @var        SubAlma
	 */
	protected $aSubAlma;

	/**
	 * @var        Tabulado
	 */
	protected $aTabulado;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRengFac object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->dis_cen = ' ';
		$this->tipo_doc = ' ';
		$this->reng_doc = 0;
		$this->num_doc = 0;
		$this->co_art = ' ';
		$this->co_alma = ' ';
		$this->total_art = '0';
		$this->stotal_art = '0';
		$this->pendiente = '0';
		$this->uni_venta = ' ';
		$this->prec_vta = '0';
		$this->porc_desc = ' ';
		$this->tipo_imp = ' ';
		$this->isv = '0';
		$this->reng_neto = '0';
		$this->cos_pro_un = '0';
		$this->ult_cos_un = '0';
		$this->ult_cos_om = '0';
		$this->cos_pro_om = '0';
		$this->total_dev = '0';
		$this->monto_dev = '0';
		$this->prec_vta2 = '0';
		$this->anulado = false;
		$this->des_art = ' ';
		$this->seleccion = false;
		$this->cant_imp = '0';
		$this->comentario = ' ';
		$this->rowguid = '(newid())';
		$this->total_uni = '1';
		$this->mon_ilc = '0';
		$this->otros = '0';
		$this->nro_lote = ' ';
		$this->pendiente2 = '0';
		$this->tipo_doc2 = ' ';
		$this->reng_doc2 = 0;
		$this->num_doc2 = 0;
		$this->tipo_prec = ' ';
		$this->co_alma2 = ' ';
		$this->aux01 = '0';
		$this->aux02 = ' ';
		$this->cant_prod = '0';
		$this->imp_prod = '0';
	}

	/**
	 * Get the [fact_num] column value.
	 * 
	 * @return     int
	 */
	public function getFactNum()
	{
		return $this->fact_num;
	}

	/**
	 * Get the [reng_num] column value.
	 * 
	 * @return     int
	 */
	public function getRengNum()
	{
		return $this->reng_num;
	}

	/**
	 * Get the [dis_cen] column value.
	 * 
	 * @return     string
	 */
	public function getDisCen()
	{
		return $this->dis_cen;
	}

	/**
	 * Get the [tipo_doc] column value.
	 * 
	 * @return     string
	 */
	public function getTipoDoc()
	{
		return $this->tipo_doc;
	}

	/**
	 * Get the [reng_doc] column value.
	 * 
	 * @return     int
	 */
	public function getRengDoc()
	{
		return $this->reng_doc;
	}

	/**
	 * Get the [num_doc] column value.
	 * 
	 * @return     int
	 */
	public function getNumDoc()
	{
		return $this->num_doc;
	}

	/**
	 * Get the [co_art] column value.
	 * 
	 * @return     string
	 */
	public function getCoArt()
	{
		return $this->co_art;
	}

	/**
	 * Get the [co_alma] column value.
	 * 
	 * @return     string
	 */
	public function getCoAlma()
	{
		return $this->co_alma;
	}

	/**
	 * Get the [total_art] column value.
	 * 
	 * @return     string
	 */
	public function getTotalArt()
	{
		return $this->total_art;
	}

	/**
	 * Get the [stotal_art] column value.
	 * 
	 * @return     string
	 */
	public function getStotalArt()
	{
		return $this->stotal_art;
	}

	/**
	 * Get the [pendiente] column value.
	 * 
	 * @return     string
	 */
	public function getPendiente()
	{
		return $this->pendiente;
	}

	/**
	 * Get the [uni_venta] column value.
	 * 
	 * @return     string
	 */
	public function getUniVenta()
	{
		return $this->uni_venta;
	}

	/**
	 * Get the [prec_vta] column value.
	 * 
	 * @return     string
	 */
	public function getPrecVta()
	{
		return $this->prec_vta;
	}

	/**
	 * Get the [porc_desc] column value.
	 * 
	 * @return     string
	 */
	public function getPorcDesc()
	{
		return $this->porc_desc;
	}

	/**
	 * Get the [tipo_imp] column value.
	 * 
	 * @return     string
	 */
	public function getTipoImp()
	{
		return $this->tipo_imp;
	}

	/**
	 * Get the [isv] column value.
	 * 
	 * @return     string
	 */
	public function getIsv()
	{
		return $this->isv;
	}

	/**
	 * Get the [reng_neto] column value.
	 * 
	 * @return     string
	 */
	public function getRengNeto()
	{
		return $this->reng_neto;
	}

	/**
	 * Get the [cos_pro_un] column value.
	 * 
	 * @return     string
	 */
	public function getCosProUn()
	{
		return $this->cos_pro_un;
	}

	/**
	 * Get the [ult_cos_un] column value.
	 * 
	 * @return     string
	 */
	public function getUltCosUn()
	{
		return $this->ult_cos_un;
	}

	/**
	 * Get the [ult_cos_om] column value.
	 * 
	 * @return     string
	 */
	public function getUltCosOm()
	{
		return $this->ult_cos_om;
	}

	/**
	 * Get the [cos_pro_om] column value.
	 * 
	 * @return     string
	 */
	public function getCosProOm()
	{
		return $this->cos_pro_om;
	}

	/**
	 * Get the [total_dev] column value.
	 * 
	 * @return     string
	 */
	public function getTotalDev()
	{
		return $this->total_dev;
	}

	/**
	 * Get the [monto_dev] column value.
	 * 
	 * @return     string
	 */
	public function getMontoDev()
	{
		return $this->monto_dev;
	}

	/**
	 * Get the [prec_vta2] column value.
	 * 
	 * @return     string
	 */
	public function getPrecVta2()
	{
		return $this->prec_vta2;
	}

	/**
	 * Get the [anulado] column value.
	 * 
	 * @return     boolean
	 */
	public function getAnulado()
	{
		return $this->anulado;
	}

	/**
	 * Get the [des_art] column value.
	 * 
	 * @return     string
	 */
	public function getDesArt()
	{
		return $this->des_art;
	}

	/**
	 * Get the [seleccion] column value.
	 * 
	 * @return     boolean
	 */
	public function getSeleccion()
	{
		return $this->seleccion;
	}

	/**
	 * Get the [cant_imp] column value.
	 * 
	 * @return     string
	 */
	public function getCantImp()
	{
		return $this->cant_imp;
	}

	/**
	 * Get the [comentario] column value.
	 * 
	 * @return     string
	 */
	public function getComentario()
	{
		return $this->comentario;
	}

	/**
	 * Get the [rowguid] column value.
	 * 
	 * @return     string
	 */
	public function getRowguid()
	{
		return $this->rowguid;
	}

	/**
	 * Get the [total_uni] column value.
	 * 
	 * @return     string
	 */
	public function getTotalUni()
	{
		return $this->total_uni;
	}

	/**
	 * Get the [mon_ilc] column value.
	 * 
	 * @return     string
	 */
	public function getMonIlc()
	{
		return $this->mon_ilc;
	}

	/**
	 * Get the [otros] column value.
	 * 
	 * @return     string
	 */
	public function getOtros()
	{
		return $this->otros;
	}

	/**
	 * Get the [nro_lote] column value.
	 * 
	 * @return     string
	 */
	public function getNroLote()
	{
		return $this->nro_lote;
	}

	/**
	 * Get the [fec_lote] column value.
	 * 
	 * @return     string
	 */
	public function getFecLote()
	{
		return $this->fec_lote;
	}

	/**
	 * Get the [pendiente2] column value.
	 * 
	 * @return     string
	 */
	public function getPendiente2()
	{
		return $this->pendiente2;
	}

	/**
	 * Get the [tipo_doc2] column value.
	 * 
	 * @return     string
	 */
	public function getTipoDoc2()
	{
		return $this->tipo_doc2;
	}

	/**
	 * Get the [reng_doc2] column value.
	 * 
	 * @return     int
	 */
	public function getRengDoc2()
	{
		return $this->reng_doc2;
	}

	/**
	 * Get the [num_doc2] column value.
	 * 
	 * @return     int
	 */
	public function getNumDoc2()
	{
		return $this->num_doc2;
	}

	/**
	 * Get the [tipo_prec] column value.
	 * 
	 * @return     string
	 */
	public function getTipoPrec()
	{
		return $this->tipo_prec;
	}

	/**
	 * Get the [co_alma2] column value.
	 * 
	 * @return     string
	 */
	public function getCoAlma2()
	{
		return $this->co_alma2;
	}

	/**
	 * Get the [aux01] column value.
	 * 
	 * @return     string
	 */
	public function getAux01()
	{
		return $this->aux01;
	}

	/**
	 * Get the [aux02] column value.
	 * 
	 * @return     string
	 */
	public function getAux02()
	{
		return $this->aux02;
	}

	/**
	 * Get the [cant_prod] column value.
	 * 
	 * @return     string
	 */
	public function getCantProd()
	{
		return $this->cant_prod;
	}

	/**
	 * Get the [imp_prod] column value.
	 * 
	 * @return     string
	 */
	public function getImpProd()
	{
		return $this->imp_prod;
	}

	/**
	 * Set the value of [fact_num] column.
	 * 
	 * @param      int $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setFactNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fact_num !== $v) {
			$this->fact_num = $v;
			$this->modifiedColumns[] = RengFacPeer::FACT_NUM;
		}

		return $this;
	} // setFactNum()

	/**
	 * Set the value of [reng_num] column.
	 * 
	 * @param      int $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setRengNum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reng_num !== $v) {
			$this->reng_num = $v;
			$this->modifiedColumns[] = RengFacPeer::RENG_NUM;
		}

		return $this;
	} // setRengNum()

	/**
	 * Set the value of [dis_cen] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setDisCen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dis_cen !== $v || $v === ' ') {
			$this->dis_cen = $v;
			$this->modifiedColumns[] = RengFacPeer::DIS_CEN;
		}

		return $this;
	} // setDisCen()

	/**
	 * Set the value of [tipo_doc] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setTipoDoc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_doc !== $v || $v === ' ') {
			$this->tipo_doc = $v;
			$this->modifiedColumns[] = RengFacPeer::TIPO_DOC;
		}

		return $this;
	} // setTipoDoc()

	/**
	 * Set the value of [reng_doc] column.
	 * 
	 * @param      int $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setRengDoc($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reng_doc !== $v || $v === 0) {
			$this->reng_doc = $v;
			$this->modifiedColumns[] = RengFacPeer::RENG_DOC;
		}

		return $this;
	} // setRengDoc()

	/**
	 * Set the value of [num_doc] column.
	 * 
	 * @param      int $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setNumDoc($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->num_doc !== $v || $v === 0) {
			$this->num_doc = $v;
			$this->modifiedColumns[] = RengFacPeer::NUM_DOC;
		}

		return $this;
	} // setNumDoc()

	/**
	 * Set the value of [co_art] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setCoArt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_art !== $v || $v === ' ') {
			$this->co_art = $v;
			$this->modifiedColumns[] = RengFacPeer::CO_ART;
		}

		if ($this->aArt !== null && $this->aArt->getCoArt() !== $v) {
			$this->aArt = null;
		}

		return $this;
	} // setCoArt()

	/**
	 * Set the value of [co_alma] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setCoAlma($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_alma !== $v || $v === ' ') {
			$this->co_alma = $v;
			$this->modifiedColumns[] = RengFacPeer::CO_ALMA;
		}

		if ($this->aSubAlma !== null && $this->aSubAlma->getCoSub() !== $v) {
			$this->aSubAlma = null;
		}

		return $this;
	} // setCoAlma()

	/**
	 * Set the value of [total_art] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setTotalArt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->total_art !== $v || $v === '0') {
			$this->total_art = $v;
			$this->modifiedColumns[] = RengFacPeer::TOTAL_ART;
		}

		return $this;
	} // setTotalArt()

	/**
	 * Set the value of [stotal_art] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setStotalArt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->stotal_art !== $v || $v === '0') {
			$this->stotal_art = $v;
			$this->modifiedColumns[] = RengFacPeer::STOTAL_ART;
		}

		return $this;
	} // setStotalArt()

	/**
	 * Set the value of [pendiente] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setPendiente($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pendiente !== $v || $v === '0') {
			$this->pendiente = $v;
			$this->modifiedColumns[] = RengFacPeer::PENDIENTE;
		}

		return $this;
	} // setPendiente()

	/**
	 * Set the value of [uni_venta] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setUniVenta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->uni_venta !== $v || $v === ' ') {
			$this->uni_venta = $v;
			$this->modifiedColumns[] = RengFacPeer::UNI_VENTA;
		}

		return $this;
	} // setUniVenta()

	/**
	 * Set the value of [prec_vta] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setPrecVta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prec_vta !== $v || $v === '0') {
			$this->prec_vta = $v;
			$this->modifiedColumns[] = RengFacPeer::PREC_VTA;
		}

		return $this;
	} // setPrecVta()

	/**
	 * Set the value of [porc_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setPorcDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->porc_desc !== $v || $v === ' ') {
			$this->porc_desc = $v;
			$this->modifiedColumns[] = RengFacPeer::PORC_DESC;
		}

		return $this;
	} // setPorcDesc()

	/**
	 * Set the value of [tipo_imp] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setTipoImp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_imp !== $v || $v === ' ') {
			$this->tipo_imp = $v;
			$this->modifiedColumns[] = RengFacPeer::TIPO_IMP;
		}

		if ($this->aTabulado !== null && $this->aTabulado->getTipo() !== $v) {
			$this->aTabulado = null;
		}

		return $this;
	} // setTipoImp()

	/**
	 * Set the value of [isv] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setIsv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->isv !== $v || $v === '0') {
			$this->isv = $v;
			$this->modifiedColumns[] = RengFacPeer::ISV;
		}

		return $this;
	} // setIsv()

	/**
	 * Set the value of [reng_neto] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setRengNeto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reng_neto !== $v || $v === '0') {
			$this->reng_neto = $v;
			$this->modifiedColumns[] = RengFacPeer::RENG_NETO;
		}

		return $this;
	} // setRengNeto()

	/**
	 * Set the value of [cos_pro_un] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setCosProUn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cos_pro_un !== $v || $v === '0') {
			$this->cos_pro_un = $v;
			$this->modifiedColumns[] = RengFacPeer::COS_PRO_UN;
		}

		return $this;
	} // setCosProUn()

	/**
	 * Set the value of [ult_cos_un] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setUltCosUn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ult_cos_un !== $v || $v === '0') {
			$this->ult_cos_un = $v;
			$this->modifiedColumns[] = RengFacPeer::ULT_COS_UN;
		}

		return $this;
	} // setUltCosUn()

	/**
	 * Set the value of [ult_cos_om] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setUltCosOm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ult_cos_om !== $v || $v === '0') {
			$this->ult_cos_om = $v;
			$this->modifiedColumns[] = RengFacPeer::ULT_COS_OM;
		}

		return $this;
	} // setUltCosOm()

	/**
	 * Set the value of [cos_pro_om] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setCosProOm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cos_pro_om !== $v || $v === '0') {
			$this->cos_pro_om = $v;
			$this->modifiedColumns[] = RengFacPeer::COS_PRO_OM;
		}

		return $this;
	} // setCosProOm()

	/**
	 * Set the value of [total_dev] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setTotalDev($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->total_dev !== $v || $v === '0') {
			$this->total_dev = $v;
			$this->modifiedColumns[] = RengFacPeer::TOTAL_DEV;
		}

		return $this;
	} // setTotalDev()

	/**
	 * Set the value of [monto_dev] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setMontoDev($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monto_dev !== $v || $v === '0') {
			$this->monto_dev = $v;
			$this->modifiedColumns[] = RengFacPeer::MONTO_DEV;
		}

		return $this;
	} // setMontoDev()

	/**
	 * Set the value of [prec_vta2] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setPrecVta2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prec_vta2 !== $v || $v === '0') {
			$this->prec_vta2 = $v;
			$this->modifiedColumns[] = RengFacPeer::PREC_VTA2;
		}

		return $this;
	} // setPrecVta2()

	/**
	 * Set the value of [anulado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setAnulado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->anulado !== $v || $v === false) {
			$this->anulado = $v;
			$this->modifiedColumns[] = RengFacPeer::ANULADO;
		}

		return $this;
	} // setAnulado()

	/**
	 * Set the value of [des_art] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setDesArt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->des_art !== $v || $v === ' ') {
			$this->des_art = $v;
			$this->modifiedColumns[] = RengFacPeer::DES_ART;
		}

		return $this;
	} // setDesArt()

	/**
	 * Set the value of [seleccion] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setSeleccion($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->seleccion !== $v || $v === false) {
			$this->seleccion = $v;
			$this->modifiedColumns[] = RengFacPeer::SELECCION;
		}

		return $this;
	} // setSeleccion()

	/**
	 * Set the value of [cant_imp] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setCantImp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cant_imp !== $v || $v === '0') {
			$this->cant_imp = $v;
			$this->modifiedColumns[] = RengFacPeer::CANT_IMP;
		}

		return $this;
	} // setCantImp()

	/**
	 * Set the value of [comentario] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setComentario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comentario !== $v || $v === ' ') {
			$this->comentario = $v;
			$this->modifiedColumns[] = RengFacPeer::COMENTARIO;
		}

		return $this;
	} // setComentario()

	/**
	 * Set the value of [rowguid] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setRowguid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowguid !== $v || $v === '(newid())') {
			$this->rowguid = $v;
			$this->modifiedColumns[] = RengFacPeer::ROWGUID;
		}

		return $this;
	} // setRowguid()

	/**
	 * Set the value of [total_uni] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setTotalUni($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->total_uni !== $v || $v === '1') {
			$this->total_uni = $v;
			$this->modifiedColumns[] = RengFacPeer::TOTAL_UNI;
		}

		return $this;
	} // setTotalUni()

	/**
	 * Set the value of [mon_ilc] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setMonIlc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mon_ilc !== $v || $v === '0') {
			$this->mon_ilc = $v;
			$this->modifiedColumns[] = RengFacPeer::MON_ILC;
		}

		return $this;
	} // setMonIlc()

	/**
	 * Set the value of [otros] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setOtros($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otros !== $v || $v === '0') {
			$this->otros = $v;
			$this->modifiedColumns[] = RengFacPeer::OTROS;
		}

		return $this;
	} // setOtros()

	/**
	 * Set the value of [nro_lote] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setNroLote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nro_lote !== $v || $v === ' ') {
			$this->nro_lote = $v;
			$this->modifiedColumns[] = RengFacPeer::NRO_LOTE;
		}

		return $this;
	} // setNroLote()

	/**
	 * Set the value of [fec_lote] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setFecLote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fec_lote !== $v) {
			$this->fec_lote = $v;
			$this->modifiedColumns[] = RengFacPeer::FEC_LOTE;
		}

		return $this;
	} // setFecLote()

	/**
	 * Set the value of [pendiente2] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setPendiente2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pendiente2 !== $v || $v === '0') {
			$this->pendiente2 = $v;
			$this->modifiedColumns[] = RengFacPeer::PENDIENTE2;
		}

		return $this;
	} // setPendiente2()

	/**
	 * Set the value of [tipo_doc2] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setTipoDoc2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_doc2 !== $v || $v === ' ') {
			$this->tipo_doc2 = $v;
			$this->modifiedColumns[] = RengFacPeer::TIPO_DOC2;
		}

		return $this;
	} // setTipoDoc2()

	/**
	 * Set the value of [reng_doc2] column.
	 * 
	 * @param      int $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setRengDoc2($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reng_doc2 !== $v || $v === 0) {
			$this->reng_doc2 = $v;
			$this->modifiedColumns[] = RengFacPeer::RENG_DOC2;
		}

		return $this;
	} // setRengDoc2()

	/**
	 * Set the value of [num_doc2] column.
	 * 
	 * @param      int $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setNumDoc2($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->num_doc2 !== $v || $v === 0) {
			$this->num_doc2 = $v;
			$this->modifiedColumns[] = RengFacPeer::NUM_DOC2;
		}

		return $this;
	} // setNumDoc2()

	/**
	 * Set the value of [tipo_prec] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setTipoPrec($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_prec !== $v || $v === ' ') {
			$this->tipo_prec = $v;
			$this->modifiedColumns[] = RengFacPeer::TIPO_PREC;
		}

		return $this;
	} // setTipoPrec()

	/**
	 * Set the value of [co_alma2] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setCoAlma2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_alma2 !== $v || $v === ' ') {
			$this->co_alma2 = $v;
			$this->modifiedColumns[] = RengFacPeer::CO_ALMA2;
		}

		return $this;
	} // setCoAlma2()

	/**
	 * Set the value of [aux01] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setAux01($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aux01 !== $v || $v === '0') {
			$this->aux01 = $v;
			$this->modifiedColumns[] = RengFacPeer::AUX01;
		}

		return $this;
	} // setAux01()

	/**
	 * Set the value of [aux02] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setAux02($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aux02 !== $v || $v === ' ') {
			$this->aux02 = $v;
			$this->modifiedColumns[] = RengFacPeer::AUX02;
		}

		return $this;
	} // setAux02()

	/**
	 * Set the value of [cant_prod] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setCantProd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cant_prod !== $v || $v === '0') {
			$this->cant_prod = $v;
			$this->modifiedColumns[] = RengFacPeer::CANT_PROD;
		}

		return $this;
	} // setCantProd()

	/**
	 * Set the value of [imp_prod] column.
	 * 
	 * @param      string $v new value
	 * @return     RengFac The current object (for fluent API support)
	 */
	public function setImpProd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->imp_prod !== $v || $v === '0') {
			$this->imp_prod = $v;
			$this->modifiedColumns[] = RengFacPeer::IMP_PROD;
		}

		return $this;
	} // setImpProd()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RengFacPeer::DIS_CEN,RengFacPeer::TIPO_DOC,RengFacPeer::RENG_DOC,RengFacPeer::NUM_DOC,RengFacPeer::CO_ART,RengFacPeer::CO_ALMA,RengFacPeer::TOTAL_ART,RengFacPeer::STOTAL_ART,RengFacPeer::PENDIENTE,RengFacPeer::UNI_VENTA,RengFacPeer::PREC_VTA,RengFacPeer::PORC_DESC,RengFacPeer::TIPO_IMP,RengFacPeer::ISV,RengFacPeer::RENG_NETO,RengFacPeer::COS_PRO_UN,RengFacPeer::ULT_COS_UN,RengFacPeer::ULT_COS_OM,RengFacPeer::COS_PRO_OM,RengFacPeer::TOTAL_DEV,RengFacPeer::MONTO_DEV,RengFacPeer::PREC_VTA2,RengFacPeer::ANULADO,RengFacPeer::DES_ART,RengFacPeer::SELECCION,RengFacPeer::CANT_IMP,RengFacPeer::COMENTARIO,RengFacPeer::ROWGUID,RengFacPeer::TOTAL_UNI,RengFacPeer::MON_ILC,RengFacPeer::OTROS,RengFacPeer::NRO_LOTE,RengFacPeer::PENDIENTE2,RengFacPeer::TIPO_DOC2,RengFacPeer::RENG_DOC2,RengFacPeer::NUM_DOC2,RengFacPeer::TIPO_PREC,RengFacPeer::CO_ALMA2,RengFacPeer::AUX01,RengFacPeer::AUX02,RengFacPeer::CANT_PROD,RengFacPeer::IMP_PROD))) {
				return false;
			}

			if ($this->dis_cen !== ' ') {
				return false;
			}

			if ($this->tipo_doc !== ' ') {
				return false;
			}

			if ($this->reng_doc !== 0) {
				return false;
			}

			if ($this->num_doc !== 0) {
				return false;
			}

			if ($this->co_art !== ' ') {
				return false;
			}

			if ($this->co_alma !== ' ') {
				return false;
			}

			if ($this->total_art !== '0') {
				return false;
			}

			if ($this->stotal_art !== '0') {
				return false;
			}

			if ($this->pendiente !== '0') {
				return false;
			}

			if ($this->uni_venta !== ' ') {
				return false;
			}

			if ($this->prec_vta !== '0') {
				return false;
			}

			if ($this->porc_desc !== ' ') {
				return false;
			}

			if ($this->tipo_imp !== ' ') {
				return false;
			}

			if ($this->isv !== '0') {
				return false;
			}

			if ($this->reng_neto !== '0') {
				return false;
			}

			if ($this->cos_pro_un !== '0') {
				return false;
			}

			if ($this->ult_cos_un !== '0') {
				return false;
			}

			if ($this->ult_cos_om !== '0') {
				return false;
			}

			if ($this->cos_pro_om !== '0') {
				return false;
			}

			if ($this->total_dev !== '0') {
				return false;
			}

			if ($this->monto_dev !== '0') {
				return false;
			}

			if ($this->prec_vta2 !== '0') {
				return false;
			}

			if ($this->anulado !== false) {
				return false;
			}

			if ($this->des_art !== ' ') {
				return false;
			}

			if ($this->seleccion !== false) {
				return false;
			}

			if ($this->cant_imp !== '0') {
				return false;
			}

			if ($this->comentario !== ' ') {
				return false;
			}

			if ($this->rowguid !== '(newid())') {
				return false;
			}

			if ($this->total_uni !== '1') {
				return false;
			}

			if ($this->mon_ilc !== '0') {
				return false;
			}

			if ($this->otros !== '0') {
				return false;
			}

			if ($this->nro_lote !== ' ') {
				return false;
			}

			if ($this->pendiente2 !== '0') {
				return false;
			}

			if ($this->tipo_doc2 !== ' ') {
				return false;
			}

			if ($this->reng_doc2 !== 0) {
				return false;
			}

			if ($this->num_doc2 !== 0) {
				return false;
			}

			if ($this->tipo_prec !== ' ') {
				return false;
			}

			if ($this->co_alma2 !== ' ') {
				return false;
			}

			if ($this->aux01 !== '0') {
				return false;
			}

			if ($this->aux02 !== ' ') {
				return false;
			}

			if ($this->cant_prod !== '0') {
				return false;
			}

			if ($this->imp_prod !== '0') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->fact_num = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->reng_num = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->dis_cen = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->tipo_doc = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->reng_doc = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->num_doc = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->co_art = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->co_alma = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->total_art = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->stotal_art = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->pendiente = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->uni_venta = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->prec_vta = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->porc_desc = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->tipo_imp = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->isv = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->reng_neto = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->cos_pro_un = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->ult_cos_un = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->ult_cos_om = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->cos_pro_om = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->total_dev = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->monto_dev = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->prec_vta2 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->anulado = ($row[$startcol + 24] !== null) ? (boolean) $row[$startcol + 24] : null;
			$this->des_art = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->seleccion = ($row[$startcol + 26] !== null) ? (boolean) $row[$startcol + 26] : null;
			$this->cant_imp = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->comentario = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->rowguid = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->total_uni = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->mon_ilc = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->otros = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->nro_lote = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->fec_lote = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->pendiente2 = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->tipo_doc2 = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->reng_doc2 = ($row[$startcol + 37] !== null) ? (int) $row[$startcol + 37] : null;
			$this->num_doc2 = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->tipo_prec = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->co_alma2 = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->aux01 = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->aux02 = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->cant_prod = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->imp_prod = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 45; // 45 = RengFacPeer::NUM_COLUMNS - RengFacPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RengFac object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aArt !== null && $this->co_art !== $this->aArt->getCoArt()) {
			$this->aArt = null;
		}
		if ($this->aSubAlma !== null && $this->co_alma !== $this->aSubAlma->getCoSub()) {
			$this->aSubAlma = null;
		}
		if ($this->aTabulado !== null && $this->tipo_imp !== $this->aTabulado->getTipo()) {
			$this->aTabulado = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengFacPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RengFacPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aArt = null;
			$this->aSubAlma = null;
			$this->aTabulado = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengFac:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengFacPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RengFacPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRengFac:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRengFac:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RengFacPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRengFac:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RengFacPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aArt !== null) {
				if ($this->aArt->isModified() || $this->aArt->isNew()) {
					$affectedRows += $this->aArt->save($con);
				}
				$this->setArt($this->aArt);
			}

			if ($this->aSubAlma !== null) {
				if ($this->aSubAlma->isModified() || $this->aSubAlma->isNew()) {
					$affectedRows += $this->aSubAlma->save($con);
				}
				$this->setSubAlma($this->aSubAlma);
			}

			if ($this->aTabulado !== null) {
				if ($this->aTabulado->isModified() || $this->aTabulado->isNew()) {
					$affectedRows += $this->aTabulado->save($con);
				}
				$this->setTabulado($this->aTabulado);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RengFacPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += RengFacPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aArt !== null) {
				if (!$this->aArt->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aArt->getValidationFailures());
				}
			}

			if ($this->aSubAlma !== null) {
				if (!$this->aSubAlma->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSubAlma->getValidationFailures());
				}
			}

			if ($this->aTabulado !== null) {
				if (!$this->aTabulado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTabulado->getValidationFailures());
				}
			}


			if (($retval = RengFacPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RengFacPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getFactNum();
				break;
			case 1:
				return $this->getRengNum();
				break;
			case 2:
				return $this->getDisCen();
				break;
			case 3:
				return $this->getTipoDoc();
				break;
			case 4:
				return $this->getRengDoc();
				break;
			case 5:
				return $this->getNumDoc();
				break;
			case 6:
				return $this->getCoArt();
				break;
			case 7:
				return $this->getCoAlma();
				break;
			case 8:
				return $this->getTotalArt();
				break;
			case 9:
				return $this->getStotalArt();
				break;
			case 10:
				return $this->getPendiente();
				break;
			case 11:
				return $this->getUniVenta();
				break;
			case 12:
				return $this->getPrecVta();
				break;
			case 13:
				return $this->getPorcDesc();
				break;
			case 14:
				return $this->getTipoImp();
				break;
			case 15:
				return $this->getIsv();
				break;
			case 16:
				return $this->getRengNeto();
				break;
			case 17:
				return $this->getCosProUn();
				break;
			case 18:
				return $this->getUltCosUn();
				break;
			case 19:
				return $this->getUltCosOm();
				break;
			case 20:
				return $this->getCosProOm();
				break;
			case 21:
				return $this->getTotalDev();
				break;
			case 22:
				return $this->getMontoDev();
				break;
			case 23:
				return $this->getPrecVta2();
				break;
			case 24:
				return $this->getAnulado();
				break;
			case 25:
				return $this->getDesArt();
				break;
			case 26:
				return $this->getSeleccion();
				break;
			case 27:
				return $this->getCantImp();
				break;
			case 28:
				return $this->getComentario();
				break;
			case 29:
				return $this->getRowguid();
				break;
			case 30:
				return $this->getTotalUni();
				break;
			case 31:
				return $this->getMonIlc();
				break;
			case 32:
				return $this->getOtros();
				break;
			case 33:
				return $this->getNroLote();
				break;
			case 34:
				return $this->getFecLote();
				break;
			case 35:
				return $this->getPendiente2();
				break;
			case 36:
				return $this->getTipoDoc2();
				break;
			case 37:
				return $this->getRengDoc2();
				break;
			case 38:
				return $this->getNumDoc2();
				break;
			case 39:
				return $this->getTipoPrec();
				break;
			case 40:
				return $this->getCoAlma2();
				break;
			case 41:
				return $this->getAux01();
				break;
			case 42:
				return $this->getAux02();
				break;
			case 43:
				return $this->getCantProd();
				break;
			case 44:
				return $this->getImpProd();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RengFacPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getFactNum(),
			$keys[1] => $this->getRengNum(),
			$keys[2] => $this->getDisCen(),
			$keys[3] => $this->getTipoDoc(),
			$keys[4] => $this->getRengDoc(),
			$keys[5] => $this->getNumDoc(),
			$keys[6] => $this->getCoArt(),
			$keys[7] => $this->getCoAlma(),
			$keys[8] => $this->getTotalArt(),
			$keys[9] => $this->getStotalArt(),
			$keys[10] => $this->getPendiente(),
			$keys[11] => $this->getUniVenta(),
			$keys[12] => $this->getPrecVta(),
			$keys[13] => $this->getPorcDesc(),
			$keys[14] => $this->getTipoImp(),
			$keys[15] => $this->getIsv(),
			$keys[16] => $this->getRengNeto(),
			$keys[17] => $this->getCosProUn(),
			$keys[18] => $this->getUltCosUn(),
			$keys[19] => $this->getUltCosOm(),
			$keys[20] => $this->getCosProOm(),
			$keys[21] => $this->getTotalDev(),
			$keys[22] => $this->getMontoDev(),
			$keys[23] => $this->getPrecVta2(),
			$keys[24] => $this->getAnulado(),
			$keys[25] => $this->getDesArt(),
			$keys[26] => $this->getSeleccion(),
			$keys[27] => $this->getCantImp(),
			$keys[28] => $this->getComentario(),
			$keys[29] => $this->getRowguid(),
			$keys[30] => $this->getTotalUni(),
			$keys[31] => $this->getMonIlc(),
			$keys[32] => $this->getOtros(),
			$keys[33] => $this->getNroLote(),
			$keys[34] => $this->getFecLote(),
			$keys[35] => $this->getPendiente2(),
			$keys[36] => $this->getTipoDoc2(),
			$keys[37] => $this->getRengDoc2(),
			$keys[38] => $this->getNumDoc2(),
			$keys[39] => $this->getTipoPrec(),
			$keys[40] => $this->getCoAlma2(),
			$keys[41] => $this->getAux01(),
			$keys[42] => $this->getAux02(),
			$keys[43] => $this->getCantProd(),
			$keys[44] => $this->getImpProd(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RengFacPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setFactNum($value);
				break;
			case 1:
				$this->setRengNum($value);
				break;
			case 2:
				$this->setDisCen($value);
				break;
			case 3:
				$this->setTipoDoc($value);
				break;
			case 4:
				$this->setRengDoc($value);
				break;
			case 5:
				$this->setNumDoc($value);
				break;
			case 6:
				$this->setCoArt($value);
				break;
			case 7:
				$this->setCoAlma($value);
				break;
			case 8:
				$this->setTotalArt($value);
				break;
			case 9:
				$this->setStotalArt($value);
				break;
			case 10:
				$this->setPendiente($value);
				break;
			case 11:
				$this->setUniVenta($value);
				break;
			case 12:
				$this->setPrecVta($value);
				break;
			case 13:
				$this->setPorcDesc($value);
				break;
			case 14:
				$this->setTipoImp($value);
				break;
			case 15:
				$this->setIsv($value);
				break;
			case 16:
				$this->setRengNeto($value);
				break;
			case 17:
				$this->setCosProUn($value);
				break;
			case 18:
				$this->setUltCosUn($value);
				break;
			case 19:
				$this->setUltCosOm($value);
				break;
			case 20:
				$this->setCosProOm($value);
				break;
			case 21:
				$this->setTotalDev($value);
				break;
			case 22:
				$this->setMontoDev($value);
				break;
			case 23:
				$this->setPrecVta2($value);
				break;
			case 24:
				$this->setAnulado($value);
				break;
			case 25:
				$this->setDesArt($value);
				break;
			case 26:
				$this->setSeleccion($value);
				break;
			case 27:
				$this->setCantImp($value);
				break;
			case 28:
				$this->setComentario($value);
				break;
			case 29:
				$this->setRowguid($value);
				break;
			case 30:
				$this->setTotalUni($value);
				break;
			case 31:
				$this->setMonIlc($value);
				break;
			case 32:
				$this->setOtros($value);
				break;
			case 33:
				$this->setNroLote($value);
				break;
			case 34:
				$this->setFecLote($value);
				break;
			case 35:
				$this->setPendiente2($value);
				break;
			case 36:
				$this->setTipoDoc2($value);
				break;
			case 37:
				$this->setRengDoc2($value);
				break;
			case 38:
				$this->setNumDoc2($value);
				break;
			case 39:
				$this->setTipoPrec($value);
				break;
			case 40:
				$this->setCoAlma2($value);
				break;
			case 41:
				$this->setAux01($value);
				break;
			case 42:
				$this->setAux02($value);
				break;
			case 43:
				$this->setCantProd($value);
				break;
			case 44:
				$this->setImpProd($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RengFacPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setFactNum($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setRengNum($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDisCen($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTipoDoc($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setRengDoc($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNumDoc($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCoArt($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCoAlma($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTotalArt($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setStotalArt($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPendiente($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUniVenta($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPrecVta($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPorcDesc($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTipoImp($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setIsv($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setRengNeto($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCosProUn($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setUltCosUn($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setUltCosOm($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCosProOm($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setTotalDev($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setMontoDev($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setPrecVta2($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setAnulado($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setDesArt($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setSeleccion($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCantImp($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setComentario($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setRowguid($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setTotalUni($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setMonIlc($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setOtros($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setNroLote($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setFecLote($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setPendiente2($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setTipoDoc2($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setRengDoc2($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setNumDoc2($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setTipoPrec($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setCoAlma2($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setAux01($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setAux02($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setCantProd($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setImpProd($arr[$keys[44]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RengFacPeer::DATABASE_NAME);

		if ($this->isColumnModified(RengFacPeer::FACT_NUM)) $criteria->add(RengFacPeer::FACT_NUM, $this->fact_num);
		if ($this->isColumnModified(RengFacPeer::RENG_NUM)) $criteria->add(RengFacPeer::RENG_NUM, $this->reng_num);
		if ($this->isColumnModified(RengFacPeer::DIS_CEN)) $criteria->add(RengFacPeer::DIS_CEN, $this->dis_cen);
		if ($this->isColumnModified(RengFacPeer::TIPO_DOC)) $criteria->add(RengFacPeer::TIPO_DOC, $this->tipo_doc);
		if ($this->isColumnModified(RengFacPeer::RENG_DOC)) $criteria->add(RengFacPeer::RENG_DOC, $this->reng_doc);
		if ($this->isColumnModified(RengFacPeer::NUM_DOC)) $criteria->add(RengFacPeer::NUM_DOC, $this->num_doc);
		if ($this->isColumnModified(RengFacPeer::CO_ART)) $criteria->add(RengFacPeer::CO_ART, $this->co_art);
		if ($this->isColumnModified(RengFacPeer::CO_ALMA)) $criteria->add(RengFacPeer::CO_ALMA, $this->co_alma);
		if ($this->isColumnModified(RengFacPeer::TOTAL_ART)) $criteria->add(RengFacPeer::TOTAL_ART, $this->total_art);
		if ($this->isColumnModified(RengFacPeer::STOTAL_ART)) $criteria->add(RengFacPeer::STOTAL_ART, $this->stotal_art);
		if ($this->isColumnModified(RengFacPeer::PENDIENTE)) $criteria->add(RengFacPeer::PENDIENTE, $this->pendiente);
		if ($this->isColumnModified(RengFacPeer::UNI_VENTA)) $criteria->add(RengFacPeer::UNI_VENTA, $this->uni_venta);
		if ($this->isColumnModified(RengFacPeer::PREC_VTA)) $criteria->add(RengFacPeer::PREC_VTA, $this->prec_vta);
		if ($this->isColumnModified(RengFacPeer::PORC_DESC)) $criteria->add(RengFacPeer::PORC_DESC, $this->porc_desc);
		if ($this->isColumnModified(RengFacPeer::TIPO_IMP)) $criteria->add(RengFacPeer::TIPO_IMP, $this->tipo_imp);
		if ($this->isColumnModified(RengFacPeer::ISV)) $criteria->add(RengFacPeer::ISV, $this->isv);
		if ($this->isColumnModified(RengFacPeer::RENG_NETO)) $criteria->add(RengFacPeer::RENG_NETO, $this->reng_neto);
		if ($this->isColumnModified(RengFacPeer::COS_PRO_UN)) $criteria->add(RengFacPeer::COS_PRO_UN, $this->cos_pro_un);
		if ($this->isColumnModified(RengFacPeer::ULT_COS_UN)) $criteria->add(RengFacPeer::ULT_COS_UN, $this->ult_cos_un);
		if ($this->isColumnModified(RengFacPeer::ULT_COS_OM)) $criteria->add(RengFacPeer::ULT_COS_OM, $this->ult_cos_om);
		if ($this->isColumnModified(RengFacPeer::COS_PRO_OM)) $criteria->add(RengFacPeer::COS_PRO_OM, $this->cos_pro_om);
		if ($this->isColumnModified(RengFacPeer::TOTAL_DEV)) $criteria->add(RengFacPeer::TOTAL_DEV, $this->total_dev);
		if ($this->isColumnModified(RengFacPeer::MONTO_DEV)) $criteria->add(RengFacPeer::MONTO_DEV, $this->monto_dev);
		if ($this->isColumnModified(RengFacPeer::PREC_VTA2)) $criteria->add(RengFacPeer::PREC_VTA2, $this->prec_vta2);
		if ($this->isColumnModified(RengFacPeer::ANULADO)) $criteria->add(RengFacPeer::ANULADO, $this->anulado);
		if ($this->isColumnModified(RengFacPeer::DES_ART)) $criteria->add(RengFacPeer::DES_ART, $this->des_art);
		if ($this->isColumnModified(RengFacPeer::SELECCION)) $criteria->add(RengFacPeer::SELECCION, $this->seleccion);
		if ($this->isColumnModified(RengFacPeer::CANT_IMP)) $criteria->add(RengFacPeer::CANT_IMP, $this->cant_imp);
		if ($this->isColumnModified(RengFacPeer::COMENTARIO)) $criteria->add(RengFacPeer::COMENTARIO, $this->comentario);
		if ($this->isColumnModified(RengFacPeer::ROWGUID)) $criteria->add(RengFacPeer::ROWGUID, $this->rowguid);
		if ($this->isColumnModified(RengFacPeer::TOTAL_UNI)) $criteria->add(RengFacPeer::TOTAL_UNI, $this->total_uni);
		if ($this->isColumnModified(RengFacPeer::MON_ILC)) $criteria->add(RengFacPeer::MON_ILC, $this->mon_ilc);
		if ($this->isColumnModified(RengFacPeer::OTROS)) $criteria->add(RengFacPeer::OTROS, $this->otros);
		if ($this->isColumnModified(RengFacPeer::NRO_LOTE)) $criteria->add(RengFacPeer::NRO_LOTE, $this->nro_lote);
		if ($this->isColumnModified(RengFacPeer::FEC_LOTE)) $criteria->add(RengFacPeer::FEC_LOTE, $this->fec_lote);
		if ($this->isColumnModified(RengFacPeer::PENDIENTE2)) $criteria->add(RengFacPeer::PENDIENTE2, $this->pendiente2);
		if ($this->isColumnModified(RengFacPeer::TIPO_DOC2)) $criteria->add(RengFacPeer::TIPO_DOC2, $this->tipo_doc2);
		if ($this->isColumnModified(RengFacPeer::RENG_DOC2)) $criteria->add(RengFacPeer::RENG_DOC2, $this->reng_doc2);
		if ($this->isColumnModified(RengFacPeer::NUM_DOC2)) $criteria->add(RengFacPeer::NUM_DOC2, $this->num_doc2);
		if ($this->isColumnModified(RengFacPeer::TIPO_PREC)) $criteria->add(RengFacPeer::TIPO_PREC, $this->tipo_prec);
		if ($this->isColumnModified(RengFacPeer::CO_ALMA2)) $criteria->add(RengFacPeer::CO_ALMA2, $this->co_alma2);
		if ($this->isColumnModified(RengFacPeer::AUX01)) $criteria->add(RengFacPeer::AUX01, $this->aux01);
		if ($this->isColumnModified(RengFacPeer::AUX02)) $criteria->add(RengFacPeer::AUX02, $this->aux02);
		if ($this->isColumnModified(RengFacPeer::CANT_PROD)) $criteria->add(RengFacPeer::CANT_PROD, $this->cant_prod);
		if ($this->isColumnModified(RengFacPeer::IMP_PROD)) $criteria->add(RengFacPeer::IMP_PROD, $this->imp_prod);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RengFacPeer::DATABASE_NAME);

		$criteria->add(RengFacPeer::FACT_NUM, $this->fact_num);
		$criteria->add(RengFacPeer::RENG_NUM, $this->reng_num);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getFactNum();

		$pks[1] = $this->getRengNum();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setFactNum($keys[0]);

		$this->setRengNum($keys[1]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RengFac (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFactNum($this->fact_num);

		$copyObj->setRengNum($this->reng_num);

		$copyObj->setDisCen($this->dis_cen);

		$copyObj->setTipoDoc($this->tipo_doc);

		$copyObj->setRengDoc($this->reng_doc);

		$copyObj->setNumDoc($this->num_doc);

		$copyObj->setCoArt($this->co_art);

		$copyObj->setCoAlma($this->co_alma);

		$copyObj->setTotalArt($this->total_art);

		$copyObj->setStotalArt($this->stotal_art);

		$copyObj->setPendiente($this->pendiente);

		$copyObj->setUniVenta($this->uni_venta);

		$copyObj->setPrecVta($this->prec_vta);

		$copyObj->setPorcDesc($this->porc_desc);

		$copyObj->setTipoImp($this->tipo_imp);

		$copyObj->setIsv($this->isv);

		$copyObj->setRengNeto($this->reng_neto);

		$copyObj->setCosProUn($this->cos_pro_un);

		$copyObj->setUltCosUn($this->ult_cos_un);

		$copyObj->setUltCosOm($this->ult_cos_om);

		$copyObj->setCosProOm($this->cos_pro_om);

		$copyObj->setTotalDev($this->total_dev);

		$copyObj->setMontoDev($this->monto_dev);

		$copyObj->setPrecVta2($this->prec_vta2);

		$copyObj->setAnulado($this->anulado);

		$copyObj->setDesArt($this->des_art);

		$copyObj->setSeleccion($this->seleccion);

		$copyObj->setCantImp($this->cant_imp);

		$copyObj->setComentario($this->comentario);

		$copyObj->setRowguid($this->rowguid);

		$copyObj->setTotalUni($this->total_uni);

		$copyObj->setMonIlc($this->mon_ilc);

		$copyObj->setOtros($this->otros);

		$copyObj->setNroLote($this->nro_lote);

		$copyObj->setFecLote($this->fec_lote);

		$copyObj->setPendiente2($this->pendiente2);

		$copyObj->setTipoDoc2($this->tipo_doc2);

		$copyObj->setRengDoc2($this->reng_doc2);

		$copyObj->setNumDoc2($this->num_doc2);

		$copyObj->setTipoPrec($this->tipo_prec);

		$copyObj->setCoAlma2($this->co_alma2);

		$copyObj->setAux01($this->aux01);

		$copyObj->setAux02($this->aux02);

		$copyObj->setCantProd($this->cant_prod);

		$copyObj->setImpProd($this->imp_prod);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RengFac Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RengFacPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RengFacPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Art object.
	 *
	 * @param      Art $v
	 * @return     RengFac The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setArt(Art $v = null)
	{
		if ($v === null) {
			$this->setCoArt(' ');
		} else {
			$this->setCoArt($v->getCoArt());
		}

		$this->aArt = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Art object, it will not be re-added.
		if ($v !== null) {
			$v->addRengFac($this);
		}

		return $this;
	}


	/**
	 * Get the associated Art object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Art The associated Art object.
	 * @throws     PropelException
	 */
	public function getArt(PropelPDO $con = null)
	{
		if ($this->aArt === null && (($this->co_art !== "" && $this->co_art !== null))) {
			$c = new Criteria(ArtPeer::DATABASE_NAME);
			$c->add(ArtPeer::CO_ART, $this->co_art);
			$this->aArt = ArtPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aArt->addRengFacs($this);
			 */
		}
		return $this->aArt;
	}

	/**
	 * Declares an association between this object and a SubAlma object.
	 *
	 * @param      SubAlma $v
	 * @return     RengFac The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSubAlma(SubAlma $v = null)
	{
		if ($v === null) {
			$this->setCoAlma(' ');
		} else {
			$this->setCoAlma($v->getCoSub());
		}

		$this->aSubAlma = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SubAlma object, it will not be re-added.
		if ($v !== null) {
			$v->addRengFac($this);
		}

		return $this;
	}


	/**
	 * Get the associated SubAlma object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SubAlma The associated SubAlma object.
	 * @throws     PropelException
	 */
	public function getSubAlma(PropelPDO $con = null)
	{
		if ($this->aSubAlma === null && (($this->co_alma !== "" && $this->co_alma !== null))) {
			$c = new Criteria(SubAlmaPeer::DATABASE_NAME);
			$c->add(SubAlmaPeer::CO_SUB, $this->co_alma);
			$this->aSubAlma = SubAlmaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSubAlma->addRengFacs($this);
			 */
		}
		return $this->aSubAlma;
	}

	/**
	 * Declares an association between this object and a Tabulado object.
	 *
	 * @param      Tabulado $v
	 * @return     RengFac The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTabulado(Tabulado $v = null)
	{
		if ($v === null) {
			$this->setTipoImp(' ');
		} else {
			$this->setTipoImp($v->getTipo());
		}

		$this->aTabulado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tabulado object, it will not be re-added.
		if ($v !== null) {
			$v->addRengFac($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tabulado object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tabulado The associated Tabulado object.
	 * @throws     PropelException
	 */
	public function getTabulado(PropelPDO $con = null)
	{
		if ($this->aTabulado === null && (($this->tipo_imp !== "" && $this->tipo_imp !== null))) {
			$c = new Criteria(TabuladoPeer::DATABASE_NAME);
			$c->add(TabuladoPeer::TIPO, $this->tipo_imp);
			$this->aTabulado = TabuladoPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTabulado->addRengFacs($this);
			 */
		}
		return $this->aTabulado;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aArt = null;
			$this->aSubAlma = null;
			$this->aTabulado = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRengFac:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRengFac::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRengFac
